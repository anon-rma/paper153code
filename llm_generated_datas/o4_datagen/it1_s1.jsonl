{"query": "I need to create a new text document. Can you help by creating one called 'Journal.txt'?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Journal.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-1"}
{"query": "Please generate a PDF document for me named 'Resume.pdf'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Resume.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-2"}
{"query": "Set up a new document in plain text and title it 'MeetingNotes.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "MeetingNotes.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-3"}
{"query": "I require a new PDF file titled 'Annual_Report.pdf'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Annual_Report.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-4"}
{"query": "Could you make a new plain text file with the suggested name 'Draft.txt'?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Draft.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-5"}
{"query": "I need to write a memo, so please create a text file named 'Memo.txt' for me.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Memo.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-6"}
{"query": "I'd like to start a new document; please generate a PDF version called 'Contract.pdf'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Contract.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-7"}
{"query": "Can you create a document in PDF format? I want to name it 'Brochure.pdf'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Brochure.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-8"}
{"query": "Generate a simple text file named 'ToDoList.txt' so I can jot down my tasks.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "ToDoList.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-9"}
{"query": "Set up a new document in PDF format with the name 'Presentation.pdf'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Presentation.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10"}
{"query": "I need a fresh plain text document for notes. Name it 'QuickNotes.txt', please.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "QuickNotes.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-11"}
{"query": "Help me open a new file; I'm looking for a text document called 'Recipe.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Recipe.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-12"}
{"query": "I want to create a PDF file for my current project details. Please create one named 'ProjectDetails.pdf'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "ProjectDetails.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-13"}
{"query": "Start a new text document with the suggested name 'IdeaLog.txt' so I can record my ideas.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "IdeaLog.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-14"}
{"query": "Can you create a document in PDF format? I'd like it named 'Budget.pdf' for tracking my expenses.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Budget.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-15"}
{"query": "I need a new text file; please create one with the name 'DraftProposal.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "DraftProposal.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-16", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Could you generate a fresh PDF document titled 'Invoice.pdf' for me?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Invoice.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-17", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Please help me by setting up a plain text file called 'Notes.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Notes.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-18", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "I'm looking to produce a PDF report. Can you create one named 'SummaryReport.pdf'?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "SummaryReport.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-19", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Would you mind starting a new note as a plain text document, and naming it 'PersonalNote.txt'?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "PersonalNote.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-20", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Make a new document in PDF format, and label it 'Schedule.pdf'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Schedule.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-21", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "I would like to generate a fresh text document called 'Log.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Log.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-22", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Please create a new PDF for my research and name it 'ResearchPaper.pdf'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "ResearchPaper.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-23", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "I need a plain text document titled 'Diary.txt'. Can you set one up?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Diary.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-24", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Could you produce a new PDF file entitled 'ProjectPlan.pdf'?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "ProjectPlan.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-25", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Set up a simple text-based file with the name 'Checklist.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Checklist.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-26", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "I need a PDF version of my lecture notes. Please name it 'LectureNotes.pdf'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "LectureNotes.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-27", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Can you open a new plain text document called 'Story.txt'?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Story.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-28", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Please create a digital PDF file and title it 'Certificate.pdf'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Certificate.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-29", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "I would like a new memo stored as a plain text file named 'Memo.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Memo.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-30", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Would you create a PDF document labeled 'Portfolio.pdf' for my portfolio?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Portfolio.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-31", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Generate a text document for me; the file should be called 'Announcement.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Announcement.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-32", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "I need a PDF invitation for an event. Please make one named 'Invitation.pdf'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Invitation.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-33", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Help me start a journal entry by creating a text file titled 'Entry.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Entry.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-34", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Can you set up a new PDF document for me called 'Booklet.pdf'?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Booklet.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-35", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "I'd like to create a text document named 'Summary.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Summary.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-36", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Please generate a PDF for my research abstract, titled 'ResearchAbstract.pdf'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "ResearchAbstract.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-37", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "I need a plain text file to jot down ideas. Create one and name it 'Plan.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Plan.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-38", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Could you set up a new PDF document with the title 'ProductDetails.pdf'?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "ProductDetails.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-39", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Generate a new text document and label it 'Ideas.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Ideas.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-40", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "I need a PDF for storing my blueprints. Please create one named 'Blueprint.pdf'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Blueprint.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-41", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Set up a plain text document for me with the name 'DiaryEntry.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "DiaryEntry.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-42", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "I'm looking to create a PDF file titled 'EventSchedule.pdf'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "EventSchedule.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-43", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Can you draft a plain text file called 'Brainstorm.txt' for my ideas?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Brainstorm.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-44", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "I wish to have a PDF document named 'Manual.pdf'. Could you make one for me?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Manual.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-45", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Produce a simple text document and give it the title 'Reflection.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Reflection.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-46", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Could you facilitate creating a PDF version of our contract, naming it 'Agreement.pdf'?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Agreement.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-47", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "I need you to prepare a new plain text document called 'Report.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Report.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-48", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Can you create a PDF named 'Details.pdf' for review purposes?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Details.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-49", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "I want to set up a new text file; please call it 'DiaryNotes.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "DiaryNotes.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-50", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Please produce a PDF file and name it 'Summary.pdf'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Summary.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-51", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Help me launch a new document in text format called 'Bulletin.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Bulletin.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-52", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "I would like a PDF document titled 'Ebook.pdf' to store my writing. Can you make it?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Ebook.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-53", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Create a new plain text document named 'Agenda.txt' for my meeting notes.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Agenda.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-54", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Could you generate a new PDF file for my presentation, and thus call it 'Slides.pdf'?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Slides.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-55", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Please update the contact for John using URI content://contacts/people/john; his phone number should now be 123-456-7890.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/john", "contact_info": {"phone": "123-456-7890"}}}, "unique_idx": "ACTION_EDIT_CONTACT-56"}
{"query": "Could you edit the details for my coworker at content://contacts/people/alice to update her email to alice@example.com and set her company to AcmeCorp?", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/alice", "contact_info": {"email": "alice@example.com", "company": "AcmeCorp"}}}, "unique_idx": "ACTION_EDIT_CONTACT-57"}
{"query": "I need to change the address for the contact at content://contacts/people/robert. Please update his address to '123 Elm Street'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/robert", "contact_info": {"address": "123 Elm Street"}}}, "unique_idx": "ACTION_EDIT_CONTACT-58"}
{"query": "Modify the contact data for the person at URI content://contacts/people/sam by changing the name to 'Samuel Lee'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/sam", "contact_info": {"name": "Samuel Lee"}}}, "unique_idx": "ACTION_EDIT_CONTACT-59"}
{"query": "Update my friend Anna's contact that is on content://contacts/people/anna: set her email to anna@domain.org and phone to 555-1234.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/anna", "contact_info": {"email": "anna@domain.org", "phone": "555-1234"}}}, "unique_idx": "ACTION_EDIT_CONTACT-60"}
{"query": "I want to open the edit interface for the contact at content://contacts/people/michael without any immediate changes.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/michael"}}, "unique_idx": "ACTION_EDIT_CONTACT-61"}
{"query": "Please update my mentor's details; use the contact URI content://contacts/people/jane and change her company to TechSoft.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/jane", "contact_info": {"company": "TechSoft"}}}, "unique_idx": "ACTION_EDIT_CONTACT-62"}
{"query": "Edit the contact located at content://contacts/people/roboto: modify the address to '456 Silicon Blvd' and update the phone number to 987-654-3210.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/roboto", "contact_info": {"address": "456 Silicon Blvd", "phone": "987-654-3210"}}}, "unique_idx": "ACTION_EDIT_CONTACT-63"}
{"query": "Can you adjust the contact details for the URI content://contacts/people/carter by changing the email to carter@company.com?", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/carter", "contact_info": {"email": "carter@company.com"}}}, "unique_idx": "ACTION_EDIT_CONTACT-64"}
{"query": "Kindly update my business partner's contact information at content://contacts/people/kelly so that the name field is now 'Kelly Brown'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/kelly", "contact_info": {"name": "Kelly Brown"}}}, "unique_idx": "ACTION_EDIT_CONTACT-65"}
{"query": "I require a change for the contact at content://contacts/people/leo: please update his phone to 2223334444 and his email to leo@enterprise.com.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/leo", "contact_info": {"phone": "2223334444", "email": "leo@enterprise.com"}}}, "unique_idx": "ACTION_EDIT_CONTACT-66"}
{"query": "Please modify the record for my friend Sara at content://contacts/people/sara by updating her address to '789 Maple Ave' and assigning her company as Innovate Ltd.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/sara", "contact_info": {"address": "789 Maple Ave", "company": "Innovate Ltd"}}}, "unique_idx": "ACTION_EDIT_CONTACT-67"}
{"query": "I need to update the contact details for Brian found at content://contacts/people/brian; change his name to 'Brian O'Connor' and his email to brian.oconnor@example.net.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/brian", "contact_info": {"name": "Brian O'Connor", "email": "brian.oconnor@example.net"}}}, "unique_idx": "ACTION_EDIT_CONTACT-68"}
{"query": "Could you please update the information for the contact at URI content://contacts/people/zoe so that her phone number is now 8005550001?", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/zoe", "contact_info": {"phone": "8005550001"}}}, "unique_idx": "ACTION_EDIT_CONTACT-69"}
{"query": "I want to edit the contact details using the URI content://contacts/people/arthur. Please set his company to 'OldSchool Inc.'", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/arthur", "contact_info": {"company": "OldSchool Inc."}}}, "unique_idx": "ACTION_EDIT_CONTACT-70"}
{"query": "Please update Mark's contact on content://contacts/people/mark by setting his phone number to 123-456-7890.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/mark", "contact_info": {"phone": "123-456-7890"}}}, "unique_idx": "ACTION_EDIT_CONTACT-71", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Set Sarah's email on contact content://contacts/people/sarah to sarah@example.com.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/sarah", "contact_info": {"email": "sarah@example.com"}}}, "unique_idx": "ACTION_EDIT_CONTACT-72", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Change the contact for Tom at content://contacts/people/tom by updating his company to Tech Corp.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/tom", "contact_info": {"company": "Tech Corp"}}}, "unique_idx": "ACTION_EDIT_CONTACT-73", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Please update Bob's contact info at content://contacts/people/bob by adding his address as '321 Baker St'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/bob", "contact_info": {"address": "321 Baker St"}}}, "unique_idx": "ACTION_EDIT_CONTACT-74", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Modify the entry at content://contacts/people/emily by updating her name to 'Emily Watson'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/emily", "contact_info": {"name": "Emily Watson"}}}, "unique_idx": "ACTION_EDIT_CONTACT-75", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Can you modify Lucy's information at content://contacts/people/lucy? I'd like to set her email to lucy@home.net.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/lucy", "contact_info": {"email": "lucy@home.net"}}}, "unique_idx": "ACTION_EDIT_CONTACT-76", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "I need to update the contact at content://contacts/people/dave: change his phone to 555-0001 and set his company to Innovate Inc.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/dave", "contact_info": {"phone": "555-0001", "company": "Innovate Inc"}}}, "unique_idx": "ACTION_EDIT_CONTACT-77", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Kindly modify Rachel's contact at content://contacts/people/rachel by setting her address to '789 Cherry Lane'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/rachel", "contact_info": {"address": "789 Cherry Lane"}}}, "unique_idx": "ACTION_EDIT_CONTACT-78", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Please revise the record at content://contacts/people/paul by updating his phone number to 800-555-1234.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/paul", "contact_info": {"phone": "800-555-1234"}}}, "unique_idx": "ACTION_EDIT_CONTACT-79", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Edit the contact at URI content://contacts/people/anna2: update the name to 'Anna Lee' and the email to anna.lee@mail.com.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/anna2", "contact_info": {"name": "Anna Lee", "email": "anna.lee@mail.com"}}}, "unique_idx": "ACTION_EDIT_CONTACT-80", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "For the contact located at content://contacts/people/jenny, change her phone number to 222-333-4444.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/jenny", "contact_info": {"phone": "222-333-4444"}}}, "unique_idx": "ACTION_EDIT_CONTACT-81", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Revise Justin's details at content://contacts/people/justin by updating his company to 'Alpha Tech'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/justin", "contact_info": {"company": "Alpha Tech"}}}, "unique_idx": "ACTION_EDIT_CONTACT-82", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Adjust the contact details of Linda at content://contacts/people/linda: set her email to linda@work.org.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/linda", "contact_info": {"email": "linda@work.org"}}}, "unique_idx": "ACTION_EDIT_CONTACT-83", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "I want to change my colleague Kevin's phone number to 999-888-7777 using contact URI content://contacts/people/kevin.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/kevin", "contact_info": {"phone": "999-888-7777"}}}, "unique_idx": "ACTION_EDIT_CONTACT-84", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Update the contact for Emma at content://contacts/people/emma so that her address becomes '200 Park Ave'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/emma", "contact_info": {"address": "200 Park Ave"}}}, "unique_idx": "ACTION_EDIT_CONTACT-85", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Please modify the contact info for the person at content://contacts/people/simon: change his name to 'Simon Pegg' and update his phone number to 444-555-6666.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/simon", "contact_info": {"name": "Simon Pegg", "phone": "444-555-6666"}}}, "unique_idx": "ACTION_EDIT_CONTACT-86", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "I wish to edit the contact available at content://contacts/people/beth by updating her company to 'HealthPlus'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/beth", "contact_info": {"company": "HealthPlus"}}}, "unique_idx": "ACTION_EDIT_CONTACT-87", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Could you update the contact details for Noah from content://contacts/people/noah? Set his email to noah@mail.net and phone to 111-222-3333.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/noah", "contact_info": {"email": "noah@mail.net", "phone": "111-222-3333"}}}, "unique_idx": "ACTION_EDIT_CONTACT-88", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "For the entry at content://contacts/people/zoe, please modify her name to 'Zoe Kravitz'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/zoe", "contact_info": {"name": "Zoe Kravitz"}}}, "unique_idx": "ACTION_EDIT_CONTACT-89", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Please update the contact at content://contacts/people/dylan with the address '101 Main Street'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/dylan", "contact_info": {"address": "101 Main Street"}}}, "unique_idx": "ACTION_EDIT_CONTACT-90", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Edit Lucy's phone information: use content://contacts/people/lucy2 to change her phone to 777-888-9999.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/lucy2", "contact_info": {"phone": "777-888-9999"}}}, "unique_idx": "ACTION_EDIT_CONTACT-91", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "I want to adjust Teresa’s contact at content://contacts/people/teresa by updating her email to teresa@example.co.uk.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/teresa", "contact_info": {"email": "teresa@example.co.uk"}}}, "unique_idx": "ACTION_EDIT_CONTACT-92", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Can you help modify the contact at content://contacts/people/mike? I need to update his company to MegaCorp and change his name to Michael.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/mike", "contact_info": {"company": "MegaCorp", "name": "Michael"}}}, "unique_idx": "ACTION_EDIT_CONTACT-93", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Please update this contact at URI content://contacts/people/ella to set her phone to 333-444-5555 and update her address to '404 Maple Street'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/ella", "contact_info": {"phone": "333-444-5555", "address": "404 Maple Street"}}}, "unique_idx": "ACTION_EDIT_CONTACT-94", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Amend Patrick's details found at content://contacts/people/patrick by changing his email to patrick@sample.net.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/patrick", "contact_info": {"email": "patrick@sample.net"}}}, "unique_idx": "ACTION_EDIT_CONTACT-95", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Revise the data for the contact at content://contacts/people/fiona to update her name to 'Fiona Gallagher' and her company to 'Gallagher Inc'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/fiona", "contact_info": {"name": "Fiona Gallagher", "company": "Gallagher Inc"}}}, "unique_idx": "ACTION_EDIT_CONTACT-96", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Please modify the contact on content://contacts/people/oliver; update his phone number to 000-111-2222.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/oliver", "contact_info": {"phone": "000-111-2222"}}}, "unique_idx": "ACTION_EDIT_CONTACT-97", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "I need you to change the record at content://contacts/people/luke: set his address to '50 Star Rd' and his email to luke@space.com.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/luke", "contact_info": {"address": "50 Star Rd", "email": "luke@space.com"}}}, "unique_idx": "ACTION_EDIT_CONTACT-98", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Can you update the details for the contact at content://contacts/people/nina by setting her name as 'Nina Simone'?", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/nina", "contact_info": {"name": "Nina Simone"}}}, "unique_idx": "ACTION_EDIT_CONTACT-99", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Edit the contact for my friend Owen using URI content://contacts/people/owen to update his phone to 888-999-0000 and his company to 'Owen LLC'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/owen", "contact_info": {"phone": "888-999-0000", "company": "Owen LLC"}}}, "unique_idx": "ACTION_EDIT_CONTACT-100", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Kindly update the email for the contact located at content://contacts/people/johnny to johnny@mail.org.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/johnny", "contact_info": {"email": "johnny@mail.org"}}}, "unique_idx": "ACTION_EDIT_CONTACT-101", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Update the contact at content://contacts/people/karen so that her address becomes '88 Sunset Blvd'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/karen", "contact_info": {"address": "88 Sunset Blvd"}}}, "unique_idx": "ACTION_EDIT_CONTACT-102", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Revise contact information for Tim at content://contacts/people/tim by updating his email to timmy@digital.com and his phone to 222-444-6666.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/tim", "contact_info": {"email": "timmy@digital.com", "phone": "222-444-6666"}}}, "unique_idx": "ACTION_EDIT_CONTACT-103", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Please update the contact info for Vanessa at content://contacts/people/vanessa: set her company name as 'Vanessa Ventures'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/vanessa", "contact_info": {"company": "Vanessa Ventures"}}}, "unique_idx": "ACTION_EDIT_CONTACT-104", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "I want to change the details for the contact at content://contacts/people/eric; modify his phone to 123-000-4567 and his address to '78 Ocean Ave'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/eric", "contact_info": {"phone": "123-000-4567", "address": "78 Ocean Ave"}}}, "unique_idx": "ACTION_EDIT_CONTACT-105", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Could you update the record for my acquaintance at content://contacts/people/george by updating his email to george@promo.biz?", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/george", "contact_info": {"email": "george@promo.biz"}}}, "unique_idx": "ACTION_EDIT_CONTACT-106", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Please change the business information on the contact at content://contacts/people/frank by setting his company to 'Franklin Co'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/frank", "contact_info": {"company": "Franklin Co"}}}, "unique_idx": "ACTION_EDIT_CONTACT-107", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "For the contact URI content://contacts/people/lily, update her phone number to 555-4321 and her email to lily@mailservice.com.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/lily", "contact_info": {"phone": "555-4321", "email": "lily@mailservice.com"}}}, "unique_idx": "ACTION_EDIT_CONTACT-108", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Edit the contact at content://contacts/people/sam: change his name to 'Samuel Adams' and update his company to 'Adams Brewing'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/sam", "contact_info": {"name": "Samuel Adams", "company": "Adams Brewing"}}}, "unique_idx": "ACTION_EDIT_CONTACT-109", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Modify the contact found at content://contacts/people/claire by updating her address to '900 Grove Street' and her phone to 867-5309.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/claire", "contact_info": {"address": "900 Grove Street", "phone": "867-5309"}}}, "unique_idx": "ACTION_EDIT_CONTACT-110", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Please open a document in PDF format from my device.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/pdf"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-111"}
{"query": "Can you show me how to select text files? I need to choose multiple files at once.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/plain"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-112"}
{"query": "I'd like to access a couple of documents. They can be either PDFs or plain texts, and I want to select them at the same time.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/pdf", "text/plain"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-113"}
{"query": "I want to pick just one image file for editing, preferably any kind of image.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["image/*"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-114"}
{"query": "Help me open a Microsoft Word document from my storage.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/msword"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-115"}
{"query": "Open a document for me; I need any single file in text format.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/plain"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-116"}
{"query": "I want to select multiple image documents. Please allow me the option to choose several images at once.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["image/*"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-117"}
{"query": "Allow me to pick a spreadsheet file; I'm looking specifically for Excel files.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/vnd.ms-excel"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-118"}
{"query": "Retrieve multiple PDF files from my cloud storage, please.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/pdf"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-119"}
{"query": "I need to open a single document containing audio content from my device.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["audio/*"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-120"}
{"query": "Please provide me with an option to select a single video file from my device.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["video/*"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-121"}
{"query": "Select documents for me: I want both text and PDF files, and I prefer to select several at once.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/plain", "application/pdf"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-122"}
{"query": "I have a requirement to open a file in XML format. Can you help me choose one?", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/xml"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-123"}
{"query": "Access document: I need to open a single file with application JSON format.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/json"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-124"}
{"query": "I require to open multiple documents. Could you allow me to pick files from both images and spreadsheets at once?", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["image/*", "application/vnd.ms-excel"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-125"}
{"query": "Choose one PNG image file from my device.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["image/png"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-126", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I want to browse and open a plain text document from my storage.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/plain"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-127", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Select a video file from my local storage, please.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["video/*"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-128", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Access a Word document; I need it for some editing work.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/msword"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-129", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I require opening several spreadsheets for analysis. Allow multiple selections.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/vnd.ms-excel"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-130", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Can you let me open a JSON file from my archive?", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/json"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-131", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Pick an XML file so I can review its contents.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/xml"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-132", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I need a log file in plain text format; please open one for me.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/plain"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-133", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Please enable me to select both image and PDF files at once.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["image/*", "application/pdf"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-134", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Choose an audio file from my collection.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["audio/*"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-135", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Let me select a colorful image file for editing purposes.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["image/*"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-136", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I want to open a PDF document for a quick read.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/pdf"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-137", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Allow me to pick multiple plain text documents for review.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/plain"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-138", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Help me open a .doc file stored on my device.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/msword"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-139", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Find and open a CSV file from my documents.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/csv"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-140", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Select an HTML document from my files.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/html"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-141", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I need to open an EPUB e-book from my collection.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/epub+zip"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-142", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I would like to select several video clips for my project, so please allow multiple selections.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["video/*"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-143", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I require a single Markdown file for review.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/markdown"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-144", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I want to edit some images; let me pick multiple image files from my gallery.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["image/*"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-145", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I need to open a JavaScript file from my codebase.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/javascript"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-146", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Let me choose a few XML documents; I want to open more than one.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/xml"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-147", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I require a PowerPoint presentation file for my review.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/vnd.ms-powerpoint"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-148", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Access multiple CSV files from my drive, please.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/csv"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-149", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I must load a plain text file that contains my notes.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/plain"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-150", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Could you let me select both PDF and Word files with multi-select enabled?", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/pdf", "application/msword"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-151", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Find me a Kindle file; I need a MOBI document from my library.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/x-mobipocket-ebook"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-152", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I want to open a shell script file for configuration purposes.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/x-sh"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-153", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Select an image file from the image category; any format is acceptable.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["image/*"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-154", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I require a vector graphic file, like an SVG, for design purposes.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["image/svg+xml"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-155", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Retrieve a PDF document stored on my device.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/pdf"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-156", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I would like to open several video files; please enable multiple selections.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["video/*"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-157", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I need one DOC file, preferably in the Microsoft Word format.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/msword"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-158", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Let me select multiple ePub books to read offline.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/epub+zip"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-159", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I want to open a JSON file from my archive for processing.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/json"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-160", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Retrieve a presentation file for me; I'm looking for a PowerPoint document.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/vnd.ms-powerpoint"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-161", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I need a text file containing my journal entries.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/plain"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-162", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Select multiple spreadsheet files so I can perform some data analysis.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/vnd.ms-excel"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-163", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I need to quickly pick a single image file to attach to my email.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "image/*"}}, "unique_idx": "ACTION_GET_CONTENT-164"}
{"query": "Select multiple photos from my phone for a quick sharing session.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "image/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-165"}
{"query": "Open a file selector so I can choose one video clip from my device.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "video/*"}}, "unique_idx": "ACTION_GET_CONTENT-166"}
{"query": "I want to browse all file types on my computer; open the selector for any file.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "*/*"}}, "unique_idx": "ACTION_GET_CONTENT-167"}
{"query": "Could you let me attach several PDF documents at once?", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "application/pdf", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-168"}
{"query": "I need to choose an audio file for my playlist. Please open the audio file picker.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "audio/*"}}, "unique_idx": "ACTION_GET_CONTENT-169"}
{"query": "Let me select multiple audio tracks simultaneously, please.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "audio/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-170"}
{"query": "I need to attach a text file. Open the file selection dialog for plain text files.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "text/plain"}}, "unique_idx": "ACTION_GET_CONTENT-171"}
{"query": "Choose several files of any format from my device so I can share them.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "*/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-172"}
{"query": "I want to quickly select a video clip to send in a message.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "video/*"}}, "unique_idx": "ACTION_GET_CONTENT-173"}
{"query": "Open the file picker for PNG images so I can attach one.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "image/png"}}, "unique_idx": "ACTION_GET_CONTENT-174"}
{"query": "Allow me to attach more than one PDF file for sharing with my colleagues.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "application/pdf", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-175"}
{"query": "Show me the interface to pick an image from my gallery for a quick upload.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "image/*"}}, "unique_idx": "ACTION_GET_CONTENT-176"}
{"query": "I need an audio clip for my project; let me fetch one file.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "audio/*"}}, "unique_idx": "ACTION_GET_CONTENT-177"}
{"query": "Fetch multiple files regardless of the type available on my device.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "*/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-178"}
{"query": "Could you let me choose a single image file for an attachment?", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "image/*"}}, "unique_idx": "ACTION_GET_CONTENT-179", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Select a couple of audio recordings from my device, please.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "audio/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-180", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I need to pick one text document to attach to my email.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "text/plain"}}, "unique_idx": "ACTION_GET_CONTENT-181", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I want to find and attach a single PDF file. Could you open the file browser for PDFs?", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "application/pdf"}}, "unique_idx": "ACTION_GET_CONTENT-182", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Could you help me browse through all file types so I can pick something?", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "*/*"}}, "unique_idx": "ACTION_GET_CONTENT-183", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I would like to attach several images at once. Please open the selector for me.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "image/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-184", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I want to quickly grab one audio snippet for my project.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "audio/*"}}, "unique_idx": "ACTION_GET_CONTENT-185", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Please let me select multiple video clips from my gallery for a montage.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "video/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-186", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I need to choose a file of any kind for my assignment; open the file selector.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "*/*"}}, "unique_idx": "ACTION_GET_CONTENT-187", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Select a single image; I don't need multiple selections, just one picture.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "image/*"}}, "unique_idx": "ACTION_GET_CONTENT-188", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I would like to attach several document files to my email. Please open the file picker for plain text files.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "text/plain", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-189", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Fetch several PDF reports from my device for review.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "application/pdf", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-190", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Grab one video clip so I can forward it immediately.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "video/*"}}, "unique_idx": "ACTION_GET_CONTENT-191", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Can you let me choose a file regardless of its type from my device?", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "*/*"}}, "unique_idx": "ACTION_GET_CONTENT-192", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I need multiple audio files for a new playlist. Please open the media selector.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "audio/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-193", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Show me the file picker for any type; I want to select random files.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "*/*"}}, "unique_idx": "ACTION_GET_CONTENT-194", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I want to import one high-resolution image for editing purposes.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "image/*"}}, "unique_idx": "ACTION_GET_CONTENT-195", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Let me pick multiple text documents to review later.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "text/plain", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-196", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I have to attach a single audio file; please open the selection tool for me.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "audio/*"}}, "unique_idx": "ACTION_GET_CONTENT-197", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Can you open a selector for many videos? I need to choose more than one clip.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "video/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-198", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I need to quickly access any available file for reference.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "*/*"}}, "unique_idx": "ACTION_GET_CONTENT-199", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Select one PDF document for me to send out.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "application/pdf"}}, "unique_idx": "ACTION_GET_CONTENT-200", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Grant me access to a list of image files because I'd like to choose more than one.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "image/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-201", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Fetch multiple types of files so I can get an overview of what's on my device.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "*/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-202", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I require an audio recording; can you show me the file browser for audio files?", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "audio/*"}}, "unique_idx": "ACTION_GET_CONTENT-203", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Allow me to select a video for a quick viewing session.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "video/*"}}, "unique_idx": "ACTION_GET_CONTENT-204", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Bring up the file selection tool for text files so I can browse my manuscripts.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "text/plain"}}, "unique_idx": "ACTION_GET_CONTENT-205", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I need to browse for a picture to attach to my report; just one image is enough.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "image/*"}}, "unique_idx": "ACTION_GET_CONTENT-206", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I want to pick several files, regardless of format, for my current project.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "*/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-207", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Help me choose one manuscript file from my storage; I'm updating an article.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "text/plain"}}, "unique_idx": "ACTION_GET_CONTENT-208", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I want to attach a PDF file; please open the file selector for just one document.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "application/pdf"}}, "unique_idx": "ACTION_GET_CONTENT-209", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "May I select numerous video clips to put together a montage?", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "video/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-210", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Please allow me to pick a single audio snippet for a quick demo.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "audio/*"}}, "unique_idx": "ACTION_GET_CONTENT-211", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Let me grab an image file so I can include it in my report.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "image/*"}}, "unique_idx": "ACTION_GET_CONTENT-212", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Select and share various PDF documents for our meeting.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "application/pdf", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-213", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I would like to open the file selector to pick one file of any type quickly.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "*/*"}}, "unique_idx": "ACTION_GET_CONTENT-214", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Open a file browser for me so I can select a couple of images for my slideshow.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "image/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-215", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I need to pick one video from my gallery for a quick preview.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "video/*"}}, "unique_idx": "ACTION_GET_CONTENT-216", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Could you enable me to choose multiple text files? I'm updating my handwritten notes.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "text/plain", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-217", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Allow me to select one file of any type for a quick use-case.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "*/*"}}, "unique_idx": "ACTION_GET_CONTENT-218", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Please open the PDF file located at content://documents/report.pdf.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://documents/report.pdf"}}, "unique_idx": "ACTION_OPEN_CONTENT-219"}
{"query": "Show me the picture from content://gallery/pic01.jpg; it's a JPEG image.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://gallery/pic01.jpg", "mime_type": "image/jpeg"}}, "unique_idx": "ACTION_OPEN_CONTENT-220"}
{"query": "Can you display the video at content://videos/movie.mp4? It's an MP4 file.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://videos/movie.mp4", "mime_type": "video/mp4"}}, "unique_idx": "ACTION_OPEN_CONTENT-221"}
{"query": "I need to view the audio clip from content://music/song.mp3 for review.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://music/song.mp3", "mime_type": "audio/mpeg"}}, "unique_idx": "ACTION_OPEN_CONTENT-222"}
{"query": "Access the document at content://documents/resume.docx so I can review my resume.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://documents/resume.docx"}}, "unique_idx": "ACTION_OPEN_CONTENT-223"}
{"query": "Open the presentation file at content://presentations/sales.pptx.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://presentations/sales.pptx"}}, "unique_idx": "ACTION_OPEN_CONTENT-224"}
{"query": "I want to see the image from content://photos/vacation.png; please open it as it's clearly a PNG file.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://photos/vacation.png", "mime_type": "image/png"}}, "unique_idx": "ACTION_OPEN_CONTENT-225"}
{"query": "Show the infographic by navigating to content://infographics/overview.svg; it's a vector graphic in SVG format.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://infographics/overview.svg", "mime_type": "image/svg+xml"}}, "unique_idx": "ACTION_OPEN_CONTENT-226"}
{"query": "I'd like to open the plain text manual found at content://docs/manual.txt. Can you display it?", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://docs/manual.txt"}}, "unique_idx": "ACTION_OPEN_CONTENT-227"}
{"query": "Could you display this file from the link: content://shared/file.zip?", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://shared/file.zip"}}, "unique_idx": "ACTION_OPEN_CONTENT-228"}
{"query": "Let me view the high quality portrait image at URI content://gallery/highres.jpg; note it's a JPEG file.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://gallery/highres.jpg", "mime_type": "image/jpeg"}}, "unique_idx": "ACTION_OPEN_CONTENT-229"}
{"query": "I require opening the video file available at content://videos/sec_record.mov; it's in QuickTime format.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://videos/sec_record.mov", "mime_type": "video/quicktime"}}, "unique_idx": "ACTION_OPEN_CONTENT-230"}
{"query": "Display the ebook by opening content://ebooks/novel.epub.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://ebooks/novel.epub", "mime_type": "application/epub+zip"}}, "unique_idx": "ACTION_OPEN_CONTENT-231"}
{"query": "Please open content://slides/demo.key; it's my Keynote presentation.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://slides/demo.key"}}, "unique_idx": "ACTION_OPEN_CONTENT-232"}
{"query": "Show the content at URI content://music/live_record.wav; it's an audio file in WAV format.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://music/live_record.wav", "mime_type": "audio/wav"}}, "unique_idx": "ACTION_OPEN_CONTENT-233"}
{"query": "Please open the compressed package file stored at content://shared/archive.zip.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://shared/archive.zip"}}, "unique_idx": "ACTION_OPEN_CONTENT-234", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "I'd appreciate it if you could display the scientific paper located at content://research/paper.pdf.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://research/paper.pdf"}}, "unique_idx": "ACTION_OPEN_CONTENT-235", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Display the image at content://gallery/winter.jpg; it's clearly a JPEG image.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://gallery/winter.jpg", "mime_type": "image/jpeg"}}, "unique_idx": "ACTION_OPEN_CONTENT-236", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Can you open the new painting stored at content://images/modern.png? It’s in PNG format.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://images/modern.png", "mime_type": "image/png"}}, "unique_idx": "ACTION_OPEN_CONTENT-237", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "I want to listen to the MP3 audio available at content://music/track01.mp3; kindly open it.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://music/track01.mp3", "mime_type": "audio/mpeg"}}, "unique_idx": "ACTION_OPEN_CONTENT-238", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Open the documentary movie file available at content://videos/documentary.mp4. It's an MP4 file.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://videos/documentary.mp4", "mime_type": "video/mp4"}}, "unique_idx": "ACTION_OPEN_CONTENT-239", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Kindly show the high definition motion picture at content://movies/sci-fi.mkv; it's an MKV video.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://movies/sci-fi.mkv", "mime_type": "video/x-matroska"}}, "unique_idx": "ACTION_OPEN_CONTENT-240", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Please display the animated GIF available at content://screenshots/animation.gif.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://screenshots/animation.gif", "mime_type": "image/gif"}}, "unique_idx": "ACTION_OPEN_CONTENT-241", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Access the tutorial slide deck found at content://presentations/tutorial.pptx; I need to review it.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://presentations/tutorial.pptx", "mime_type": "application/vnd.openxmlformats-officedocument.presentationml.presentation"}}, "unique_idx": "ACTION_OPEN_CONTENT-242", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "I need to check out this eBook located at content://books/novel.epub; please open it.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://books/novel.epub", "mime_type": "application/epub+zip"}}, "unique_idx": "ACTION_OPEN_CONTENT-243", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Show me the legal contract stored as a text file at content://docs/contract.txt; I'd like to read it.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://docs/contract.txt"}}, "unique_idx": "ACTION_OPEN_CONTENT-244", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Could you open the spreadsheet at content://sheets/budget.xlsx? It's clearly an Excel file.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://sheets/budget.xlsx", "mime_type": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}}, "unique_idx": "ACTION_OPEN_CONTENT-245", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Please reveal the graffiti image at content://gallery/graffiti.jpeg; it appears to be in JPEG format.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://gallery/graffiti.jpeg", "mime_type": "image/jpeg"}}, "unique_idx": "ACTION_OPEN_CONTENT-246", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "I want to take a look at the musical file stored at content://audio/symphony.wav; it's in WAV format.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://audio/symphony.wav", "mime_type": "audio/wav"}}, "unique_idx": "ACTION_OPEN_CONTENT-247", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Open up the archived email from content://emails/meeting.eml; I'd like to review it.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://emails/meeting.eml", "mime_type": "message/rfc822"}}, "unique_idx": "ACTION_OPEN_CONTENT-248", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "I require the display of the animation at content://animations/intro.swf; it's a Shockwave Flash file.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://animations/intro.swf", "mime_type": "application/x-shockwave-flash"}}, "unique_idx": "ACTION_OPEN_CONTENT-249", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Please show me the photo at content://photographs/event.bmp; I believe it's a BMP image.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://photographs/event.bmp", "mime_type": "image/bmp"}}, "unique_idx": "ACTION_OPEN_CONTENT-250", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Display the ultrasound video from content://medical/ultrasound.mov; it is in QuickTime MOV format.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://medical/ultrasound.mov", "mime_type": "video/quicktime"}}, "unique_idx": "ACTION_OPEN_CONTENT-251", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Could you open the encryption key file located at content://security/keyfile.bin?", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://security/keyfile.bin"}}, "unique_idx": "ACTION_OPEN_CONTENT-252", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "I want to view a screenshot located at content://screenshots/desktop.png; it's clearly a PNG image.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://screenshots/desktop.png", "mime_type": "image/png"}}, "unique_idx": "ACTION_OPEN_CONTENT-253", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Can you pull up the audio lecture at content://lectures/audio.ogg? Please open it.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://lectures/audio.ogg", "mime_type": "audio/ogg"}}, "unique_idx": "ACTION_OPEN_CONTENT-254", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Display the high resolution wallpaper found at content://wallpapers/wallpaper.tiff; it's a TIFF image.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://wallpapers/wallpaper.tiff", "mime_type": "image/tiff"}}, "unique_idx": "ACTION_OPEN_CONTENT-255", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Please open the confidential file at content://files/confidential.docx; it's a DOCX file.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://files/confidential.docx", "mime_type": "application/vnd.openxmlformats-officedocument.wordprocessingml.document"}}, "unique_idx": "ACTION_OPEN_CONTENT-256", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Could you show me the print-ready poster at content://design/poster.psd? I need the PSD file.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://design/poster.psd", "mime_type": "image/vnd.adobe.photoshop"}}, "unique_idx": "ACTION_OPEN_CONTENT-257", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "I would like to access the README file at content://codes/readme.md; please open it for me.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://codes/readme.md", "mime_type": "text/markdown"}}, "unique_idx": "ACTION_OPEN_CONTENT-258", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Show the vector graphic at content://graphics/logo.svg; it's an SVG image.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://graphics/logo.svg", "mime_type": "image/svg+xml"}}, "unique_idx": "ACTION_OPEN_CONTENT-259", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Please open the text file located at content://notes/todo.txt; thanks.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://notes/todo.txt"}}, "unique_idx": "ACTION_OPEN_CONTENT-260", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "I'd like to view the scan of the old map at content://archives/map.jpg; it appears to be a JPEG image.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://archives/map.jpg", "mime_type": "image/jpeg"}}, "unique_idx": "ACTION_OPEN_CONTENT-261", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Kindly open the binary file at content://binaries/setup.exe; I want to inspect it.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://binaries/setup.exe"}}, "unique_idx": "ACTION_OPEN_CONTENT-262", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "I need to see the recorded lecture video at content://lectures/physics.mp4; it's in MP4 format.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://lectures/physics.mp4", "mime_type": "video/mp4"}}, "unique_idx": "ACTION_OPEN_CONTENT-263", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Access the book cover image at content://books/cover.png; please open it for me.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://books/cover.png", "mime_type": "image/png"}}, "unique_idx": "ACTION_OPEN_CONTENT-264", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Please show me the architectural blueprint from content://blueprints/house.dwg.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://blueprints/house.dwg"}}, "unique_idx": "ACTION_OPEN_CONTENT-265", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Open the ZIP file stored at content://downloads/files.zip; I want to examine its contents.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://downloads/files.zip"}}, "unique_idx": "ACTION_OPEN_CONTENT-266", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Could you display the documentary video at content://media/doc.mov? It's in MOV format.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://media/doc.mov", "mime_type": "video/quicktime"}}, "unique_idx": "ACTION_OPEN_CONTENT-267", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "I would love to view the digital artwork at content://artwork/digital.gif; it's a GIF file.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://artwork/digital.gif", "mime_type": "image/gif"}}, "unique_idx": "ACTION_OPEN_CONTENT-268", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Cast an eye on the scanned receipt at content://receipts/receipt.pdf; it's a PDF document.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://receipts/receipt.pdf"}}, "unique_idx": "ACTION_OPEN_CONTENT-269", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "I'd appreciate having the audio file available at content://audio/announcement.aac; please open it.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://audio/announcement.aac", "mime_type": "audio/mp4"}}, "unique_idx": "ACTION_OPEN_CONTENT-270", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Show me the raw image file from content://raw/IMG_001.CR2; it's in the Canon RAW format.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://raw/IMG_001.CR2", "mime_type": "image/x-canon-cr2"}}, "unique_idx": "ACTION_OPEN_CONTENT-271", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "I want to check out the scanned historical letter at content://history/letter.tif; please display it.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://history/letter.tif", "mime_type": "image/tiff"}}, "unique_idx": "ACTION_OPEN_CONTENT-272", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Display the audiobook available at content://audiobooks/story.m4b; it's in M4B format.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://audiobooks/story.m4b", "mime_type": "audio/mp4"}}, "unique_idx": "ACTION_OPEN_CONTENT-273", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "I want to choose a ringtone for my alarm; can you let me pick one from my device?", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-274"}
{"query": "Please open the ringtone picker so I can select the perfect tone for my morning wake-up.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-275"}
{"query": "Can you enable the ringtone selection tool? I need to set a new alarm sound.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-276"}
{"query": "I have to update my phone's alarm sound. Let me choose a ringtone from the available options.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-277"}
{"query": "Help me pick a ringtone for my alarm feature. I want a new sound for my notifications.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-278"}
{"query": "Could you let me select a ringtone from my device to use as my alarm tone?", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-279"}
{"query": "I would like to change my alarm ringtone. Please trigger the ringtone picker for me.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-280"}
{"query": "Please allow me to choose a ringtone from my phone so I can update my alarm sound.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-281"}
{"query": "Open the ringtone selection tool so I can find a new tone for my alarm clock.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-282"}
{"query": "I need a refresher for my alarm sound. Let me choose a ringtone to set a new tone on my device.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-283"}
{"query": "Activate the ringtone picker function. I want to select a custom tone for my alarm.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-284"}
{"query": "I'm looking to personalize my alarm; please let me pick a ringtone from my options.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-285"}
{"query": "How do I set a new alarm tone? I want to choose a ringtone from my phone's collection.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-286"}
{"query": "I want to update my alarm settings with a new ring sound. Could you open the ringtone selection tool?", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-287"}
{"query": "Start the ringtone picker so I can choose a unique sound for my morning alarm.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-288"}
{"query": "I need a fresh ringtone for my morning alarm. Please open the ringtone chooser.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-289", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Open the ringtone selection menu so I can choose an alarm tone.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-290", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "I want to personalize my alarm clock with a different ringtone. Start the ringtone picker, please.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-291", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Help me choose a new sound for my alarm by launching the ringtone selection tool.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-292", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Let's update my alarm sound—can you activate the ringtone chooser for me?", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-293", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "I would like to choose a ringtone for my alarm. Could you open the ringtone picker?", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-294", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Set up a ringtone selection tool for my new alarm sound.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-295", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "I need to pick a new alarm sound from my ringtone collection. Can you help me open the selection?", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-296", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Allow me to select a ringtone for my alarm by opening the ringtone interface.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-297", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "I desire an updated tone for my alarm; please load the ringtone selection module.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-298", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Can you prompt the ringtone picker so I can set a new alarm tone?", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-299", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Activate the ringtone choosing tool; I want a different sound for my alarm.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-300", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "I want to pick a ringtone for my alarm. Please launch the ringtone selection tool.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-301", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Could you launch my phone’s ringtone picker? I need a new alarm sound.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-302", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "I require a new ringtone for my alarm. Please open the tone selection interface.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-303", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Let me choose a new alarm bell from my ringtones. Initiate the ringtone selection, please.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-304", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "I'd appreciate it if you opened the ringtone chooser so I can set up a new alarm tone.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-305", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "I want a fresh alarm sound; please help me by opening the ringtone picker.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-306", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Please enable the ringtone selection menu for my alarm configuration.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-307", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Help me update my alarm sound by letting me pick a ringtone from my available options.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-308", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "I want to change my alarm's tone. Can you start the ringtone picker for me?", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-309", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Can you launch the ringtone selection interface? I need to update my alarm sound.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-310", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "I would like to set a new tone for my alarm, so please bring up the ringtone selector.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-311", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "I need a different alert sound for my morning alarm. Get the ringtone picker ready.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-312", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Please launch the ringtone selection tool; I need to change my alarm sound.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-313", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "I’m planning a new alarm sound, so let me select a ringtone from my phone.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-314", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "I wish to choose a new sound for my alarm; can you display the ringtone picker for me?", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-315", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Could you initiate the ringtone selection process? I need a fresh alarm tone.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-316", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Open my ringtone interface so I can settle on a new sound for my alarm.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-317", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Let me set up a personalized alarm sound. Activate the ringtone selection tool, please.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-318", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "I want to assign a new ringtone to my alarm clock; help me pick one from my device.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-319", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Alarm sound update required: please provide the ringtone selection option.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-320", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Please pull up the ringtone picker so I can assign a new sound for my alarm.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-321", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "I plan to change my alarm tone. Launch the ringtone selection menu for me.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-322", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Get the ringtone chooser ready; I want to set my alarm with a unique sound.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-323", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Take a picture with the default camera option.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-324"}
{"query": "I would like you to capture an image using the camera, and let the device decide where to save it.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-325"}
{"query": "Please snap a photo and save it to content://myfolder/photo1.jpg.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://myfolder/photo1.jpg"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-326"}
{"query": "Open the camera to take a selfie, no file destination specified.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-327"}
{"query": "Please capture a picture and store it at content://myapp/images/portrait.jpg.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://myapp/images/portrait.jpg"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-328"}
{"query": "I need to click an image right now; let the system choose the saving location.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-329"}
{"query": "Snap an image for me. I have no preference for the filename.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-330"}
{"query": "Launch the camera and capture an image, saving it to content://storage/emulated/0/DCIM/Camera/newpic.jpg, please.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://storage/emulated/0/DCIM/Camera/newpic.jpg"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-331"}
{"query": "Capture a photo and store it at custom location: content://custom/path/picture.jpg for later access.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://custom/path/picture.jpg"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-332"}
{"query": "Take a shot with my camera; there's no need to specify a save location.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-333"}
{"query": "I want to use the phone's camera to record a picture immediately without a specified file location.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-334"}
{"query": "Execute the camera capture action and, if possible, save at content://another/app/temp.jpg.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://another/app/temp.jpg"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-335"}
{"query": "Could you please take a photograph? I'm not particular about where it's stored.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-336"}
{"query": "Take a snapshot using my camera app and use the following path: content://user/specified/location for storage.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://user/specified/location"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-337"}
{"query": "Quick capture with the camera; let the system automatically determine the storage location.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-338"}
{"query": "Can you click an image with my camera? I want it saved at content://photos/holiday/img1.jpg.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://photos/holiday/img1.jpg"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-339", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Please capture a snapshot using the camera and let the app decide where to store it.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-340", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "I'd like to take a quick picture; no need to specify a save path, let the system handle it.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-341", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Could you capture an image and save it to content://user_gallery/img_final.jpg?", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://user_gallery/img_final.jpg"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-342", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Launch the camera and take a photo, storing it at content://storage/albums/photo2023.jpg.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://storage/albums/photo2023.jpg"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-343", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "I need an image captured via the camera; let it decide the directory automatically.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-344", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Take a picture for me and save it at content://myfiles/snap_01.jpg.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://myfiles/snap_01.jpg"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-345", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Could you please use the camera app to capture a photo without specifying a file path?", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-346", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Snap a shot now; store it at content://captures/temp.jpg if possible.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://captures/temp.jpg"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-347", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "I want you to take a photo with my camera, and you can let the OS decide where it goes.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-348", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Open the camera and capture an image; save it in the location: content://img_storage/captured.jpg.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://img_storage/captured.jpg"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-349", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Please use the camera to take an early morning photo without a fixed storage path.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-350", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Record an image now, and if needed, save it under content://media/photo_123.jpg.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://media/photo_123.jpg"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-351", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Initiate a camera capture action and save the output at content://pictures/outdoor.jpg.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://pictures/outdoor.jpg"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-352", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "I need a photograph; please use the system's default path to store the image.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-353", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Could you snap a picture, and if possible, use content://album/session_pic.png as the save location?", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://album/session_pic.png"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-354", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Kindly capture an image from the camera; I don’t mind where it's stored.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-355", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Please trigger the camera to snap a photo and deposit it in content://backup/photos/img_backup.jpg.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://backup/photos/img_backup.jpg"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-356", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "I wish to capture a photo using the phone's camera with no predefined storage path.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-357", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Execute a camera picture capture and route the file to content://data/images/camshot.jpg.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://data/images/camshot.jpg"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-358", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Snap a quick picture using my device's camera and let the location be set by the app automatically.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-359", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "I would be grateful if you could capture a photo and store it at content://server/uploads/img.jpg.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://server/uploads/img.jpg"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-360", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Please take a picture for me with the camera and let the system determine the storage address.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-361", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "I need to get a photograph snapped. Could you have it saved at content://device/photos/shot.png?", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://device/photos/shot.png"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-362", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Kindly take a snap using the phone's camera, and there's no need to specify a file path.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-363", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Trigger the camera capture and set the saving destination to content://local/img/click.jpg.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://local/img/click.jpg"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-364", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Could you quickly take a photo and let the operating system choose where to save it?", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-365", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "I require a snapshot using the camera; record the image to content://archive/snap_2023.png.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://archive/snap_2023.png"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-366", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Fetch an image by activating the camera app, and please use content://cloud/images/newpic.jpg for saving.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://cloud/images/newpic.jpg"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-367", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Using the camera, snap an image—I'm indifferent where it's stored.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-368", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Take a photograph instantly while ensuring that the image is stored at content://session/img_01.jpeg.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://session/img_01.jpeg"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-369", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Please operate the camera function to take an image, storing it automatically without a user-specified path.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-370", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "I want to capture a high-quality image; store it in content://hd/images/highres.jpg if you can.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://hd/images/highres.jpg"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-371", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Snap a photo using my camera and automatically store it—no specific file path required.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-372", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Can you grab an image using the camera and save it at content://user_photos/instant_capture.png?", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://user_photos/instant_capture.png"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-373", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "I need an on-demand photo taken with my phone's camera. Please let the app decide the save location.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-374", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Would you mind capturing an image and depositing the file at content://downloads/images/pic.jpg?", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://downloads/images/pic.jpg"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-375", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "I'd like to have a picture taken. Activate the camera and let it save the file wherever it prefers.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-376", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Please execute a camera image capture and use content://secure/storage/image.jpg as the destination.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://secure/storage/image.jpg"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-377", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Quickly capture an image with the phone's camera; there's no need to specify a location for storage.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-378", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Kindly initiate a camera snap and save the resulting image to content://export/photos/out.jpg.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://export/photos/out.jpg"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-379", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Please take an immediate photo using the device's camera without a predetermined storage URI.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-380", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Activate the camera to take a picture and ensure it is saved at content://data/camera/snap.jpg.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://data/camera/snap.jpg"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-381", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Please add a new contact for John Doe with phone number 123-456-7890.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "John Doe", "phone": "123-456-7890"}}}, "unique_idx": "ACTION_INSERT_CONTACT-382"}
{"query": "I need to insert a contact for Jane Smith. Her mobile is 098-765-4321 and her email is jane@example.com.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Jane Smith", "phone": "098-765-4321", "email": "jane@example.com"}}}, "unique_idx": "ACTION_INSERT_CONTACT-383"}
{"query": "Could you create a new contact entry for Michael? His number is 555-555-5555 and he lives at 123 Main St.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Michael", "phone": "555-555-5555", "address": "123 Main St"}}}, "unique_idx": "ACTION_INSERT_CONTACT-384"}
{"query": "Add a record to my contacts: Name: Alice, Email: alice@wonderland.com, Address: 42 Fantasy Rd.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Alice", "email": "alice@wonderland.com", "address": "42 Fantasy Rd"}}}, "unique_idx": "ACTION_INSERT_CONTACT-385"}
{"query": "Insert a contact with these details: Name: Bob K., Phone: 111-222-3333, Email: bob@examplemail.com.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Bob K.", "phone": "111-222-3333", "email": "bob@examplemail.com"}}}, "unique_idx": "ACTION_INSERT_CONTACT-386"}
{"query": "Create a new contact for Lisa with email address lisa@hotmail.com.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Lisa", "email": "lisa@hotmail.com"}}}, "unique_idx": "ACTION_INSERT_CONTACT-387"}
{"query": "I need to store Emma Watson's contact. Her phone number is 222-333-4444.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Emma Watson", "phone": "222-333-4444"}}}, "unique_idx": "ACTION_INSERT_CONTACT-388"}
{"query": "Set up a new contact entry: Name is David and his address is 789 Oak Street.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "David", "address": "789 Oak Street"}}}, "unique_idx": "ACTION_INSERT_CONTACT-389"}
{"query": "Could you add a new contact for Sophie Turner with email sophiet@example.com and phone 666-777-8888?", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Sophie Turner", "email": "sophiet@example.com", "phone": "666-777-8888"}}}, "unique_idx": "ACTION_INSERT_CONTACT-390"}
{"query": "Please register a contact for Carlos with the following details: Phone number 999-100-200 and address 10 Downing St.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Carlos", "phone": "999-100-200", "address": "10 Downing St"}}}, "unique_idx": "ACTION_INSERT_CONTACT-391"}
{"query": "Commit a new contact record for Kevin Brown; his email is kevin.brown@mail.com.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Kevin Brown", "email": "kevin.brown@mail.com"}}}, "unique_idx": "ACTION_INSERT_CONTACT-392"}
{"query": "Could you add a contact for Sarah? Her email address is sarah.connor@tech.com and her phone is 777-888-9999.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Sarah", "email": "sarah.connor@tech.com", "phone": "777-888-9999"}}}, "unique_idx": "ACTION_INSERT_CONTACT-393"}
{"query": "Insert a new contact for Gregory House with his email greg.house@hospital.org.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Gregory House", "email": "greg.house@hospital.org"}}}, "unique_idx": "ACTION_INSERT_CONTACT-394"}
{"query": "Register a new contact with the name Elizabeth and address \"1600 Pennsylvania Ave\".", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Elizabeth", "address": "1600 Pennsylvania Ave"}}}, "unique_idx": "ACTION_INSERT_CONTACT-395"}
{"query": "Add a new contact for my colleague Mark, reachable at phone number 321-654-0987.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Mark", "phone": "321-654-0987"}}}, "unique_idx": "ACTION_INSERT_CONTACT-396"}
{"query": "Please add a new contact for Robert with the email address robert@gmail.com.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Robert", "email": "robert@gmail.com"}}}, "unique_idx": "ACTION_INSERT_CONTACT-397", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Register a contact for Emily. Her phone number is 555-1234.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Emily", "phone": "555-1234"}}}, "unique_idx": "ACTION_INSERT_CONTACT-398", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Can you add a contact for David with phone number 987-654-3210 and residing at 45 Maple Street?", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "David", "phone": "987-654-3210", "address": "45 Maple Street"}}}, "unique_idx": "ACTION_INSERT_CONTACT-399", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Insert a new entry for Olivia with her address noted as '56 Park Ave'.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Olivia", "address": "56 Park Ave"}}}, "unique_idx": "ACTION_INSERT_CONTACT-400", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Create a contact entry for William, including his phone 777-888-9999 and email william@mail.com.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "William", "phone": "777-888-9999", "email": "william@mail.com"}}}, "unique_idx": "ACTION_INSERT_CONTACT-401", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "I need to save a new contact for Ava, just the name is sufficient.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Ava"}}}, "unique_idx": "ACTION_INSERT_CONTACT-402", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Could you create a new contact named James with phone number 111-222-3333?", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "James", "phone": "111-222-3333"}}}, "unique_idx": "ACTION_INSERT_CONTACT-403", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Please add a contact for Sophia, including her email as sophia@example.com and phone number 222-333-4444.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Sophia", "email": "sophia@example.com", "phone": "222-333-4444"}}}, "unique_idx": "ACTION_INSERT_CONTACT-404", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Set up a new contact for Benjamin. His phone is 333-444-5555 and he lives at 789 Central Blvd.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Benjamin", "phone": "333-444-5555", "address": "789 Central Blvd"}}}, "unique_idx": "ACTION_INSERT_CONTACT-405", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Insert contact for Mia with her email address mia_lover@mail.com.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Mia", "email": "mia_lover@mail.com"}}}, "unique_idx": "ACTION_INSERT_CONTACT-406", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Add a new record for Elijah where his mobile number is 666-777-8888.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Elijah", "phone": "666-777-8888"}}}, "unique_idx": "ACTION_INSERT_CONTACT-407", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Create a contact entry for Charlotte; her details include phone 444-555-6666 and address '89 River Road'.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Charlotte", "phone": "444-555-6666", "address": "89 River Road"}}}, "unique_idx": "ACTION_INSERT_CONTACT-408", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Register Peter as a new contact. His email address is peter.rings@example.net.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Peter", "email": "peter.rings@example.net"}}}, "unique_idx": "ACTION_INSERT_CONTACT-409", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Insert a contact for Harper with phone number 123-321-4567 and address '101 City Center'.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Harper", "phone": "123-321-4567", "address": "101 City Center"}}}, "unique_idx": "ACTION_INSERT_CONTACT-410", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Please create a contact for Daniel; his phone is 888-999-0000.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Daniel", "phone": "888-999-0000"}}}, "unique_idx": "ACTION_INSERT_CONTACT-411", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Add a new contact for Amelia with email amelia@domain.com and address '202 West St'.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Amelia", "email": "amelia@domain.com", "address": "202 West St"}}}, "unique_idx": "ACTION_INSERT_CONTACT-412", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Record a new contact for Michael. His contact info includes phone number 444-888-0000.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Michael", "phone": "444-888-0000"}}}, "unique_idx": "ACTION_INSERT_CONTACT-413", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Could you please add a contact named Abigail? Her number is 555-666-7777 and email is abigail@mail.net.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Abigail", "phone": "555-666-7777", "email": "abigail@mail.net"}}}, "unique_idx": "ACTION_INSERT_CONTACT-414", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "I want to add a fresh contact for Henry with the address '12 Oak Drive'.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Henry", "address": "12 Oak Drive"}}}, "unique_idx": "ACTION_INSERT_CONTACT-415", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Create a new contact for Evelyn; her phone is 999-888-7777 and her email is evelyn@example.org.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Evelyn", "phone": "999-888-7777", "email": "evelyn@example.org"}}}, "unique_idx": "ACTION_INSERT_CONTACT-416", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Insert a contact for Jackson with phone number 444-555-9999 and address '321 East Way'.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Jackson", "phone": "444-555-9999", "address": "321 East Way"}}}, "unique_idx": "ACTION_INSERT_CONTACT-417", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Register contact for Scarlett. Her email is scarlett@red.com.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Scarlett", "email": "scarlett@red.com"}}}, "unique_idx": "ACTION_INSERT_CONTACT-418", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Add a contact for Lucas whose details include phone number 666-1010-1212, email lucas@example.com, and address along Oxford Street.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Lucas", "phone": "666-1010-1212", "email": "lucas@example.com", "address": "Oxford Street"}}}, "unique_idx": "ACTION_INSERT_CONTACT-419", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Insert a record for Logan. Please include his phone number 321-432-5432.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Logan", "phone": "321-432-5432"}}}, "unique_idx": "ACTION_INSERT_CONTACT-420", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Register a new contact for Lillian with email lilly@mail.com and phone number 222-111-3333.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Lillian", "email": "lilly@mail.com", "phone": "222-111-3333"}}}, "unique_idx": "ACTION_INSERT_CONTACT-421", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Please create a contact record for Sebastian, his email is seb@workmail.com.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Sebastian", "email": "seb@workmail.com"}}}, "unique_idx": "ACTION_INSERT_CONTACT-422", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Could you add a new contact called Ella? Her phone number is 555-000-1111 and she resides at '99 Summer Road'.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Ella", "phone": "555-000-1111", "address": "99 Summer Road"}}}, "unique_idx": "ACTION_INSERT_CONTACT-423", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "I need to add a new contact entry for Aiden with his phone number as 888-777-6666.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Aiden", "phone": "888-777-6666"}}}, "unique_idx": "ACTION_INSERT_CONTACT-424", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Insert an entry for Zoe with her email zoe.today@mail.net and address '4 Green Lane'.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Zoe", "email": "zoe.today@mail.net", "address": "4 Green Lane"}}}, "unique_idx": "ACTION_INSERT_CONTACT-425", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Add a contact for Samuel with his number 777-555-4444.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Samuel", "phone": "777-555-4444"}}}, "unique_idx": "ACTION_INSERT_CONTACT-426", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Please create a new contact entry for Victoria including her phone 101-202-3030 and email victoria_online@mail.com.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Victoria", "phone": "101-202-3030", "email": "victoria_online@mail.com"}}}, "unique_idx": "ACTION_INSERT_CONTACT-427", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Record a new contact for Jackson whose phone number is 909-808-7070.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Jackson", "phone": "909-808-7070"}}}, "unique_idx": "ACTION_INSERT_CONTACT-428", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "I'm trying to add contact info for Riley; please note his email as riley@mail.org.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Riley", "email": "riley@mail.org"}}}, "unique_idx": "ACTION_INSERT_CONTACT-429", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Insert a new contact for Madison with phone number 111-999-8888 and address '2020 Corner Street'.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Madison", "phone": "111-999-8888", "address": "2020 Corner Street"}}}, "unique_idx": "ACTION_INSERT_CONTACT-430", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Set up a contact for Leo with his email leo@gmail.com.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Leo", "email": "leo@gmail.com"}}}, "unique_idx": "ACTION_INSERT_CONTACT-431", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Register a new contact for Aria with phone 333-222-1111 and address '12 First Avenue'.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Aria", "phone": "333-222-1111", "address": "12 First Avenue"}}}, "unique_idx": "ACTION_INSERT_CONTACT-432", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Could you add a contact for Connor? His email is connor99@mail.com and his number is 555-222-3333.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Connor", "email": "connor99@mail.com", "phone": "555-222-3333"}}}, "unique_idx": "ACTION_INSERT_CONTACT-433", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Insert a new contact for Lily with phone 456-789-0123 and email lily@flower.com.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Lily", "phone": "456-789-0123", "email": "lily@flower.com"}}}, "unique_idx": "ACTION_INSERT_CONTACT-434", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Please register a contact for Jack; his phone number is 666-444-3333.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Jack", "phone": "666-444-3333"}}}, "unique_idx": "ACTION_INSERT_CONTACT-435", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Add a meeting with Bob to discuss project updates in the Conference Room A from 1700000000000 to 1700003600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Meeting with Bob", "DESCRIPTION": "Discuss project updates", "EVENT_LOCATION": "Conference Room A", "BEGIN_TIME": 1700000000000, "END_TIME": 1700003600000}}, "unique_idx": "ACTION_INSERT_EVENT-436"}
{"query": "I need to schedule a dentist appointment for a dental cleaning; it starts at 1700100000000 and ends at 1700101800000. No specific location was provided.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Dentist Appointment", "DESCRIPTION": "Dental cleaning", "BEGIN_TIME": 1700100000000, "END_TIME": 1700101800000}}, "unique_idx": "ACTION_INSERT_EVENT-437"}
{"query": "Please add an event called 'Lunch with Sarah': a lunch meeting to catch up with her at Cafe Nero, starting at 1700200000000 and ending at 1700203600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Lunch with Sarah", "DESCRIPTION": "Lunch meeting to catch up", "EVENT_LOCATION": "Cafe Nero", "BEGIN_TIME": 1700200000000, "END_TIME": 1700203600000}}, "unique_idx": "ACTION_INSERT_EVENT-438"}
{"query": "Create a calendar entry for a 'Yoga Class'. The event is described as an evening yoga session for relaxation. It begins at 1700300000000 and ends at 1700304500000. No location provided.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Yoga Class", "DESCRIPTION": "Evening yoga session for relaxation", "BEGIN_TIME": 1700300000000, "END_TIME": 1700304500000}}, "unique_idx": "ACTION_INSERT_EVENT-439"}
{"query": "Set up an event titled 'Project Deadline' with the description 'Final submission of the project report'. The meeting is at the office, starting at 1700400000000 and concluding at 1700407200000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Project Deadline", "DESCRIPTION": "Final submission of the project report", "EVENT_LOCATION": "office", "BEGIN_TIME": 1700400000000, "END_TIME": 1700407200000}}, "unique_idx": "ACTION_INSERT_EVENT-440"}
{"query": "I want to insert an event 'Book Club Meeting' where we'll discuss this month's selection at the local library. It should begin at 1700500000000 and end at 1700505400000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Book Club Meeting", "DESCRIPTION": "Discussion on the month's book selection", "EVENT_LOCATION": "local library", "BEGIN_TIME": 1700500000000, "END_TIME": 1700505400000}}, "unique_idx": "ACTION_INSERT_EVENT-441"}
{"query": "Please schedule an event named 'Gym Session' for a morning workout. It starts at 1700600000000 and finishes at 1700601800000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Gym Session", "DESCRIPTION": "Morning workout", "BEGIN_TIME": 1700600000000, "END_TIME": 1700601800000}}, "unique_idx": "ACTION_INSERT_EVENT-442"}
{"query": "Add an event to my calendar: 'Interview with Jane' for the marketing position. Details include a job interview scheduled to take place on Zoom (Online) starting at 1700700000000 and ending at 1700703600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Interview with Jane", "DESCRIPTION": "Job interview for the marketing position", "EVENT_LOCATION": "Zoom (Online)", "BEGIN_TIME": 1700700000000, "END_TIME": 1700703600000}}, "unique_idx": "ACTION_INSERT_EVENT-443"}
{"query": "Insert a 'Birthday Party' event—a full-day celebration for a friend. It should start at 1700800000000 and wrap up at 1700820000000, held at home.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Birthday Party", "DESCRIPTION": "Full-day celebration for a friend", "EVENT_LOCATION": "home", "BEGIN_TIME": 1700800000000, "END_TIME": 1700820000000}}, "unique_idx": "ACTION_INSERT_EVENT-444"}
{"query": "Create an event for a 'Webinar on AI' where the focus is on machine learning trends. It should begin at 1700900000000 and end at 1700907200000. No specific venue mentioned.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Webinar on AI", "DESCRIPTION": "Learning about machine learning trends", "BEGIN_TIME": 1700900000000, "END_TIME": 1700907200000}}, "unique_idx": "ACTION_INSERT_EVENT-445"}
{"query": "Add a calendar event titled 'Client Call' to discuss contract details with a client. The call is scheduled on Microsoft Teams, starting at 1701000000000 and ending at 1701001800000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Client Call", "DESCRIPTION": "Discuss contract details with client", "EVENT_LOCATION": "Microsoft Teams", "BEGIN_TIME": 1701000000000, "END_TIME": 1701001800000}}, "unique_idx": "ACTION_INSERT_EVENT-446"}
{"query": "I want to add a session titled 'Cooking Class' that covers learning Italian cuisine, held at Culinary School. The event begins at 1701100000000 and ends at 1701105400000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Cooking Class", "DESCRIPTION": "Learn to cook Italian cuisine", "EVENT_LOCATION": "Culinary School", "BEGIN_TIME": 1701100000000, "END_TIME": 1701105400000}}, "unique_idx": "ACTION_INSERT_EVENT-447"}
{"query": "Plan a 'Networking Event' where professionals from the industry can meet. It starts at 1701200000000 and ends at 1701207200000, but no specific location is mentioned.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Networking Event", "DESCRIPTION": "A chance to meet industry professionals", "BEGIN_TIME": 1701200000000, "END_TIME": 1701207200000}}, "unique_idx": "ACTION_INSERT_EVENT-448"}
{"query": "Schedule 'Movie Night' with friends to watch the latest blockbuster at a private theater. The event begins at 1701300000000 and ends at 1701310000000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Movie Night", "DESCRIPTION": "Watching the latest blockbuster with friends", "EVENT_LOCATION": "private theater", "BEGIN_TIME": 1701300000000, "END_TIME": 1701310000000}}, "unique_idx": "ACTION_INSERT_EVENT-449"}
{"query": "Please insert the event 'Gardening Workshop', which is a hands-on session on sustainable gardening practices. It will take place at Community Garden, starting at 1701400000000 and ending at 1701405400000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Gardening Workshop", "DESCRIPTION": "Hands-on session on sustainable gardening practices", "EVENT_LOCATION": "Community Garden", "BEGIN_TIME": 1701400000000, "END_TIME": 1701405400000}}, "unique_idx": "ACTION_INSERT_EVENT-450"}
{"query": "Please create a 'Morning Briefing' event for a team update meeting at the main office. It starts at 1701500000000 and ends at 1701501800000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Morning Briefing", "DESCRIPTION": "Team update meeting", "EVENT_LOCATION": "main office", "BEGIN_TIME": 1701500000000, "END_TIME": 1701501800000}}, "unique_idx": "ACTION_INSERT_EVENT-451", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Schedule a 'Weekly Sync' meeting on Zoom to discuss project progress. It should kick off at 1701600000000 and wrap up at 1701603600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Weekly Sync", "DESCRIPTION": "Meeting to discuss project progress", "EVENT_LOCATION": "Zoom", "BEGIN_TIME": 1701600000000, "END_TIME": 1701603600000}}, "unique_idx": "ACTION_INSERT_EVENT-452", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Add an event for a 'Yoga Session' focused on relaxation and flexibility. It begins at 1701700000000 and ends at 1701701800000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Yoga Session", "DESCRIPTION": "Session focused on relaxation and flexibility", "BEGIN_TIME": 1701700000000, "END_TIME": 1701701800000}}, "unique_idx": "ACTION_INSERT_EVENT-453", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "I need to insert a 'Board Meeting' event with the purpose of discussing quarterly reports. It'll be held at the Conference Room B and run from 1701800000000 until 1701807200000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Board Meeting", "DESCRIPTION": "Discuss quarterly reports", "EVENT_LOCATION": "Conference Room B", "BEGIN_TIME": 1701800000000, "END_TIME": 1701807200000}}, "unique_idx": "ACTION_INSERT_EVENT-454", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Could you add my 'Doctor Appointment' scheduled at the City Clinic? Appointment starts at 1701900000000 and ends at 1701903600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Doctor Appointment", "DESCRIPTION": "Medical consultation at City Clinic", "EVENT_LOCATION": "City Clinic", "BEGIN_TIME": 1701900000000, "END_TIME": 1701903600000}}, "unique_idx": "ACTION_INSERT_EVENT-455", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Please add an event for a 'Dinner Party' at Bella Restaurant. It starts at 1702000000000 and concludes at 1702005400000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Dinner Party", "DESCRIPTION": "Dinner gathering at Bella Restaurant", "EVENT_LOCATION": "Bella Restaurant", "BEGIN_TIME": 1702000000000, "END_TIME": 1702005400000}}, "unique_idx": "ACTION_INSERT_EVENT-456", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Schedule a 'Workshop: Python Programming' event at Tech Hub. It is set to begin at 1702100000000 and finish at 1702107200000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Workshop: Python Programming", "DESCRIPTION": "Workshop event at Tech Hub", "EVENT_LOCATION": "Tech Hub", "BEGIN_TIME": 1702100000000, "END_TIME": 1702107200000}}, "unique_idx": "ACTION_INSERT_EVENT-457", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Insert a 'Parent-Teacher Conference' event at the school for discussing student progress. The meeting starts at 1702200000000 and ends at 1702203600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Parent-Teacher Conference", "DESCRIPTION": "Discussing student progress", "EVENT_LOCATION": "school", "BEGIN_TIME": 1702200000000, "END_TIME": 1702203600000}}, "unique_idx": "ACTION_INSERT_EVENT-458", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "I want to add a 'Client Presentation' meeting at the office. It begins at 1702300000000 and ends at 1702303600000, where we’ll present the new proposal.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Client Presentation", "DESCRIPTION": "Presenting the new proposal", "EVENT_LOCATION": "office", "BEGIN_TIME": 1702300000000, "END_TIME": 1702303600000}}, "unique_idx": "ACTION_INSERT_EVENT-459", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Create an event titled 'Afternoon Coffee Meetup'. No specified location but the meet starts at 1702400000000 and ends at 1702401800000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Afternoon Coffee Meetup", "DESCRIPTION": "Casual meetup for coffee", "BEGIN_TIME": 1702400000000, "END_TIME": 1702401800000}}, "unique_idx": "ACTION_INSERT_EVENT-460", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Please schedule a 'Gaming Night' at home for an evening of fun. Start time is 1702500000000 and it wraps up at 1702503600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Gaming Night", "DESCRIPTION": "Evening of fun gaming at home", "EVENT_LOCATION": "home", "BEGIN_TIME": 1702500000000, "END_TIME": 1702503600000}}, "unique_idx": "ACTION_INSERT_EVENT-461", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Set up a 'Networking Event' at the Convention Center. The event is from 1702600000000 till 1702607200000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Networking Event", "DESCRIPTION": "Networking event at Convention Center", "EVENT_LOCATION": "Convention Center", "BEGIN_TIME": 1702600000000, "END_TIME": 1702607200000}}, "unique_idx": "ACTION_INSERT_EVENT-462", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "I'd like to book an 'Interview Round 2' at Google HQ. It starts at 1702700000000 and ends at 1702703600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Interview Round 2", "DESCRIPTION": "Second round job interview", "EVENT_LOCATION": "Google HQ", "BEGIN_TIME": 1702700000000, "END_TIME": 1702703600000}}, "unique_idx": "ACTION_INSERT_EVENT-463", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Please arrange a 'Stand-up Meeting' for our daily scrum in the Scrum Room. It starts at 1702800000000 and ends at 1702801800000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Stand-up Meeting", "DESCRIPTION": "Daily scrum meeting", "EVENT_LOCATION": "Scrum Room", "BEGIN_TIME": 1702800000000, "END_TIME": 1702801800000}}, "unique_idx": "ACTION_INSERT_EVENT-464", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Add an event for 'Volunteer Work: Beach Clean-up' at Sunny Beach. The event lasts from 1702900000000 to 1702905400000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Volunteer Work: Beach Clean-up", "DESCRIPTION": "Beach clean-up activity", "EVENT_LOCATION": "Sunny Beach", "BEGIN_TIME": 1702900000000, "END_TIME": 1702905400000}}, "unique_idx": "ACTION_INSERT_EVENT-465", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Schedule a 'Meditation Session' to help de-stress. The session will run from 1703000000000 to 1703001800000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Meditation Session", "DESCRIPTION": "De-stress and meditate", "BEGIN_TIME": 1703000000000, "END_TIME": 1703001800000}}, "unique_idx": "ACTION_INSERT_EVENT-466", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Set up a 'Strategy Planning' meeting in the boardroom to outline next quarter's goals. It begins at 1703100000000 and ends at 1703105400000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Strategy Planning", "DESCRIPTION": "Outline next quarter's goals", "EVENT_LOCATION": "boardroom", "BEGIN_TIME": 1703100000000, "END_TIME": 1703105400000}}, "unique_idx": "ACTION_INSERT_EVENT-467", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "I need to arrange a 'Virtual Conference' via Webex. It will commence at 1703200000000 and conclude at 1703205400000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Virtual Conference", "DESCRIPTION": "Conference via Webex", "EVENT_LOCATION": "Webex", "BEGIN_TIME": 1703200000000, "END_TIME": 1703205400000}}, "unique_idx": "ACTION_INSERT_EVENT-468", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Book a 'Book Club' meeting at the Local Library to discuss our latest read, starting at 1703300000000 and ending at 1703303600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Book Club", "DESCRIPTION": "Discussion on latest read", "EVENT_LOCATION": "Local Library", "BEGIN_TIME": 1703300000000, "END_TIME": 1703303600000}}, "unique_idx": "ACTION_INSERT_EVENT-469", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Please schedule an 'Art Exhibition' gathering at the City Gallery. The event is from 1703400000000 to 1703407200000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Art Exhibition", "DESCRIPTION": "Gathering at City Gallery", "EVENT_LOCATION": "City Gallery", "BEGIN_TIME": 1703400000000, "END_TIME": 1703407200000}}, "unique_idx": "ACTION_INSERT_EVENT-470", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Arrange a 'Music Rehearsal' session at the Studio for the band. The session is set between 1703500000000 and 1703503600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Music Rehearsal", "DESCRIPTION": "Band rehearsal session", "EVENT_LOCATION": "Studio", "BEGIN_TIME": 1703500000000, "END_TIME": 1703503600000}}, "unique_idx": "ACTION_INSERT_EVENT-471", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Set up a 'Cooking Class' event at the Community Center. It's scheduled to start at 1703600000000 and end at 1703605400000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Cooking Class", "DESCRIPTION": "Class at Community Center", "EVENT_LOCATION": "Community Center", "BEGIN_TIME": 1703600000000, "END_TIME": 1703605400000}}, "unique_idx": "ACTION_INSERT_EVENT-472", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Please insert a 'Sales Review' meeting at the Corporate Office. The meeting should begin at 1703700000000 and conclude at 1703703600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Sales Review", "DESCRIPTION": "Review of sales performance", "EVENT_LOCATION": "Corporate Office", "BEGIN_TIME": 1703700000000, "END_TIME": 1703703600000}}, "unique_idx": "ACTION_INSERT_EVENT-473", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "I'd like to schedule a 'Retrospective' meeting for the last project iteration. No venue specified; it begins at 1703800000000 and ends at 1703801800000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Retrospective", "DESCRIPTION": "Meeting to review the last project iteration", "BEGIN_TIME": 1703800000000, "END_TIME": 1703801800000}}, "unique_idx": "ACTION_INSERT_EVENT-474", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Add an event for 'Sprint Planning' in the board room, starting at 1703900000000 and finishing at 1703905400000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Sprint Planning", "DESCRIPTION": "Planning for the upcoming sprint", "EVENT_LOCATION": "board room", "BEGIN_TIME": 1703900000000, "END_TIME": 1703905400000}}, "unique_idx": "ACTION_INSERT_EVENT-475", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Kindly schedule a 'Holiday Party' at Downtown Banquet Hall. The celebration will run from 1704000000000 to 1704007200000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Holiday Party", "DESCRIPTION": "Celebration at Downtown Banquet Hall", "EVENT_LOCATION": "Downtown Banquet Hall", "BEGIN_TIME": 1704000000000, "END_TIME": 1704007200000}}, "unique_idx": "ACTION_INSERT_EVENT-476", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Please add an event for a 'Language Exchange' meetup. There is no specific location mentioned. It starts at 1704100000000 and ends at 1704103600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Language Exchange", "DESCRIPTION": "Meetup for language practice", "BEGIN_TIME": 1704100000000, "END_TIME": 1704103600000}}, "unique_idx": "ACTION_INSERT_EVENT-477", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Set up a 'Gymnastics Practice' session labeled as evening practice. It takes place from 1704200000000 to 1704205400000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Gymnastics Practice", "DESCRIPTION": "Evening practice session", "BEGIN_TIME": 1704200000000, "END_TIME": 1704205400000}}, "unique_idx": "ACTION_INSERT_EVENT-478", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Insert a 'Sports Day' event for outdoor activities. It is scheduled to start at 1704300000000 and finish at 1704307200000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Sports Day", "DESCRIPTION": "Outdoor activities event", "BEGIN_TIME": 1704300000000, "END_TIME": 1704307200000}}, "unique_idx": "ACTION_INSERT_EVENT-479", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Please arrange a 'Meetup: Startup Founders' event at the Innovation Hub. The event runs from 1704400000000 to 1704403600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Meetup: Startup Founders", "DESCRIPTION": "Networking event for startup founders", "EVENT_LOCATION": "Innovation Hub", "BEGIN_TIME": 1704400000000, "END_TIME": 1704403600000}}, "unique_idx": "ACTION_INSERT_EVENT-480", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Schedule a 'Webinar on Cybersecurity' to be held on Teams. It starts at 1704500000000 and concludes at 1704503600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Webinar on Cybersecurity", "DESCRIPTION": "Online webinar on cybersecurity", "EVENT_LOCATION": "Teams", "BEGIN_TIME": 1704500000000, "END_TIME": 1704503600000}}, "unique_idx": "ACTION_INSERT_EVENT-481", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "I need to set up a 'Research Seminar' at University Hall to discuss recent findings. It begins at 1704600000000 and ends at 1704607200000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Research Seminar", "DESCRIPTION": "Discuss recent research findings", "EVENT_LOCATION": "University Hall", "BEGIN_TIME": 1704600000000, "END_TIME": 1704607200000}}, "unique_idx": "ACTION_INSERT_EVENT-482", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Add an event for a 'Coding Bootcamp' where participants learn to code fast. The session will be held online from 1704800000000 to 1704805400000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Coding Bootcamp", "DESCRIPTION": "Learn to code fast", "EVENT_LOCATION": "Online", "BEGIN_TIME": 1704800000000, "END_TIME": 1704805400000}}, "unique_idx": "ACTION_INSERT_EVENT-483", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "I need to add a 'Finance Meeting' to discuss quarterly results in the Office Boardroom. It commences at 1705000000000 and ends at 1705003600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Finance Meeting", "DESCRIPTION": "Discuss quarterly results", "EVENT_LOCATION": "Office Boardroom", "BEGIN_TIME": 1705000000000, "END_TIME": 1705003600000}}, "unique_idx": "ACTION_INSERT_EVENT-484", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Set up a 'Charity Run' event, a 5K run for charity at City Park. It starts at 1705100000000 and ends at 1705105400000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Charity Run", "DESCRIPTION": "5K run for charity", "EVENT_LOCATION": "City Park", "BEGIN_TIME": 1705100000000, "END_TIME": 1705105400000}}, "unique_idx": "ACTION_INSERT_EVENT-485", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Could you add a 'Podcast Recording' session to record the new episode at the Studio? It starts at 1705200000000 and ends at 1705203600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Podcast Recording", "DESCRIPTION": "Record new episode", "EVENT_LOCATION": "Studio", "BEGIN_TIME": 1705200000000, "END_TIME": 1705203600000}}, "unique_idx": "ACTION_INSERT_EVENT-486", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "I need to schedule a 'Customer Support Training' session at the Training Center. The event will run from 1705300000000 to 1705303600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Customer Support Training", "DESCRIPTION": "Training session for customer support staff", "EVENT_LOCATION": "Training Center", "BEGIN_TIME": 1705300000000, "END_TIME": 1705303600000}}, "unique_idx": "ACTION_INSERT_EVENT-487", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Please add a 'Stress Relief Workshop' event focused on meditation and relaxation exercises. It begins at 1705400000000 and ends at 1705405400000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Stress Relief Workshop", "DESCRIPTION": "Meditation and relaxation exercises", "BEGIN_TIME": 1705400000000, "END_TIME": 1705405400000}}, "unique_idx": "ACTION_INSERT_EVENT-488", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Please pick a contact from my address book.", "answer": {"plan": "plan", "arguments": {}}, "unique_idx": "plan-489"}
{"query": "Select a contact for further actions from my list.", "answer": {"plan": "plan", "arguments": {}}, "unique_idx": "plan-490"}
{"query": "Retrieve a contact's phone number from my contacts.", "answer": {"plan": "plan", "arguments": {"data_type": "phone"}}, "unique_idx": "plan-491"}
{"query": "Could you fetch a phone contact? I mean, get the phone number URI from my contacts.", "answer": {"plan": "plan", "arguments": {"data_type": "phone"}}, "unique_idx": "plan-492"}
{"query": "Please provide the email address of a selected contact.", "answer": {"plan": "plan", "arguments": {"data_type": "email"}}, "unique_idx": "plan-493"}
{"query": "Obtain an email URI for one of my contacts.", "answer": {"plan": "plan", "arguments": {"data_type": "email"}}, "unique_idx": "plan-494"}
{"query": "I need to access the mailing address of a contact.", "answer": {"plan": "plan", "arguments": {"data_type": "address"}}, "unique_idx": "plan-495"}
{"query": "Pick a contact's postal address from my phone contacts.", "answer": {"plan": "plan", "arguments": {"data_type": "address"}}, "unique_idx": "plan-496"}
{"query": "Fetch a contact detail for me; just choose one entry from my contacts.", "answer": {"plan": "plan", "arguments": {}}, "unique_idx": "plan-497"}
{"query": "I am looking to select a contact—no particular data type, just the contact itself.", "answer": {"plan": "plan", "arguments": {}}, "unique_idx": "plan-498"}
{"query": "Get me a contact record, please.", "answer": {"plan": "plan", "arguments": {}}, "unique_idx": "plan-499"}
{"query": "Show me a phone number entry from my contacts directory.", "answer": {"plan": "plan", "arguments": {"data_type": "phone"}}, "unique_idx": "plan-500"}
{"query": "I want to pick an email from my contacts; select one email linked with a contact.", "answer": {"plan": "plan", "arguments": {"data_type": "email"}}, "unique_idx": "plan-501"}
{"query": "Help me choose a contact—preferably one including their address information.", "answer": {"plan": "plan", "arguments": {"data_type": "address"}}, "unique_idx": "plan-502"}
{"query": "Can you provide a selected contact? I don't need any specific details, just the contact itself.", "answer": {"plan": "plan", "arguments": {}}, "unique_idx": "plan-503"}
{"query": "I need to choose a contact from my list.", "answer": {"plan": "plan", "arguments": {}}, "unique_idx": "plan-504", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Please select a contact from my phone contacts.", "answer": {"plan": "plan", "arguments": {}}, "unique_idx": "plan-505", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Can you help me pick a contact from my contacts?", "answer": {"plan": "plan", "arguments": {}}, "unique_idx": "plan-506", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Pick out a contact's phone number for me.", "answer": {"plan": "plan", "arguments": {"data_type": "phone"}}, "unique_idx": "plan-507", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Fetch a contact's mobile phone URI from the list.", "answer": {"plan": "plan", "arguments": {"data_type": "phone"}}, "unique_idx": "plan-508", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I want to see my contact's email address. Could you get that for me?", "answer": {"plan": "plan", "arguments": {"data_type": "email"}}, "unique_idx": "plan-509", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Retrieve an email address from my contacts.", "answer": {"plan": "plan", "arguments": {"data_type": "email"}}, "unique_idx": "plan-510", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Pick the postal address of a contact for me.", "answer": {"plan": "plan", "arguments": {"data_type": "address"}}, "unique_idx": "plan-511", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Select the home address from my contacts.", "answer": {"plan": "plan", "arguments": {"data_type": "address"}}, "unique_idx": "plan-512", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I require a mailing address from one of my contacts.", "answer": {"plan": "plan", "arguments": {"data_type": "address"}}, "unique_idx": "plan-513", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Could you choose a contact record from my directory?", "answer": {"plan": "plan", "arguments": {}}, "unique_idx": "plan-514", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Get me the details of a random contact.", "answer": {"plan": "plan", "arguments": {}}, "unique_idx": "plan-515", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I need to find a contact in my phonebook. Please pick one for me.", "answer": {"plan": "plan", "arguments": {}}, "unique_idx": "plan-516", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Extract a contact's phone information from my list.", "answer": {"plan": "plan", "arguments": {"data_type": "phone"}}, "unique_idx": "plan-517", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Find a contact's telephone number URI for further action.", "answer": {"plan": "plan", "arguments": {"data_type": "phone"}}, "unique_idx": "plan-518", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I would like to send an email, so please retrieve a contact's email address.", "answer": {"plan": "plan", "arguments": {"data_type": "email"}}, "unique_idx": "plan-519", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Kindly get me an email contact data for my upcoming communication.", "answer": {"plan": "plan", "arguments": {"data_type": "email"}}, "unique_idx": "plan-520", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Help me pick a recipient by choosing one email from my contact list.", "answer": {"plan": "plan", "arguments": {"data_type": "email"}}, "unique_idx": "plan-521", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Gather the postal address of a particular contact, please.", "answer": {"plan": "plan", "arguments": {"data_type": "address"}}, "unique_idx": "plan-522", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I need a contact's mailing address for shipping purposes.", "answer": {"plan": "plan", "arguments": {"data_type": "address"}}, "unique_idx": "plan-523", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Can you provide the contact number from my records?", "answer": {"plan": "plan", "arguments": {"data_type": "phone"}}, "unique_idx": "plan-524", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Select a contact without specifying a type.", "answer": {"plan": "plan", "arguments": {}}, "unique_idx": "plan-525", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I want to pick someone's contact in general, no specifics needed.", "answer": {"plan": "plan", "arguments": {}}, "unique_idx": "plan-526", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Please pick a contact's details from my phonebook.", "answer": {"plan": "plan", "arguments": {}}, "unique_idx": "plan-527", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Retrieve a telephone entry from my contacts, please.", "answer": {"plan": "plan", "arguments": {"data_type": "phone"}}, "unique_idx": "plan-528", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I want to use my contacts to pick an email URI.", "answer": {"plan": "plan", "arguments": {"data_type": "email"}}, "unique_idx": "plan-529", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Can you display a contact's email address for me?", "answer": {"plan": "plan", "arguments": {"data_type": "email"}}, "unique_idx": "plan-530", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Please fetch an address record from my saved contacts.", "answer": {"plan": "plan", "arguments": {"data_type": "address"}}, "unique_idx": "plan-531", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Select a contact address for my mailing campaign.", "answer": {"plan": "plan", "arguments": {"data_type": "address"}}, "unique_idx": "plan-532", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I feel like browsing my contacts; please return one contact entry.", "answer": {"plan": "plan", "arguments": {}}, "unique_idx": "plan-533", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I need to select a record from my contact list for further interaction.", "answer": {"plan": "plan", "arguments": {}}, "unique_idx": "plan-534", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Pick an individual's phone contact number from my records.", "answer": {"plan": "plan", "arguments": {"data_type": "phone"}}, "unique_idx": "plan-535", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Find and return a contact's phone number URI.", "answer": {"plan": "plan", "arguments": {"data_type": "phone"}}, "unique_idx": "plan-536", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I want to quickly fetch a contact's email details, could you please do that?", "answer": {"plan": "plan", "arguments": {"data_type": "email"}}, "unique_idx": "plan-537", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Retrieve an electronic mail contact from the contacts list.", "answer": {"plan": "plan", "arguments": {"data_type": "email"}}, "unique_idx": "plan-538", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Can you choose an address detail from my contacts to send a package?", "answer": {"plan": "plan", "arguments": {"data_type": "address"}}, "unique_idx": "plan-539", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Kindly pick a contact's postal details for me.", "answer": {"plan": "plan", "arguments": {"data_type": "address"}}, "unique_idx": "plan-540", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Simply pick any contact from my stored contacts.", "answer": {"plan": "plan", "arguments": {}}, "unique_idx": "plan-541", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Locate a recipient's phone number by selecting a contact.", "answer": {"plan": "plan", "arguments": {"data_type": "phone"}}, "unique_idx": "plan-542", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Please select a contact's information without specifying the type.", "answer": {"plan": "plan", "arguments": {}}, "unique_idx": "plan-543", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Set an alarm for 6:45 AM with the label 'Wake up early'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 6, "EXTRA_MINUTES": 45, "EXTRA_MESSAGE": "Wake up early"}}, "unique_idx": "ACTION_SET_ALARM-544"}
{"query": "Please create an alarm at 22:30 without any custom message.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 22, "EXTRA_MINUTES": 30}}, "unique_idx": "ACTION_SET_ALARM-545"}
{"query": "Could you schedule a repeating alarm on Tuesday and Friday at 7:00 AM, calling it 'Exercise'?", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 7, "EXTRA_MINUTES": 0, "EXTRA_MESSAGE": "Exercise", "EXTRA_DAYS": ["Tuesday", "Friday"]}}, "unique_idx": "ACTION_SET_ALARM-546"}
{"query": "Set an alarm for 13:15 with the message 'Meeting Reminder' and disable vibration.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 13, "EXTRA_MINUTES": 15, "EXTRA_MESSAGE": "Meeting Reminder", "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_SET_ALARM-547"}
{"query": "I need an alarm for 05:00 but please skip showing the clock user interface.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 5, "EXTRA_MINUTES": 0, "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_ALARM-548"}
{"query": "Display an alarm set for 9:05 AM with the ringtone 'ringtone://morning' and the note 'Get Ready'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 9, "EXTRA_MINUTES": 5, "EXTRA_MESSAGE": "Get Ready", "EXTRA_RINGTONE": "ringtone://morning"}}, "unique_idx": "ACTION_SET_ALARM-549"}
{"query": "Could you kindly set an alarm for 23:59 without any extra embellishments?", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 23, "EXTRA_MINUTES": 59}}, "unique_idx": "ACTION_SET_ALARM-550"}
{"query": "Set an alarm for midnight (0:00) with the label 'New Year's countdown'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 0, "EXTRA_MINUTES": 0, "EXTRA_MESSAGE": "New Year's countdown"}}, "unique_idx": "ACTION_SET_ALARM-551"}
{"query": "Please set a 15:30 alarm that repeats on Saturday with the note 'Afternoon nap'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 15, "EXTRA_MINUTES": 30, "EXTRA_MESSAGE": "Afternoon nap", "EXTRA_DAYS": ["Saturday"]}}, "unique_idx": "ACTION_SET_ALARM-552"}
{"query": "I require an alarm at 11:11 every Monday for a weekly check-in—label it appropriately.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 11, "EXTRA_MINUTES": 11, "EXTRA_MESSAGE": "weekly check-in", "EXTRA_DAYS": ["Monday"]}}, "unique_idx": "ACTION_SET_ALARM-553"}
{"query": "Set an alarm for 18:20 with the message 'Dinner time' and ensure the clock UI doesn't pop up.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 18, "EXTRA_MINUTES": 20, "EXTRA_MESSAGE": "Dinner time", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_ALARM-554"}
{"query": "Please create an 8:50 AM alarm labeled 'Meeting', and make sure it skips the UI confirmation and doesn't vibrate.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 8, "EXTRA_MINUTES": 50, "EXTRA_MESSAGE": "Meeting", "EXTRA_SKIP_UI": true, "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_SET_ALARM-555"}
{"query": "Could you add an alarm set to 16:40 without specifying a custom label or vibration settings?", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 16, "EXTRA_MINUTES": 40}}, "unique_idx": "ACTION_SET_ALARM-556"}
{"query": "Arrange an alarm for 19:25 that repeats on Wednesday, Thursday, and Sunday, and tag it 'Study Time'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 19, "EXTRA_MINUTES": 25, "EXTRA_MESSAGE": "Study Time", "EXTRA_DAYS": ["Wednesday", "Thursday", "Sunday"]}}, "unique_idx": "ACTION_SET_ALARM-557"}
{"query": "Set my alarm to 12:00 with the label 'Noon Reminder' and use the ringtone at 'http://example.com/ringtone.mp3'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 12, "EXTRA_MINUTES": 0, "EXTRA_MESSAGE": "Noon Reminder", "EXTRA_RINGTONE": "http://example.com/ringtone.mp3"}}, "unique_idx": "ACTION_SET_ALARM-558"}
{"query": "Set an alarm for 5:30 AM with the label 'Gym'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 5, "EXTRA_MINUTES": 30, "EXTRA_MESSAGE": "Gym"}}, "unique_idx": "ACTION_SET_ALARM-559", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Alarm at 22:15 with the note 'Bed time'. Also, please bypass the confirmation UI.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 22, "EXTRA_MINUTES": 15, "EXTRA_MESSAGE": "Bed time", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_ALARM-560", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Could you set up an alarm for 23:45?", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 23, "EXTRA_MINUTES": 45}}, "unique_idx": "ACTION_SET_ALARM-561", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Please set my alarm at 7:00 AM so that it rings every Tuesday and Thursday with the message 'Work'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 7, "EXTRA_MINUTES": 0, "EXTRA_MESSAGE": "Work", "EXTRA_DAYS": ["Tuesday", "Thursday"]}}, "unique_idx": "ACTION_SET_ALARM-562", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Set a 10:20 alarm but ensure that it does not vibrate.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 10, "EXTRA_MINUTES": 20, "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_SET_ALARM-563", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Would you schedule a reminder at 14:10 with the tag 'Study'?", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 14, "EXTRA_MINUTES": 10, "EXTRA_MESSAGE": "Study"}}, "unique_idx": "ACTION_SET_ALARM-564", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "I need an alarm set for 6:00 AM without any additional bells or whistles.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 6, "EXTRA_MINUTES": 0}}, "unique_idx": "ACTION_SET_ALARM-565", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Make an alarm for 18:30 labeled 'Dinner time' and use the ringtone 'ringtone://dinner'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 18, "EXTRA_MINUTES": 30, "EXTRA_MESSAGE": "Dinner time", "EXTRA_RINGTONE": "ringtone://dinner"}}, "unique_idx": "ACTION_SET_ALARM-566", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Remind me with an alarm at 20:05 that carries the message 'Evening walk'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 20, "EXTRA_MINUTES": 5, "EXTRA_MESSAGE": "Evening walk"}}, "unique_idx": "ACTION_SET_ALARM-567", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Schedule an alarm for 9:15 that repeats every Friday.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 9, "EXTRA_MINUTES": 15, "EXTRA_DAYS": ["Friday"]}}, "unique_idx": "ACTION_SET_ALARM-568", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Set an alarm for 3:25 PM labeled 'Tea Break'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 15, "EXTRA_MINUTES": 25, "EXTRA_MESSAGE": "Tea Break"}}, "unique_idx": "ACTION_SET_ALARM-569", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Please arrange an alarm at 11:00 with the label 'Lunch'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 11, "EXTRA_MINUTES": 0, "EXTRA_MESSAGE": "Lunch"}}, "unique_idx": "ACTION_SET_ALARM-570", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Alarm at 19:45 with a custom ringtone available at 'http://xyz.com/alert.mp3'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 19, "EXTRA_MINUTES": 45, "EXTRA_RINGTONE": "http://xyz.com/alert.mp3"}}, "unique_idx": "ACTION_SET_ALARM-571", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "I'm setting an alarm for 8:55. No extra settings are needed.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 8, "EXTRA_MINUTES": 55}}, "unique_idx": "ACTION_SET_ALARM-572", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Set an alarm at 12:30 that repeats on Sundays and has the note 'Family Time'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 12, "EXTRA_MINUTES": 30, "EXTRA_MESSAGE": "Family Time", "EXTRA_DAYS": ["Sunday"]}}, "unique_idx": "ACTION_SET_ALARM-573", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "I want an alarm at 21:00 titled 'Night Routine' that doesn't vibrate.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 21, "EXTRA_MINUTES": 0, "EXTRA_MESSAGE": "Night Routine", "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_SET_ALARM-574", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Could you program a 10:00 alarm with the ringtone 'ringtone://chime'?", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 10, "EXTRA_MINUTES": 0, "EXTRA_RINGTONE": "ringtone://chime"}}, "unique_idx": "ACTION_SET_ALARM-575", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Register an alarm at 17:42 with the label 'Gym Time' that repeats on Monday.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 17, "EXTRA_MINUTES": 42, "EXTRA_MESSAGE": "Gym Time", "EXTRA_DAYS": ["Monday"]}}, "unique_idx": "ACTION_SET_ALARM-576", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "I need an alarm for 4:10 PM with the message 'Evening Meeting' and no vibration.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 16, "EXTRA_MINUTES": 10, "EXTRA_MESSAGE": "Evening Meeting", "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_SET_ALARM-577", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Please set an alarm at 2:05 AM with the message 'Early bird'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 2, "EXTRA_MINUTES": 5, "EXTRA_MESSAGE": "Early bird"}}, "unique_idx": "ACTION_SET_ALARM-578", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Set an alarm for 13:30 on Wednesday with a note saying 'Lunch Break'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 13, "EXTRA_MINUTES": 30, "EXTRA_MESSAGE": "Lunch Break", "EXTRA_DAYS": ["Wednesday"]}}, "unique_idx": "ACTION_SET_ALARM-579", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Alarm for 15:55 with the message 'Study Time' and please disable the vibrate function.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 15, "EXTRA_MINUTES": 55, "EXTRA_MESSAGE": "Study Time", "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_SET_ALARM-580", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Please set a basic alarm for 8:00 AM with default settings.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 8, "EXTRA_MINUTES": 0}}, "unique_idx": "ACTION_SET_ALARM-581", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Schedule a clock alarm at 17:15 with the reminder 'Wrap up work' that repeats on Thursday and Friday.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 17, "EXTRA_MINUTES": 15, "EXTRA_MESSAGE": "Wrap up work", "EXTRA_DAYS": ["Thursday", "Friday"]}}, "unique_idx": "ACTION_SET_ALARM-582", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Trigger an alarm for 6:35 with the label 'Morning jog'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 6, "EXTRA_MINUTES": 35, "EXTRA_MESSAGE": "Morning jog"}}, "unique_idx": "ACTION_SET_ALARM-583", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "I need an alarm at 23:00 with the label 'Late Night' and a specific ringtone from 'http://alerttone.com/late.mp3'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 23, "EXTRA_MINUTES": 0, "EXTRA_MESSAGE": "Late Night", "EXTRA_RINGTONE": "http://alerttone.com/late.mp3"}}, "unique_idx": "ACTION_SET_ALARM-584", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Please program an alarm for 7:10 with vibrate disabled and the message 'Exercise'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 7, "EXTRA_MINUTES": 10, "EXTRA_MESSAGE": "Exercise", "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_SET_ALARM-585", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Set my alarm to go off at 12:05 with the label 'Lunch Reminder'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 12, "EXTRA_MINUTES": 5, "EXTRA_MESSAGE": "Lunch Reminder"}}, "unique_idx": "ACTION_SET_ALARM-586", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Could you schedule a 16:50 alarm on Monday, Wednesday, and Friday for 'Medication' reminders?", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 16, "EXTRA_MINUTES": 50, "EXTRA_MESSAGE": "Medication", "EXTRA_DAYS": ["Monday", "Wednesday", "Friday"]}}, "unique_idx": "ACTION_SET_ALARM-587", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "I want an alarm at 9:45 AM to remind me to 'Check Email', and please skip the app interface confirmation.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 9, "EXTRA_MINUTES": 45, "EXTRA_MESSAGE": "Check Email", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_ALARM-588", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Raise an alarm at 14:30 with the notification 'Afternoon Meeting' and with the ringtone 'ringtone://meeting'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 14, "EXTRA_MINUTES": 30, "EXTRA_MESSAGE": "Afternoon Meeting", "EXTRA_RINGTONE": "ringtone://meeting"}}, "unique_idx": "ACTION_SET_ALARM-589", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Please set an alarm for 5:20 AM with the label 'Dawn Patrol'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 5, "EXTRA_MINUTES": 20, "EXTRA_MESSAGE": "Dawn Patrol"}}, "unique_idx": "ACTION_SET_ALARM-590", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Establish an alarm at 20:20 labeled 'Dinner' that repeats every Saturday.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 20, "EXTRA_MINUTES": 20, "EXTRA_MESSAGE": "Dinner", "EXTRA_DAYS": ["Saturday"]}}, "unique_idx": "ACTION_SET_ALARM-591", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "I need an alarm at 10:10 with the note 'Morning briefing' and please ensure it doesn't vibrate.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 10, "EXTRA_MINUTES": 10, "EXTRA_MESSAGE": "Morning briefing", "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_SET_ALARM-592", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Kindly arrange an alarm for 11:55 AM which skips the user interface and plays the ringtone 'ringtone://default'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 11, "EXTRA_MINUTES": 55, "EXTRA_SKIP_UI": true, "EXTRA_RINGTONE": "ringtone://default"}}, "unique_idx": "ACTION_SET_ALARM-593", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Set an alarm for 19:30 with the message 'Evening Reflection' that repeats on Tuesday.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 19, "EXTRA_MINUTES": 30, "EXTRA_MESSAGE": "Evening Reflection", "EXTRA_DAYS": ["Tuesday"]}}, "unique_idx": "ACTION_SET_ALARM-594", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Please set an alarm for 4:40 AM with the note 'Workout'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 4, "EXTRA_MINUTES": 40, "EXTRA_MESSAGE": "Workout"}}, "unique_idx": "ACTION_SET_ALARM-595", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "I want a 21:15 alarm that plays the ringtone 'http://tone.com/soft.mp3', carries the label 'Relax', and vibrates.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 21, "EXTRA_MINUTES": 15, "EXTRA_MESSAGE": "Relax", "EXTRA_RINGTONE": "http://tone.com/soft.mp3"}}, "unique_idx": "ACTION_SET_ALARM-596", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Please create an alarm at 13:05 with the note 'Lunch Over' and make sure it skips UI confirmation.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 13, "EXTRA_MINUTES": 5, "EXTRA_MESSAGE": "Lunch Over", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_ALARM-597", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Set an alarm for 2:30 PM with the label 'Siesta' that repeats on Saturday and Sunday.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 14, "EXTRA_MINUTES": 30, "EXTRA_MESSAGE": "Siesta", "EXTRA_DAYS": ["Saturday", "Sunday"]}}, "unique_idx": "ACTION_SET_ALARM-598", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Set a timer for 10 minutes, please.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "10 minutes"}}, "unique_idx": "ACTION_SET_TIMER-599"}
{"query": "Could you start a countdown of 1 hours 30 minutes with the timer labeled 'Exercise'?", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "1 hours 30 minutes", "EXTRA_MESSAGE": "Exercise"}}, "unique_idx": "ACTION_SET_TIMER-600"}
{"query": "Begin a timer that lasts for 15 seconds and name it 'Quick test'.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "15 seconds", "EXTRA_MESSAGE": "Quick test"}}, "unique_idx": "ACTION_SET_TIMER-601"}
{"query": "I need a 2 hours timer with a message 'Reading Marathon'.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "2 hours", "EXTRA_MESSAGE": "Reading Marathon"}}, "unique_idx": "ACTION_SET_TIMER-602"}
{"query": "Set a kitchen timer for 25 minutes, and make sure to skip the UI.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "25 minutes", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_TIMER-603"}
{"query": "Timer: 3 hours 45 minutes with the label 'Movie Marathon'.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "3 hours 45 minutes", "EXTRA_MESSAGE": "Movie Marathon"}}, "unique_idx": "ACTION_SET_TIMER-604"}
{"query": "Hey, set a timer for 50 minutes for laundry.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "50 minutes", "EXTRA_MESSAGE": "laundry"}}, "unique_idx": "ACTION_SET_TIMER-605"}
{"query": "Start a countdown for 5 minutes 30 seconds.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "5 minutes 30 seconds"}}, "unique_idx": "ACTION_SET_TIMER-606"}
{"query": "Could you initiate a timer for 80 minutes and tag it as 'Study Session'?", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "80 minutes", "EXTRA_MESSAGE": "Study Session"}}, "unique_idx": "ACTION_SET_TIMER-607"}
{"query": "I want to set a timer for 1 hours.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "1 hours"}}, "unique_idx": "ACTION_SET_TIMER-608"}
{"query": "Please run a countdown for 7 minutes with no extra message.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "7 minutes"}}, "unique_idx": "ACTION_SET_TIMER-609"}
{"query": "Please start a timer for 1 hours 15 minutes 5 seconds labeled as 'Workout Timer'.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "1 hours 15 minutes 5 seconds", "EXTRA_MESSAGE": "Workout Timer"}}, "unique_idx": "ACTION_SET_TIMER-610"}
{"query": "I need a silent timer for 30 minutes.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "30 minutes", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_TIMER-611"}
{"query": "Could you set a timer for 10 minutes and include the text 'Tea Time'?", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "10 minutes", "EXTRA_MESSAGE": "Tea Time"}}, "unique_idx": "ACTION_SET_TIMER-612"}
{"query": "Start a countdown timer for 90 seconds to time my experiment.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "90 seconds"}}, "unique_idx": "ACTION_SET_TIMER-613"}
{"query": "Please set a timer for 15 minutes.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "15 minutes"}}, "unique_idx": "ACTION_SET_TIMER-614", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Set an alarm for 2 hours 30 minutes and label it 'Nap Time'.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "2 hours 30 minutes", "EXTRA_MESSAGE": "Nap Time"}}, "unique_idx": "ACTION_SET_TIMER-615", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Start a countdown of 45 seconds, please.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "45 seconds"}}, "unique_idx": "ACTION_SET_TIMER-616", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Could you initiate a 5 minute timer for 'Egg Boiling'?", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "5 minutes", "EXTRA_MESSAGE": "Egg Boiling"}}, "unique_idx": "ACTION_SET_TIMER-617", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Timer: 10 minutes for meditation session.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "10 minutes", "EXTRA_MESSAGE": "meditation session"}}, "unique_idx": "ACTION_SET_TIMER-618", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "I need a timer for 1 hours 5 minutes 30 seconds.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "1 hours 5 minutes 30 seconds"}}, "unique_idx": "ACTION_SET_TIMER-619", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Run a timer for 50 seconds with the label 'Quick Test'.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "50 seconds", "EXTRA_MESSAGE": "Quick Test"}}, "unique_idx": "ACTION_SET_TIMER-620", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Please set a 20 minute timer and skip the UI confirmation.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "20 minutes", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_TIMER-621", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Start a countdown timer for 1 minutes.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "1 minutes"}}, "unique_idx": "ACTION_SET_TIMER-622", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Could you please set a timer for 2 hours tagged 'Long Study'?", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "2 hours", "EXTRA_MESSAGE": "Long Study"}}, "unique_idx": "ACTION_SET_TIMER-623", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Start a timer for 30 minutes without any label.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "30 minutes"}}, "unique_idx": "ACTION_SET_TIMER-624", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "I need a quick timer for 10 seconds for a break.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "10 seconds"}}, "unique_idx": "ACTION_SET_TIMER-625", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Please trigger a timer set for 3 hours 20 minutes and tag it as 'Cooking'.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "3 hours 20 minutes", "EXTRA_MESSAGE": "Cooking"}}, "unique_idx": "ACTION_SET_TIMER-626", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Alarm: Set a countdown of 12 minutes 30 seconds titled 'Soda Break'.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "12 minutes 30 seconds", "EXTRA_MESSAGE": "Soda Break"}}, "unique_idx": "ACTION_SET_TIMER-627", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Could you set a timer for 100 minutes?", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "100 minutes"}}, "unique_idx": "ACTION_SET_TIMER-628", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Countdown timer for 2 minutes 15 seconds labeled as 'Cycle Run', please.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "2 minutes 15 seconds", "EXTRA_MESSAGE": "Cycle Run"}}, "unique_idx": "ACTION_SET_TIMER-629", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "I'd like a timer for 30 seconds.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "30 seconds"}}, "unique_idx": "ACTION_SET_TIMER-630", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Please set an interval timer for 1 hours 10 minutes labeled 'Workout'.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "1 hours 10 minutes", "EXTRA_MESSAGE": "Workout"}}, "unique_idx": "ACTION_SET_TIMER-631", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Set a simple timer for 4 minutes.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "4 minutes"}}, "unique_idx": "ACTION_SET_TIMER-632", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Initiate a countdown timer for 90 minutes.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "90 minutes"}}, "unique_idx": "ACTION_SET_TIMER-633", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Please run a timer for 1 hours 30 minutes while skipping the confirmation UI.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "1 hours 30 minutes", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_TIMER-634", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Timer request: set a 25 minute timer and label it 'Reading session'.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "25 minutes", "EXTRA_MESSAGE": "Reading session"}}, "unique_idx": "ACTION_SET_TIMER-635", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "I’d like a timer for 75 seconds.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "75 seconds"}}, "unique_idx": "ACTION_SET_TIMER-636", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Start a countdown timer for exactly 8 minutes 5 seconds.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "8 minutes 5 seconds"}}, "unique_idx": "ACTION_SET_TIMER-637", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Could you set a kitchen timer for 6 minutes and add the note 'Oven Timer'?", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "6 minutes", "EXTRA_MESSAGE": "Oven Timer"}}, "unique_idx": "ACTION_SET_TIMER-638", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Activate a timer for 30 minutes and bypass any UI prompts.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "30 minutes", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_TIMER-639", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Set up a timer for 50 minutes 30 seconds labeled 'Laundry'.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "50 minutes 30 seconds", "EXTRA_MESSAGE": "Laundry"}}, "unique_idx": "ACTION_SET_TIMER-640", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "I need a countdown for 2 hours 45 minutes, no label needed.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "2 hours 45 minutes"}}, "unique_idx": "ACTION_SET_TIMER-641", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Could you run a quick 20 seconds timer for me?", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "20 seconds"}}, "unique_idx": "ACTION_SET_TIMER-642", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Please initiate a timer for 1 hours 15 minutes with the note 'Project Deadline'.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "1 hours 15 minutes", "EXTRA_MESSAGE": "Project Deadline"}}, "unique_idx": "ACTION_SET_TIMER-643", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Set a timer for 40 seconds while ensuring no UI is shown.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "40 seconds", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_TIMER-644", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Countdown: set a 5 hours timer with the note 'Marathon'.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "5 hours", "EXTRA_MESSAGE": "Marathon"}}, "unique_idx": "ACTION_SET_TIMER-645", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "I want to start a countdown of 90 seconds.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "90 seconds"}}, "unique_idx": "ACTION_SET_TIMER-646", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Please set a 12 minute timer labeled 'Tea Break'.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "12 minutes", "EXTRA_MESSAGE": "Tea Break"}}, "unique_idx": "ACTION_SET_TIMER-647", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Can you set up a timer for exactly 2 hours 5 minutes 10 seconds?", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "2 hours 5 minutes 10 seconds"}}, "unique_idx": "ACTION_SET_TIMER-648", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Please count down 55 minutes and bypass the UI prompt.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "55 minutes", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_TIMER-649", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Initiate a quick 15 seconds timer.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "15 seconds"}}, "unique_idx": "ACTION_SET_TIMER-650", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Could you set an alarm for 1 hours 30 minutes with the label 'Dinnertime'?", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "1 hours 30 minutes", "EXTRA_MESSAGE": "Dinnertime"}}, "unique_idx": "ACTION_SET_TIMER-651", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Run a timer for 3 minutes 15 seconds.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "3 minutes 15 seconds"}}, "unique_idx": "ACTION_SET_TIMER-652", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Timer Setup: I need a countdown for 200 seconds.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "200 seconds"}}, "unique_idx": "ACTION_SET_TIMER-653", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Show me all my active alarms right now.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-654"}
{"query": "Could you please display the list of alarms I currently have set?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-655"}
{"query": "I need to see what alarms are set on my device. Can you list them?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-656"}
{"query": "List all the alarms that I've scheduled for today.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-657"}
{"query": "¿Podrías mostrarme todas las alarmas que tengo programadas?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-658"}
{"query": "Affiche toutes les alarmes actuellement configurées sur mon appareil, s'il te plaît.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-659"}
{"query": "Please give me the list of my set alarms.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-660"}
{"query": "What alarms are currently registered on my phone?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-661"}
{"query": "Retrieve and display every active alarm I've set.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-662"}
{"query": "I want to check all the alarms that are programmed on my watch. Show them, please.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-663"}
{"query": "Can you list my scheduled wake-up alarms?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-664"}
{"query": "Display my alarm clock schedule as set on the device.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-665"}
{"query": "Alert me with the details of all the alarms that have been set.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-666"}
{"query": "Kindly show me the alarms I arranged to wake up this morning.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-667"}
{"query": "Could you show the list of scheduled alarms currently on my device?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-668"}
{"query": "Could you display all the alarms I have currently set up?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-669", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Please show every alarm I've arranged on my device.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-670", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "What alarms are active on my smartphone right now?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-671", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "List all the alarms that are currently ringing in my schedule.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-672", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "I need to see the alarms I've set. Can you display them?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-673", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Show me the schedule of alarms on my phone.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-674", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "What alarms do I have set up at the moment?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-675", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Display the list of alarms scheduled on my device please.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-676", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Can you render a list of my programmed alarms?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-677", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Give me a rundown of all the alarms I have configured.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-678", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Kindly present the current list of alarms I've set.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-679", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "I'm wondering what alarms are set up on my phone at this time. Could you show them?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-680", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "What are the active alarm entries in my schedule?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-681", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Pull up a display of all alarms I've established.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-682", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Let me see the list of alarm settings currently on my device.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-683", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Do you mind showing me all the alarms I've planned?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-684", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Fetch the current alarm configuration on my phone.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-685", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "I want to review my set alarms. Please display them.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-686", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Could you please show the alarms that are programmed on my device?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-687", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Would you mind listing all of my scheduled alarms?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-688", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Show all alarms I've set on my mobile phone.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-689", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Please bring up a list of all alarms currently set on my phone.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-690", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "I need a clear display of all the alarms scheduled. Can you help?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-691", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Could you list for me every alarm I have set up by now?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-692", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "I want to check my alarms - show all the ones I have on my device.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-693", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Please list my set alarms as per the current configuration.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-694", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Display the alarms that are presently scheduled on my phone.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-695", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "I need you to show me all the alarms that I have established.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-696", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Kindly reveal the list of timers and alarms I set up on my phone.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-697", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Show the alarm layout I've arranged on my mobile device.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-698", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Can you present to me the current alarm schedule on my smartphone?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-699", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Reveal all the alarms I have configured.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-700", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "I would like to see my active alarms. Provide the list, please.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-701", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Display the set alarm times on my device.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-702", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Can you detail the alarms that are programmed on my phone?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-703", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "I need a listing of my scheduled alarms. Please show them.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-704", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Would you display the entirety of my alarm schedule?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-705", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Kindly show all alarms I have on record for today.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-706", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Record a video using my camera.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-707"}
{"query": "Please record a video and save it at content://videos/myclip.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://videos/myclip.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-708"}
{"query": "Can you capture a quick video clip for me?", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-709"}
{"query": "I want to shoot a video using the camera and let the system decide the save location.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-710"}
{"query": "Initiate video recording now, no need to specify a file path.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-711"}
{"query": "Kindly capture a video and set the storage location to content://example/uri.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://example/uri"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-712"}
{"query": "Could you use my camera to record a short video, saving it at content://videos/event.mp4?", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://videos/event.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-713"}
{"query": "Record a video using the default camera settings.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-714"}
{"query": "I'd like to record a video clip; please open the camera app to start.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-715"}
{"query": "Execute video recording with the file destination set to content://media/videos/clip.mp4, please.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://media/videos/clip.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-716"}
{"query": "Begin a new video capture session with my camera right away.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-717"}
{"query": "Start capturing a video for me, and let the system choose where to store it.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-718"}
{"query": "I need a video recorded; could you direct the camera to save it at content://recordings/video1.mp4?", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://recordings/video1.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-719"}
{"query": "Record a video right now without specifying any particular file URI.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-720"}
{"query": "Please use the camera to record a brief video clip and save it at content://myvideos/take.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://myvideos/take.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-721"}
{"query": "Please record a video using your camera app.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-722", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Record a short video and store it at content://videos/moment.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://videos/moment.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-723", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Capture a video and let the system decide where to save it.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-724", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "I want to shoot a video clip. Please save it at content://clips/rec1.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://clips/rec1.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-725", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Open the camera app and start recording a video.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-726", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Shoot a video and store the file at content://media/videos/clip1.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://media/videos/clip1.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-727", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Could you record a video for me?", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-728", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Begin capturing video and save the recording to content://videos/capture1.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://videos/capture1.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-729", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Please start the video recording process and let me know once it is saved.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-730", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "I require a video recording; save it at content://video_storage/newvideo.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://video_storage/newvideo.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-731", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Would you mind capturing a video clip using the camera app?", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-732", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Utilize the camera to record a short video and save it at content://clips/clipA.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://clips/clipA.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-733", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Shoot a video clip for me, letting the system decide the storage destination.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-734", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Initiate video capture and direct the camera to store the resulting video at content://archive/videos/vid.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://archive/videos/vid.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-735", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Record a video and have it saved at content://movie/film.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://movie/film.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-736", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Please use your camera to film a video, allowing the system to choose the storage location.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-737", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "I need a new video recording; please save it to content://app/videos/record.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://app/videos/record.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-738", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Create a video recording using the camera application.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-739", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Record a high-impact video and save it at content://videos/highlight.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://videos/highlight.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-740", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "I want to capture a memorable moment on video; please start filming.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-741", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Capture a video with the camera and store it at content://captures/video_today.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://captures/video_today.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-742", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Record a clip for documentation. No specific storage location is required.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-743", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Kindly create a video recording and set the file URI as content://docs/videos/clip.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://docs/videos/clip.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-744", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Shoot an impromptu video and let the camera app handle where to store it.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-745", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Please record a video, and ensure it's saved at content://recordings/movie1.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://recordings/movie1.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-746", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Help me capture a video with your camera.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-747", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Open the camera to record a video, storing the result at content://video_archive/vid1.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://video_archive/vid1.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-748", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Could you please use the camera to film a moment on video?", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-749", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Capture a documentary clip and save the file at content://films/today.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://films/today.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-750", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "I require you to record a video clip using the default settings.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-751", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Record my video and assign the save path as content://media/recordedvideo.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://media/recordedvideo.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-752", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Please start the video recording without specifying any storage path.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-753", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "I need to record a quick video and have it stored at content://snapshots/capture.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://snapshots/capture.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-754", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Can you activate the video camera to record a clip for me?", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-755", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Proceed with recording a video and put it in content://saves/video_clip.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://saves/video_clip.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-756", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Kindly initiate a video capture using your camera.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-757", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "I want you to record a video clip and save the footage at content://clips/video_final.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://clips/video_final.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-758", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Please use your camera app to capture a new video recording.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-759", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Record a video and upload the file to content://uploads/new_recording.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://uploads/new_recording.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-760", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Show the contact details for the URI content://contacts/people/123.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/123"}}, "unique_idx": "ACTION_VIEW_CONTACT-761"}
{"query": "Could you open the contact profile at content://contacts/people/4567 for me?", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/4567"}}, "unique_idx": "ACTION_VIEW_CONTACT-762"}
{"query": "I need to view the details of the contact whose URI is content://contacts/contacts/9876.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/contacts/9876"}}, "unique_idx": "ACTION_VIEW_CONTACT-763"}
{"query": "Display the contact information available at content://contacts/people/1010.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1010"}}, "unique_idx": "ACTION_VIEW_CONTACT-764"}
{"query": "I would like to access the details of the contact at content://contacts/people/1314.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1314"}}, "unique_idx": "ACTION_VIEW_CONTACT-765"}
{"query": "Open up the contact's information using the URI content://contacts/contacts/1516.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/contacts/1516"}}, "unique_idx": "ACTION_VIEW_CONTACT-766"}
{"query": "Retrieve the full details of the contact found at content://contacts/people/1718.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1718"}}, "unique_idx": "ACTION_VIEW_CONTACT-767"}
{"query": "Show me the complete contact info with URI content://contacts/people/1920.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1920"}}, "unique_idx": "ACTION_VIEW_CONTACT-768"}
{"query": "I want to inspect the contact's details from content://contacts/contacts/2122. Can you do that?", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/contacts/2122"}}, "unique_idx": "ACTION_VIEW_CONTACT-769"}
{"query": "Display detailed information for the contact whose URI is content://contacts/people/2324.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/2324"}}, "unique_idx": "ACTION_VIEW_CONTACT-770"}
{"query": "Please retrieve the contact info using content://contacts/contacts/2526.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/contacts/2526"}}, "unique_idx": "ACTION_VIEW_CONTACT-771"}
{"query": "Load and display the details for the contact at content://contacts/people/2728.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/2728"}}, "unique_idx": "ACTION_VIEW_CONTACT-772"}
{"query": "Bring up the full contact information for content://contacts/contacts/2930.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/contacts/2930"}}, "unique_idx": "ACTION_VIEW_CONTACT-773"}
{"query": "Find and show the details of the contact at content://contacts/people/3132.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/3132"}}, "unique_idx": "ACTION_VIEW_CONTACT-774"}
{"query": "Please open the contact record at content://contacts/people/1001.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1001"}}, "unique_idx": "ACTION_VIEW_CONTACT-775", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "I need to check the information for the contact with URI content://contacts/people/1002.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1002"}}, "unique_idx": "ACTION_VIEW_CONTACT-776", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Get me the profile details from content://contacts/people/1004.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1004"}}, "unique_idx": "ACTION_VIEW_CONTACT-777", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "I want to see the contact information from content://contacts/contacts/2001.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/contacts/2001"}}, "unique_idx": "ACTION_VIEW_CONTACT-778", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Open contact card at content://contacts/contacts/2002.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/contacts/2002"}}, "unique_idx": "ACTION_VIEW_CONTACT-779", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Can you load the contact details from content://contacts/people/1005?", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1005"}}, "unique_idx": "ACTION_VIEW_CONTACT-780", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Show me the complete profile for the contact at content://contacts/contacts/2003.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/contacts/2003"}}, "unique_idx": "ACTION_VIEW_CONTACT-781", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "View the complete contact details for content://contacts/people/1006.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1006"}}, "unique_idx": "ACTION_VIEW_CONTACT-782", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "I would like to retrieve the contact info found at content://contacts/contacts/2004.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/contacts/2004"}}, "unique_idx": "ACTION_VIEW_CONTACT-783", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Access contact details for the entry at content://contacts/people/1007.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1007"}}, "unique_idx": "ACTION_VIEW_CONTACT-784", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Could you display the detailed record of the contact at content://contacts/contacts/2005?", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/contacts/2005"}}, "unique_idx": "ACTION_VIEW_CONTACT-785", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Bring up the profile for content://contacts/people/1008.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1008"}}, "unique_idx": "ACTION_VIEW_CONTACT-786", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Retrieve and show details of the contact from content://contacts/contacts/2006.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/contacts/2006"}}, "unique_idx": "ACTION_VIEW_CONTACT-787", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "I need to view the detailed contact information for the record at content://contacts/people/1010.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1010"}}, "unique_idx": "ACTION_VIEW_CONTACT-788", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Access the contact's complete information at content://contacts/contacts/2007.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/contacts/2007"}}, "unique_idx": "ACTION_VIEW_CONTACT-789", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Please display the complete detail of the contact at content://contacts/people/1011.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1011"}}, "unique_idx": "ACTION_VIEW_CONTACT-790", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Open the contact record with URI content://contacts/people/1012.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1012"}}, "unique_idx": "ACTION_VIEW_CONTACT-791", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Present the details for the contact associated with content://contacts/contacts/2008.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/contacts/2008"}}, "unique_idx": "ACTION_VIEW_CONTACT-792", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Load the complete contact information for content://contacts/people/1013.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1013"}}, "unique_idx": "ACTION_VIEW_CONTACT-793", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Show full profile details from the contact URI content://contacts/people/1014.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1014"}}, "unique_idx": "ACTION_VIEW_CONTACT-794", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Display the full information of the contact whose URI is content://contacts/people/1015.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1015"}}, "unique_idx": "ACTION_VIEW_CONTACT-795", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "I would appreciate displaying contact details from content://contacts/people/1016.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1016"}}, "unique_idx": "ACTION_VIEW_CONTACT-796", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Show me this contact's info located at content://contacts/people/1017.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1017"}}, "unique_idx": "ACTION_VIEW_CONTACT-797", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "I need to check the complete profile of the contact found at content://contacts/contacts/2011.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/contacts/2011"}}, "unique_idx": "ACTION_VIEW_CONTACT-798", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Bring up the details of the contact from URI content://contacts/people/1018.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1018"}}, "unique_idx": "ACTION_VIEW_CONTACT-799", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Fetch the full record of the contact from content://contacts/contacts/2012.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/contacts/2012"}}, "unique_idx": "ACTION_VIEW_CONTACT-800", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "I wish to view the contact info available at content://contacts/people/1019.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1019"}}, "unique_idx": "ACTION_VIEW_CONTACT-801", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Please get the detailed contact information for content://contacts/people/1020.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1020"}}, "unique_idx": "ACTION_VIEW_CONTACT-802", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Retrieve profile details for the contact with URI content://contacts/contacts/2013.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/contacts/2013"}}, "unique_idx": "ACTION_VIEW_CONTACT-803", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Open the detailed record for the contact found at content://contacts/people/1021.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1021"}}, "unique_idx": "ACTION_VIEW_CONTACT-804", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Display all available information for the contact at content://contacts/contacts/2014.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/contacts/2014"}}, "unique_idx": "ACTION_VIEW_CONTACT-805", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Load contact details for me using the link content://contacts/people/1022.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1022"}}, "unique_idx": "ACTION_VIEW_CONTACT-806", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Could you check the contact info from content://contacts/people/1023?", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1023"}}, "unique_idx": "ACTION_VIEW_CONTACT-807", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Access and show the contact's complete details from content://contacts/contacts/2015.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/contacts/2015"}}, "unique_idx": "ACTION_VIEW_CONTACT-808", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Exhibit the contact's details via URI content://contacts/people/1024.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1024"}}, "unique_idx": "ACTION_VIEW_CONTACT-809", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Kindly present the contact information found at content://contacts/contacts/2016.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/contacts/2016"}}, "unique_idx": "ACTION_VIEW_CONTACT-810", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Open the camera so I can snap a picture.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-811"}
{"query": "Could you launch my still image camera app, please?", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-812"}
{"query": "Please start the photo mode on my device.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-813"}
{"query": "I would like to take a photo; open the still image camera for me.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-814"}
{"query": "Activate the camera app in photo mode.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-815"}
{"query": "Launch the device's still photo camera so I can capture an image.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-816"}
{"query": "Start the photo taking application on my phone.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-817"}
{"query": "Please open the still image camera – I need to snap a quick picture.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-818"}
{"query": "Could you initiate the camera for taking a still picture?", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-819"}
{"query": "Fire up the photo camera app so I can take a shot.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-820"}
{"query": "I want to capture a moment—please open my device's still photo camera.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-821"}
{"query": "Open the smartphone's still image camera to take a picture.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-822"}
{"query": "Kick start the camera app so I can snap a high-quality image.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-823"}
{"query": "Can you open my camera in photo mode? I need to click a picture.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-824"}
{"query": "Could you please start the still image camera app so I can take a photo?", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-825", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Launch my device's camera in photo mode, please.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-826", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "I need a shot; open up the still image camera on my phone.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-827", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Open the camera application in still image mode so I can take a clear photo.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-828", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Please kick start the still image camera so I can capture a moment.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-829", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "I want to snap a picture; initiate the photo mode on my smartphone's camera.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-830", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Kindly pull up the still image camera to allow me to take a photograph.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-831", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Could you open the photo-taking camera on my device?", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-832", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Access the camera app and set it up for a still picture, please.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-833", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Fire up the camera for still image capture now.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-834", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "I need to capture a still photo; can you initiate the camera app for me?", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-835", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Open the device's still photo camera so I can take a quick snapshot.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-836", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Please load up the camera in still image mode.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-837", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "I want to record a still photo; open my smartphone's camera for me.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-838", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Enable the photo mode on my camera so I can take a still picture now.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-839", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Could you fire up the still image camera so I can snap a quick shot?", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-840", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Please initialize the camera app for still photography.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-841", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Kindly open my camera in still picture mode for a quick click.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-842", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "I would like to take a still image. Activate my camera application, please.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-843", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Please launch the photo camera so I can capture a still image.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-844", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Initiate the still picture mode on my smartphone's camera.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-845", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Open my camera app in still mode to capture a photo.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-846", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Kindly bring up my camera for still image capture.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-847", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "I need to take a still picture; please open the camera application.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-848", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Please switch on the still image camera so I can take a snapshot.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-849", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Activate the still image camera mode on my phone, please.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-850", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "I'd appreciate it if you could open the still capture camera app.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-851", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Turn on the still photography camera on my device.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-852", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Could you please bring up my still image mode so I can click a photo?", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-853", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Start the camera for taking a photo in still mode, please.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-854", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "I want to take a quick still shot; get the camera app running.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-855", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Please open the picture-taking mode in my camera for a still image.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-856", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Engage the photo capture application for a still image on my phone.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-857", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Could you activate my camera to click a still photo?", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-858", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "I need a still picture taken; please fire up the image capture app on my device.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-859", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Open my camera's still image mode immediately so I can snap a photo.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-860", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Would you please power up the camera for a still photo session?", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-861", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Kindly initialize the still photo camera on my smartphone.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-862", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "I wish to take a proper still image; please open the system camera app in photo mode.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-863", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Please open the video camera app on my phone.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-864"}
{"query": "Could you launch my device's video recording application?", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-865"}
{"query": "I need to record a video; open the camera in video mode.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-866"}
{"query": "Open the video recorder on my device, please.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-867"}
{"query": "Start the camera app for capturing videos right away.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-868"}
{"query": "Launch the system camera to record a video.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-869"}
{"query": "Activate the device's video capture mode by opening the camera.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-870"}
{"query": "I want to shoot a video; please open the video camera.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-871"}
{"query": "Could you get the video recording function started? I'd like to record something.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-872"}
{"query": "Initiate my device's video recording application now.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-873"}
{"query": "Start video recording by launching the phone's camera in video mode.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-874"}
{"query": "Can you open the video recording interface on my smartphone?", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-875"}
{"query": "Please initiate the video camera function so I can capture a moment.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-876"}
{"query": "Open up the system's video camera app for recording.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-877"}
{"query": "I require to record a video clip; start the video camera.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-878"}
{"query": "Start the video camera application on my phone.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-879", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Could you please launch the video recording app?", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-880", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "I need to make a video; open the video camera for me.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-881", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Activate the phone's video capture mode.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-882", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Boot up the video camera app on my device.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-883", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Please open the camera in video mode so I can record.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-884", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "I want to shoot a video now. Could you start the video camera app?", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-885", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Initiate video recording by launching the camera application.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-886", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Please switch on the video recording function on my phone.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-887", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Can you fire up the video mode in my camera app?", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-888", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Launch the video camera mode on my device immediately.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-889", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Please initiate the system's video recording software.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-890", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Turn on video capture mode on the camera app.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-891", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Kindly open the video mode in the camera application.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-892", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "I need to record an event; start the video camera please.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-893", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Could you launch the app that lets me record videos?", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-894", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "I want to capture some live video. Can you open the video camera app?", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-895", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Could you start the tool that lets me record videos on my device?", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-896", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "I need the camera app in video mode; please open it up.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-897", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Fire up the video recording mode on my smartphone's camera.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-898", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Can you get my video camera ready for a recording session?", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-899", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Set the camera to video mode, please.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-900", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "I would like to record a scene; open up the video camera function.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-901", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Start the device's video capture application now.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-902", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Kindly initialize the video camera tool so I can record a video.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-903", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Open the video recording feature; I need to document something.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-904", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Activate the camera's video recording mode, please.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-905", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "I want to film a quick video; can you start the video camera?", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-906", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Could you turn on the video recorder on my smartphone?", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-907", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Requesting the activation of video capture on my device.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-908", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Please boot the video mode in the camera so I can record now.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-909", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "I urge you to open the video camera application for recording.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-910", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Kindly trigger the video function in the camera app so I can film.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-911", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Please start my video recording tool for capturing a live event.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-912", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Engage the video recording application on my phone immediately.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-913", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Can you place a call to 123-456-7890?", "answer": {"plan": "dial", "arguments": {"phone_number": "123-456-7890"}}, "unique_idx": "dial-914"}
{"query": "I need to dial the number 555-1234 right now.", "answer": {"plan": "dial", "arguments": {"phone_number": "555-1234"}}, "unique_idx": "dial-915"}
{"query": "Please initiate a call to 800-555-1212.", "answer": {"plan": "dial", "arguments": {"phone_number": "800-555-1212"}}, "unique_idx": "dial-916"}
{"query": "Could you connect the call for me using 212-555-0198?", "answer": {"plan": "dial", "arguments": {"phone_number": "212-555-0198"}}, "unique_idx": "dial-917"}
{"query": "Dial the number 010-1234-5678, please.", "answer": {"plan": "dial", "arguments": {"phone_number": "010-1234-5678"}}, "unique_idx": "dial-918"}
{"query": "I need to speak with someone; please call 9876543210.", "answer": {"plan": "dial", "arguments": {"phone_number": "9876543210"}}, "unique_idx": "dial-919"}
{"query": "Can you help me by dialing +1-234-567-8901?", "answer": {"plan": "dial", "arguments": {"phone_number": "+1-234-567-8901"}}, "unique_idx": "dial-920"}
{"query": "Place a telephone call to 020-7946-0018, please.", "answer": {"plan": "dial", "arguments": {"phone_number": "020-7946-0018"}}, "unique_idx": "dial-921"}
{"query": "I'd like to talk to someone at 1-800-432-1000; can you dial that number?", "answer": {"plan": "dial", "arguments": {"phone_number": "1-800-432-1000"}}, "unique_idx": "dial-922"}
{"query": "Get me connected to 613-555-0101 over the phone.", "answer": {"plan": "dial", "arguments": {"phone_number": "613-555-0101"}}, "unique_idx": "dial-923"}
{"query": "Could you please put through a call to 415-555-2671?", "answer": {"plan": "dial", "arguments": {"phone_number": "415-555-2671"}}, "unique_idx": "dial-924"}
{"query": "I want to call 02-123-4567. Please dial this number for me.", "answer": {"plan": "dial", "arguments": {"phone_number": "02-123-4567"}}, "unique_idx": "dial-925"}
{"query": "Please help me out by dialing 1234567890.", "answer": {"plan": "dial", "arguments": {"phone_number": "1234567890"}}, "unique_idx": "dial-926"}
{"query": "Connect me to 0039-06-698-2000 by placing a call.", "answer": {"plan": "dial", "arguments": {"phone_number": "0039-06-698-2000"}}, "unique_idx": "dial-927"}
{"query": "Call 044-668-2354 now at your earliest convenience.", "answer": {"plan": "dial", "arguments": {"phone_number": "044-668-2354"}}, "unique_idx": "dial-928"}
{"query": "I'd like to call 1-800-432-1000. Please dial it for me.", "answer": {"plan": "dial", "arguments": {"phone_number": "1-800-432-1000"}}, "unique_idx": "dial-929", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Could you please make a call to 010-1234-5678?", "answer": {"plan": "dial", "arguments": {"phone_number": "010-1234-5678"}}, "unique_idx": "dial-930", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Connect me with 212-555-0198 right away.", "answer": {"plan": "dial", "arguments": {"phone_number": "212-555-0198"}}, "unique_idx": "dial-931", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "I need to reach someone; dial 044-668-2354 immediately.", "answer": {"plan": "dial", "arguments": {"phone_number": "044-668-2354"}}, "unique_idx": "dial-932", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Would you mind calling 020-7946-0018 for me?", "answer": {"plan": "dial", "arguments": {"phone_number": "020-7946-0018"}}, "unique_idx": "dial-933", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Get me in touch with 02-123-4567. Please call this number.", "answer": {"plan": "dial", "arguments": {"phone_number": "02-123-4567"}}, "unique_idx": "dial-934", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Please initiate a telephone call to +44 20 7946 0018.", "answer": {"plan": "dial", "arguments": {"phone_number": "+44 20 7946 0018"}}, "unique_idx": "dial-935", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Call +91-9876543210 for me, please.", "answer": {"plan": "dial", "arguments": {"phone_number": "+91-9876543210"}}, "unique_idx": "dial-936", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "I would like to ring up the number 303-555-0123; could you do that for me?", "answer": {"plan": "dial", "arguments": {"phone_number": "303-555-0123"}}, "unique_idx": "dial-937", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Make a phone call to 555-1234.", "answer": {"plan": "dial", "arguments": {"phone_number": "555-1234"}}, "unique_idx": "dial-938", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Ring 800-123-4567 immediately, please.", "answer": {"plan": "dial", "arguments": {"phone_number": "800-123-4567"}}, "unique_idx": "dial-939", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "I require assistance; connect my call to 999-888-7777.", "answer": {"plan": "dial", "arguments": {"phone_number": "999-888-7777"}}, "unique_idx": "dial-940", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "I need to get in touch with the support center at 1800-222-333.", "answer": {"plan": "dial", "arguments": {"phone_number": "1800-222-333"}}, "unique_idx": "dial-941", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Can you connect me to 646-123-4567?", "answer": {"plan": "dial", "arguments": {"phone_number": "646-123-4567"}}, "unique_idx": "dial-942", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Dial 987-654-3210 as soon as possible.", "answer": {"plan": "dial", "arguments": {"phone_number": "987-654-3210"}}, "unique_idx": "dial-943", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Help me out and call the number 0208 123 4567.", "answer": {"plan": "dial", "arguments": {"phone_number": "0208 123 4567"}}, "unique_idx": "dial-944", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "I'd like to chat with someone on 1(234)567-8901, so please dial it.", "answer": {"plan": "dial", "arguments": {"phone_number": "1(234)567-8901"}}, "unique_idx": "dial-945", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "For assistance, please call 321-654-0987.", "answer": {"plan": "dial", "arguments": {"phone_number": "321-654-0987"}}, "unique_idx": "dial-946", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Please make a call to the following number: 011-2233-4455.", "answer": {"plan": "dial", "arguments": {"phone_number": "011-2233-4455"}}, "unique_idx": "dial-947", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "I want to speak with customer service; please dial 800.765.4321.", "answer": {"plan": "dial", "arguments": {"phone_number": "800.765.4321"}}, "unique_idx": "dial-948", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Fire up the phone app and dial +49-89-636-48018.", "answer": {"plan": "dial", "arguments": {"phone_number": "+49-89-636-48018"}}, "unique_idx": "dial-949", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "I need a call placed on 06-1234567.", "answer": {"plan": "dial", "arguments": {"phone_number": "06-1234567"}}, "unique_idx": "dial-950", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Could you ring the number 07400 123456 for me?", "answer": {"plan": "dial", "arguments": {"phone_number": "07400 123456"}}, "unique_idx": "dial-951", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Please call me now at 07700-900123.", "answer": {"plan": "dial", "arguments": {"phone_number": "07700-900123"}}, "unique_idx": "dial-952", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "I wish to speak with someone on 02 1234 5678. Can you call that number?", "answer": {"plan": "dial", "arguments": {"phone_number": "02 1234 5678"}}, "unique_idx": "dial-953", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Connect me to the office at 444-555-6666.", "answer": {"plan": "dial", "arguments": {"phone_number": "444-555-6666"}}, "unique_idx": "dial-954", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Dial 555-4321 so I can talk to them.", "answer": {"plan": "dial", "arguments": {"phone_number": "555-4321"}}, "unique_idx": "dial-955", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "I need to arrange a call to 202-555-0143, please do so.", "answer": {"plan": "dial", "arguments": {"phone_number": "202-555-0143"}}, "unique_idx": "dial-956", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Could you make the call for me using 307-867-5309?", "answer": {"plan": "dial", "arguments": {"phone_number": "307-867-5309"}}, "unique_idx": "dial-957", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Please use the phone to call 911 immediately.", "answer": {"plan": "dial", "arguments": {"phone_number": "911"}}, "unique_idx": "dial-958", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "I need to contact emergency services; dial 112 right away.", "answer": {"plan": "dial", "arguments": {"phone_number": "112"}}, "unique_idx": "dial-959", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Can you connect directly to 13-6500 in Australia?", "answer": {"plan": "dial", "arguments": {"phone_number": "13-6500"}}, "unique_idx": "dial-960", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "I want to speak with the hotel; can you dial +353-1-234-5678?", "answer": {"plan": "dial", "arguments": {"phone_number": "+353-1-234-5678"}}, "unique_idx": "dial-961", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Execute a phone call to 03-1234-5678, thanks!", "answer": {"plan": "dial", "arguments": {"phone_number": "03-1234-5678"}}, "unique_idx": "dial-962", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Please make a call to 555-0001.", "answer": {"plan": "dial", "arguments": {"phone_number": "555-0001"}}, "unique_idx": "dial-963", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Could you try calling 555-0002 for me right away?", "answer": {"plan": "dial", "arguments": {"phone_number": "555-0002"}}, "unique_idx": "dial-964", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "I need to chat with someone; please dial 555-0003.", "answer": {"plan": "dial", "arguments": {"phone_number": "555-0003"}}, "unique_idx": "dial-965", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Ring up the number 555-0004 for me, please.", "answer": {"plan": "dial", "arguments": {"phone_number": "555-0004"}}, "unique_idx": "dial-966", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Call this number 555-0007 as soon as possible.", "answer": {"plan": "dial", "arguments": {"phone_number": "555-0007"}}, "unique_idx": "dial-967", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "I'd like to speak with someone at 555-0008, can you dial it?", "answer": {"plan": "dial", "arguments": {"phone_number": "555-0008"}}, "unique_idx": "dial-968", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Can you ring 555-0010 for me?", "answer": {"plan": "dial", "arguments": {"phone_number": "555-0010"}}, "unique_idx": "dial-969", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Kindly connect me with the number 555-0011.", "answer": {"plan": "dial", "arguments": {"phone_number": "555-0011"}}, "unique_idx": "dial-970", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "I would appreciate it if you could call 555-0012.", "answer": {"plan": "dial", "arguments": {"phone_number": "555-0012"}}, "unique_idx": "dial-971", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Dial this number for me: 555-0014.", "answer": {"plan": "dial", "arguments": {"phone_number": "555-0014"}}, "unique_idx": "dial-972", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Help me out by calling 555-0015 immediately.", "answer": {"plan": "dial", "arguments": {"phone_number": "555-0015"}}, "unique_idx": "dial-973", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Get in touch by calling 555-0017.", "answer": {"plan": "dial", "arguments": {"phone_number": "555-0017"}}, "unique_idx": "dial-974", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Could you initiate a call to 555-0018 now?", "answer": {"plan": "dial", "arguments": {"phone_number": "555-0018"}}, "unique_idx": "dial-975", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "I am requesting a phone call at 555-0019.", "answer": {"plan": "dial", "arguments": {"phone_number": "555-0019"}}, "unique_idx": "dial-976", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Dial 555-0020 as soon as you can.", "answer": {"plan": "dial", "arguments": {"phone_number": "555-0020"}}, "unique_idx": "dial-977", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Please dial the international number +1-800-123-4567.", "answer": {"plan": "dial", "arguments": {"phone_number": "+1-800-123-4567"}}, "unique_idx": "dial-978", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Connect me to the number +91 98765 43210.", "answer": {"plan": "dial", "arguments": {"phone_number": "+91 98765 43210"}}, "unique_idx": "dial-979", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "I need to call +33 1 42 68 53 00, please initiate the call.", "answer": {"plan": "dial", "arguments": {"phone_number": "+33 1 42 68 53 00"}}, "unique_idx": "dial-980", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Could you ring me at +49-30-123456?", "answer": {"plan": "dial", "arguments": {"phone_number": "+49-30-123456"}}, "unique_idx": "dial-981", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Initiate an immediate call to +81 3-1234-5678.", "answer": {"plan": "dial", "arguments": {"phone_number": "+81 3-1234-5678"}}, "unique_idx": "dial-982", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Please help me contact +61 2 9876 5432.", "answer": {"plan": "dial", "arguments": {"phone_number": "+61 2 9876 5432"}}, "unique_idx": "dial-983", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "I need to make a call to +86 10 1234 5678.", "answer": {"plan": "dial", "arguments": {"phone_number": "+86 10 1234 5678"}}, "unique_idx": "dial-984", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Connect me to +39-06-12345678, please.", "answer": {"plan": "dial", "arguments": {"phone_number": "+39-06-12345678"}}, "unique_idx": "dial-985", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Please connect me using the number +34 91 123 4567.", "answer": {"plan": "dial", "arguments": {"phone_number": "+34 91 123 4567"}}, "unique_idx": "dial-986", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Ring up the number +7 495 123-45-67.", "answer": {"plan": "dial", "arguments": {"phone_number": "+7 495 123-45-67"}}, "unique_idx": "dial-987", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "¿Podrías llamar al 555-0031, por favor?", "answer": {"plan": "dial", "arguments": {"phone_number": "555-0031"}}, "unique_idx": "dial-988", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "S'il te plaît, appelle le 555-0032.", "answer": {"plan": "dial", "arguments": {"phone_number": "555-0032"}}, "unique_idx": "dial-989", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Bitte rufe die Nummer 555-0033 an.", "answer": {"plan": "dial", "arguments": {"phone_number": "555-0033"}}, "unique_idx": "dial-990", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Per favore, chiama il 555-0034.", "answer": {"plan": "dial", "arguments": {"phone_number": "555-0034"}}, "unique_idx": "dial-991", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "请拨打电话 555-0035.", "answer": {"plan": "dial", "arguments": {"phone_number": "555-0035"}}, "unique_idx": "dial-992", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "電話をかけてください: 555-0036.", "answer": {"plan": "dial", "arguments": {"phone_number": "555-0036"}}, "unique_idx": "dial-993", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Call the business contact at 555-0037 as a priority.", "answer": {"plan": "dial", "arguments": {"phone_number": "555-0037"}}, "unique_idx": "dial-994", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Kindly initiate a call on my behalf to 555-0038.", "answer": {"plan": "dial", "arguments": {"phone_number": "555-0038"}}, "unique_idx": "dial-995", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "I want to speak with someone on 555-0039, please dial the number.", "answer": {"plan": "dial", "arguments": {"phone_number": "555-0039"}}, "unique_idx": "dial-996", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "It would be great if you could ring me at 555-0040.", "answer": {"plan": "dial", "arguments": {"phone_number": "555-0040"}}, "unique_idx": "dial-997", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "What's the phone number of the contact at contact://john_doe?", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://john_doe", "info_type": "phone"}}, "unique_idx": "get_contact_info-998"}
{"query": "Retrieve the email for my colleague at contact://jane_smith.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://jane_smith", "info_type": "email"}}, "unique_idx": "get_contact_info-999"}
{"query": "I need to find the physical address of my friend at contact://alice_representative.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://alice_representative", "info_type": "address"}}, "unique_idx": "get_contact_info-1000"}
{"query": "Show me a summary of the contact at contact://bob_resource.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://bob_resource"}}, "unique_idx": "get_contact_info-1001"}
{"query": "What is the email associated with URI contact://eve_officer?", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://eve_officer", "info_type": "email"}}, "unique_idx": "get_contact_info-1002"}
{"query": "Can you extract the phone details from contact://charlie?", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://charlie", "info_type": "phone"}}, "unique_idx": "get_contact_info-1003"}
{"query": "I need to fetch the address from the contact record found at contact://david_address.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://david_address", "info_type": "address"}}, "unique_idx": "get_contact_info-1004"}
{"query": "Get the contact summary from this URI: contact://emma_summary.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://emma_summary"}}, "unique_idx": "get_contact_info-1005"}
{"query": "Fetch the email for contact: contact://frank_email and send it to me.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://frank_email", "info_type": "email"}}, "unique_idx": "get_contact_info-1006"}
{"query": "Please get phone information for the URI contact://george_mobile.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://george_mobile", "info_type": "phone"}}, "unique_idx": "get_contact_info-1007"}
{"query": "Retrieve the complete record from contact://hannah.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://hannah"}}, "unique_idx": "get_contact_info-1008"}
{"query": "I want the mailing address for the contact located at contact://ian_mapping.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://ian_mapping", "info_type": "address"}}, "unique_idx": "get_contact_info-1009"}
{"query": "Find out the email address of the person at contact://julia_mail.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://julia_mail", "info_type": "email"}}, "unique_idx": "get_contact_info-1010"}
{"query": "Identify the phone number for contact://kevin_communication.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://kevin_communication", "info_type": "phone"}}, "unique_idx": "get_contact_info-1011"}
{"query": "Could you pull up detailed information for contact://lisa_info?", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://lisa_info"}}, "unique_idx": "get_contact_info-1012"}
{"query": "Can you get the phone details from contact://sam_mobile?", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://sam_mobile", "info_type": "phone"}}, "unique_idx": "get_contact_info-1013", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Fetch the email from contact://anita_mail.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://anita_mail", "info_type": "email"}}, "unique_idx": "get_contact_info-1014", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Could you retrieve the full contact summary for contact://dave123?", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://dave123"}}, "unique_idx": "get_contact_info-1015", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "I need to know the address for contact://olivia_address.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://olivia_address", "info_type": "address"}}, "unique_idx": "get_contact_info-1016", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Please look up the email for the following contact: contact://luke_email.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://luke_email", "info_type": "email"}}, "unique_idx": "get_contact_info-1017", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "I want the phone data from contact://diana_phone.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://diana_phone", "info_type": "phone"}}, "unique_idx": "get_contact_info-1018", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Provide the complete contact details for contact://mike_record.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://mike_record"}}, "unique_idx": "get_contact_info-1019", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Obtain the physical address from contact://nina_location.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://nina_location", "info_type": "address"}}, "unique_idx": "get_contact_info-1020", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Could you get the phone number of contact://peter_cell?", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://peter_cell", "info_type": "phone"}}, "unique_idx": "get_contact_info-1021", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Show me the email info for contact://rachel_communication.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://rachel_communication", "info_type": "email"}}, "unique_idx": "get_contact_info-1022", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Retrieve the contact details without a specific field from contact://arthur_contact.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://arthur_contact"}}, "unique_idx": "get_contact_info-1023", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Get the email address for the contact entry contact://steve_email.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://steve_email", "info_type": "email"}}, "unique_idx": "get_contact_info-1024", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "I require phone information from contact://betty_phone.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://betty_phone", "info_type": "phone"}}, "unique_idx": "get_contact_info-1025", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Find out the contact summary at contact://andrew_overview.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://andrew_overview"}}, "unique_idx": "get_contact_info-1026", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Could you obtain the mailing address for contact://casey_home?", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://casey_home", "info_type": "address"}}, "unique_idx": "get_contact_info-1027", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "I need to know the email of contact://marilyn.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://marilyn", "info_type": "email"}}, "unique_idx": "get_contact_info-1028", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Fetch the complete contact details for contact://wayne.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://wayne"}}, "unique_idx": "get_contact_info-1029", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Please extract the phone number using contact://clark.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://clark", "info_type": "phone"}}, "unique_idx": "get_contact_info-1030", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Get the email info from contact://lois.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://lois", "info_type": "email"}}, "unique_idx": "get_contact_info-1031", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Show me the home address for contact://barry_address.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://barry_address", "info_type": "address"}}, "unique_idx": "get_contact_info-1032", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Could you retrieve a full view of the contact given by contact://karen?", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://karen"}}, "unique_idx": "get_contact_info-1033", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Find the phone contact details for contact://jimmy_phone.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://jimmy_phone", "info_type": "phone"}}, "unique_idx": "get_contact_info-1034", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "I want to retrieve the email contact from contact://fiona_mail.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://fiona_mail", "info_type": "email"}}, "unique_idx": "get_contact_info-1035", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Retrieve the general contact information for contact://george_listing.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://george_listing"}}, "unique_idx": "get_contact_info-1036", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Please get the physical address details for contact://nancy_place.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://nancy_place", "info_type": "address"}}, "unique_idx": "get_contact_info-1037", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "What is the phone number for contact://oscar?", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://oscar", "info_type": "phone"}}, "unique_idx": "get_contact_info-1038", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "I would like to view the contact overview at contact://patricia.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://patricia"}}, "unique_idx": "get_contact_info-1039", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Get the email account info from contact://quentin_mail.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://quentin_mail", "info_type": "email"}}, "unique_idx": "get_contact_info-1040", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Please fetch the address details from contact://randy_location.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://randy_location", "info_type": "address"}}, "unique_idx": "get_contact_info-1041", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Find out the phone details for contact://susan_mobile.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://susan_mobile", "info_type": "phone"}}, "unique_idx": "get_contact_info-1042", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Extract the email address for contact://victor_email.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://victor_email", "info_type": "email"}}, "unique_idx": "get_contact_info-1043", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "What contact information does contact://wendy_summary have?", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://wendy_summary"}}, "unique_idx": "get_contact_info-1044", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Please lookup the phone details for contact://xavier_phone.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://xavier_phone", "info_type": "phone"}}, "unique_idx": "get_contact_info-1045", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "I need the email address associated with contact://yvonne_mail.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://yvonne_mail", "info_type": "email"}}, "unique_idx": "get_contact_info-1046", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Can you provide the full info from contact://zach?", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://zach"}}, "unique_idx": "get_contact_info-1047", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Retrieve the postal address using contact://alice_address.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://alice_address", "info_type": "address"}}, "unique_idx": "get_contact_info-1048", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Show me the telephone number for contact://bob_call.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://bob_call", "info_type": "phone"}}, "unique_idx": "get_contact_info-1049", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Get the email contact details for contact://charlie_mail.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://charlie_mail", "info_type": "email"}}, "unique_idx": "get_contact_info-1050", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "I'm looking for address details at contact://doris_residence.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://doris_residence", "info_type": "address"}}, "unique_idx": "get_contact_info-1051", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "I want a complete overview of contact://edward.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "contact://edward"}}, "unique_idx": "get_contact_info-1052", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "I'm trying to get a contact's phone number using the content URI content://contacts/data/phone1. Can you fetch it for me?", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://contacts/data/phone1"}}, "unique_idx": "get_contact_info_from_uri-1053"}
{"query": "Please retrieve the email address from the following URI: content://contacts/info/email_jane_doe", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://contacts/info/email_jane_doe"}}, "unique_idx": "get_contact_info_from_uri-1054"}
{"query": "Could you extract the phone details from content://contacts/phones/local/123? I need that contact info.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://contacts/phones/local/123"}}, "unique_idx": "get_contact_info_from_uri-1055"}
{"query": "I want to view the contact details at content://data/contacts/number/5555. Please get that information.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://data/contacts/number/5555"}}, "unique_idx": "get_contact_info_from_uri-1056"}
{"query": "Help me fetch the email data from this content URI: content://contactdetails/email/john@example.com", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://contactdetails/email/john@example.com"}}, "unique_idx": "get_contact_info_from_uri-1057"}
{"query": "Get the contact number using the URI content://mycontacts/phone/6789, please.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://mycontacts/phone/6789"}}, "unique_idx": "get_contact_info_from_uri-1058"}
{"query": "I need to check the contact record stored at content://contact_archive/email/jane@doe.com. Retrieve that for me.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://contact_archive/email/jane@doe.com"}}, "unique_idx": "get_contact_info_from_uri-1059"}
{"query": "Fetch the number from content://contacts/phone/555-0001 for my records.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://contacts/phone/555-0001"}}, "unique_idx": "get_contact_info_from_uri-1060"}
{"query": "Please pull up the contact information at content://contactsinfo/phone/800-999-1234.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://contactsinfo/phone/800-999-1234"}}, "unique_idx": "get_contact_info_from_uri-1061"}
{"query": "Show me the contact details available at URI: content://contacts/email/office_contact@mecorp.com.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://contacts/email/office_contact@mecorp.com"}}, "unique_idx": "get_contact_info_from_uri-1062"}
{"query": "I have a phonebook entry located at content://phonebook/entry/321. Can you extract the info?", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://phonebook/entry/321"}}, "unique_idx": "get_contact_info_from_uri-1063"}
{"query": "Using the URI content://contact_data/phone/business, please retrieve that phone number for me.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://contact_data/phone/business"}}, "unique_idx": "get_contact_info_from_uri-1064"}
{"query": "I need to get the contact info from content://info/contacts/number/home. Can you help?", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://info/contacts/number/home"}}, "unique_idx": "get_contact_info_from_uri-1065"}
{"query": "There is an email saved at content://emails/primary/john.smith@example.org, please fetch this contact data.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://emails/primary/john.smith@example.org"}}, "unique_idx": "get_contact_info_from_uri-1066"}
{"query": "Find the contact details by using the following content URI: content://contacts/primaryrecord/legacy.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://contacts/primaryrecord/legacy"}}, "unique_idx": "get_contact_info_from_uri-1067"}
{"query": "Could you fetch the phone number from URI content://contacts/data/phone_home_101?", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://contacts/data/phone_home_101"}}, "unique_idx": "get_contact_info_from_uri-1068", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "I need to extract contact details from content://contactlist/email/jack@example.com. Please retrieve it.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://contactlist/email/jack@example.com"}}, "unique_idx": "get_contact_info_from_uri-1069", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Please get me the contact email from content://emails/outlook/smith@example.com.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://emails/outlook/smith@example.com"}}, "unique_idx": "get_contact_info_from_uri-1070", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Using URI content://directory/phone/work_202, fetch the associated phone number.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://directory/phone/work_202"}}, "unique_idx": "get_contact_info_from_uri-1071", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Find the email detail located at content://userdata/contact/email/ubuntu@example.com.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://userdata/contact/email/ubuntu@example.com"}}, "unique_idx": "get_contact_info_from_uri-1072", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Fetch contact information from content://info/phone/cell/303.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://info/phone/cell/303"}}, "unique_idx": "get_contact_info_from_uri-1073", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "I want to see the contact info at content://phone_entries/general/450. Can you help?", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://phone_entries/general/450"}}, "unique_idx": "get_contact_info_from_uri-1074", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Extract the contact email using the URI content://contact_details/emails/janesmith@mail.com.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://contact_details/emails/janesmith@mail.com"}}, "unique_idx": "get_contact_info_from_uri-1075", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "I have a contact record at content://people/phone/789. Please pull up the phone number.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://people/phone/789"}}, "unique_idx": "get_contact_info_from_uri-1076", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Kindly retrieve the email from content://records/email/home_john@example.org.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://records/email/home_john@example.org"}}, "unique_idx": "get_contact_info_from_uri-1077", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Please obtain the phone contact linked to content://contactdata/number/98765.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://contactdata/number/98765"}}, "unique_idx": "get_contact_info_from_uri-1078", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Retrieve contact info from content://contacts/phone/alpha_123.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://contacts/phone/alpha_123"}}, "unique_idx": "get_contact_info_from_uri-1079", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "I require the email contact info stored at content://info/contact/email_bob@gmail.com.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://info/contact/email_bob@gmail.com"}}, "unique_idx": "get_contact_info_from_uri-1080", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Access the phone number provided at content://callerid/phone/0100.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://callerid/phone/0100"}}, "unique_idx": "get_contact_info_from_uri-1081", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Could you get the email address via content://mailinglist/email/primary_alice?", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://mailinglist/email/primary_alice"}}, "unique_idx": "get_contact_info_from_uri-1082", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "I need to fetch phone details from content://contact_records/phone/special/321.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://contact_records/phone/special/321"}}, "unique_idx": "get_contact_info_from_uri-1083", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Retrieve the contact details from content://directory/email/office_clark@example.net.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://directory/email/office_clark@example.net"}}, "unique_idx": "get_contact_info_from_uri-1084", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Get me the phone contact from content://contacts/devices/line/home987.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://contacts/devices/line/home987"}}, "unique_idx": "get_contact_info_from_uri-1085", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Obtain email information from content://info/emails/mailbox/susan@domain.com.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://info/emails/mailbox/susan@domain.com"}}, "unique_idx": "get_contact_info_from_uri-1086", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Help me extract my phone number stored at content://contacts/phone/international/5566.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://contacts/phone/international/5566"}}, "unique_idx": "get_contact_info_from_uri-1087", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Please retrieve contact detail using URI content://comm/phone/main_222.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://comm/phone/main_222"}}, "unique_idx": "get_contact_info_from_uri-1088", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "I am looking for the email associated with the contact URI content://emails/secondary/mike@work.com.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://emails/secondary/mike@work.com"}}, "unique_idx": "get_contact_info_from_uri-1089", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Find phone number info from content://data/phone_entry/987abc.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://data/phone_entry/987abc"}}, "unique_idx": "get_contact_info_from_uri-1090", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Could you pull the email information at content://user_data/email/peter.parker@marvel.com?", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://user_data/email/peter.parker@marvel.com"}}, "unique_idx": "get_contact_info_from_uri-1091", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "I have a request to fetch contact information from content://directory/phone_cell/33.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://directory/phone_cell/33"}}, "unique_idx": "get_contact_info_from_uri-1092", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Extract the contact's email from content://contact_info/mailbox/anne123@mail.org.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://contact_info/mailbox/anne123@mail.org"}}, "unique_idx": "get_contact_info_from_uri-1093", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Please get the phone detail found at content://contacts/phone/fax-line_800.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://contacts/phone/fax-line_800"}}, "unique_idx": "get_contact_info_from_uri-1094", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Can you retrieve the contact email from content://email_contacts/common/john_doe@example.com?", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://email_contacts/common/john_doe@example.com"}}, "unique_idx": "get_contact_info_from_uri-1095", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "I want to look up contact info at content://info/phone/skywalker_404. Please assist.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://info/phone/skywalker_404"}}, "unique_idx": "get_contact_info_from_uri-1096", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Contact information is needed from URI content://db/contacts/phone/hyperlink_555.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://db/contacts/phone/hyperlink_555"}}, "unique_idx": "get_contact_info_from_uri-1097", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Retrieve the email address from content://messaging/email/dana_scully@fbi.gov.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://messaging/email/dana_scully@fbi.gov"}}, "unique_idx": "get_contact_info_from_uri-1098", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Turn the URI content://data/contact/phone/zephyr_007 into a readable phone number.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://data/contact/phone/zephyr_007"}}, "unique_idx": "get_contact_info_from_uri-1099", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "I need the contact email for the profile at content://system/emails/info/harry@hogwarts.edu.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://system/emails/info/harry@hogwarts.edu"}}, "unique_idx": "get_contact_info_from_uri-1100", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Please extract the phone contact from content://user/contacts/number/mcFly_88.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://user/contacts/number/mcFly_88"}}, "unique_idx": "get_contact_info_from_uri-1101", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Get the email data from content://contact/archive/email/node_77@domain.com, thanks.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://contact/archive/email/node_77@domain.com"}}, "unique_idx": "get_contact_info_from_uri-1102", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "I require contact retrieval from content://contacts/service/phone/red_911.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://contacts/service/phone/red_911"}}, "unique_idx": "get_contact_info_from_uri-1103", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Find the email contact at content://network/email/user/charles@company.com.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://network/email/user/charles@company.com"}}, "unique_idx": "get_contact_info_from_uri-1104", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Please obtain the phone details using the URI: content://records/phone/private/468.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://records/phone/private/468"}}, "unique_idx": "get_contact_info_from_uri-1105", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Can you fetch the contact info from content://contact_info/phone/alpha_beta? I need it now.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://contact_info/phone/alpha_beta"}}, "unique_idx": "get_contact_info_from_uri-1106", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "I need to see the email info recorded at content://international/contacts/email/euro_mail@example.eu.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://international/contacts/email/euro_mail@example.eu"}}, "unique_idx": "get_contact_info_from_uri-1107", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Could you open the general settings on my device?", "answer": {"plan": "open_settings", "arguments": {}}, "unique_idx": "open_settings-1108"}
{"query": "I want to see my Wi-Fi settings now.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "wifi"}}, "unique_idx": "open_settings-1109"}
{"query": "Display settings please.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "display"}}, "unique_idx": "open_settings-1110"}
{"query": "Switch to airplane mode settings for my phone.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "airplane_mode"}}, "unique_idx": "open_settings-1111"}
{"query": "Can you bring up my Bluetooth settings?", "answer": {"plan": "open_settings", "arguments": {"setting_type": "bluetooth"}}, "unique_idx": "open_settings-1112"}
{"query": "Take me to the wireless & network settings screen.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "wireless"}}, "unique_idx": "open_settings-1113"}
{"query": "I need to change my APN settings.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "apn"}}, "unique_idx": "open_settings-1114"}
{"query": "Open the location settings on my phone.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "location"}}, "unique_idx": "open_settings-1115"}
{"query": "I'd like to modify my date and time preferences.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "date"}}, "unique_idx": "open_settings-1116"}
{"query": "Access the settings for internal storage on my device.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "internal_storage"}}, "unique_idx": "open_settings-1117"}
{"query": "I want to check my memory card configuration settings.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "memory_card"}}, "unique_idx": "open_settings-1118"}
{"query": "Bring up the input method settings on the device.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "input_method"}}, "unique_idx": "open_settings-1119"}
{"query": "Let's adjust the language & input settings on my phone.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "locale"}}, "unique_idx": "open_settings-1120"}
{"query": "I need to view the security settings on my phone.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "security"}}, "unique_idx": "open_settings-1121"}
{"query": "Could you please open my device's basic system configuration options?", "answer": {"plan": "open_settings", "arguments": {}}, "unique_idx": "open_settings-1122"}
{"query": "Could you please switch on my airplane mode settings screen?", "answer": {"plan": "open_settings", "arguments": {"setting_type": "airplane_mode"}}, "unique_idx": "open_settings-1123", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I need to check the status of my Wi-Fi connections. Show me the Wi-Fi settings.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "wifi"}}, "unique_idx": "open_settings-1124", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Open the APN configuration page for my device.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "apn"}}, "unique_idx": "open_settings-1125", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Show me the Bluetooth settings so that I can pair my headphones.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "bluetooth"}}, "unique_idx": "open_settings-1126", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I would like to adjust my date and time settings.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "date"}}, "unique_idx": "open_settings-1127", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Please open up the language and input configuration options on my phone.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "locale"}}, "unique_idx": "open_settings-1128", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Can you take me to the input method settings screen?", "answer": {"plan": "open_settings", "arguments": {"setting_type": "input_method"}}, "unique_idx": "open_settings-1129", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I want to view the display settings.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "display"}}, "unique_idx": "open_settings-1130", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Please show me the security settings on my device.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "security"}}, "unique_idx": "open_settings-1131", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Take me to the location settings; I need to update my location services.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "location"}}, "unique_idx": "open_settings-1132", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Could you open the internal storage settings for me?", "answer": {"plan": "open_settings", "arguments": {"setting_type": "internal_storage"}}, "unique_idx": "open_settings-1133", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I wanna check my memory card setup. Open the memory card settings screen please.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "memory_card"}}, "unique_idx": "open_settings-1134", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Show my device's general settings.", "answer": {"plan": "open_settings", "arguments": {}}, "unique_idx": "open_settings-1135", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Take me to the wireless and network options page.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "wireless"}}, "unique_idx": "open_settings-1136", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Please display the airplane mode configuration screen on my smartphone.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "airplane_mode"}}, "unique_idx": "open_settings-1137", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I want to see the Wi-Fi configuration options on my device.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "wifi"}}, "unique_idx": "open_settings-1138", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Could you show me my APN settings panel?", "answer": {"plan": "open_settings", "arguments": {"setting_type": "apn"}}, "unique_idx": "open_settings-1139", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Let me check my Bluetooth options on this device.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "bluetooth"}}, "unique_idx": "open_settings-1140", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I need to adjust my phone's date and time. Please open the date settings.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "date"}}, "unique_idx": "open_settings-1141", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I want to set up my language preferences. Bring up the language & input settings.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "locale"}}, "unique_idx": "open_settings-1142", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Navigate to the screen where I can change my keyboard settings.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "input_method"}}, "unique_idx": "open_settings-1143", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Open the display settings so I can tweak screen brightness.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "display"}}, "unique_idx": "open_settings-1144", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I need to update my phone's security configurations; please open the security settings.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "security"}}, "unique_idx": "open_settings-1145", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Show me the controls for location services.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "location"}}, "unique_idx": "open_settings-1146", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I want to inspect my device's internal storage details.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "internal_storage"}}, "unique_idx": "open_settings-1147", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Bring up the memory card settings to see its current configuration.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "memory_card"}}, "unique_idx": "open_settings-1148", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Please open the general device settings for me.", "answer": {"plan": "open_settings", "arguments": {}}, "unique_idx": "open_settings-1149", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Take me to the network settings where I can configure wireless options.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "wireless"}}, "unique_idx": "open_settings-1150", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I need to activate airplane mode. Open that settings screen please.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "airplane_mode"}}, "unique_idx": "open_settings-1151", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Help me find the Wi-Fi configuration page so I can set up my connection.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "wifi"}}, "unique_idx": "open_settings-1152", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I would like to configure my APN settings; can you open the corresponding screen?", "answer": {"plan": "open_settings", "arguments": {"setting_type": "apn"}}, "unique_idx": "open_settings-1153", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Show me the Bluetooth configuration page on my phone.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "bluetooth"}}, "unique_idx": "open_settings-1154", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Could you open the language settings so I can change my device locale?", "answer": {"plan": "open_settings", "arguments": {"setting_type": "locale"}}, "unique_idx": "open_settings-1155", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I require access to the input method settings to adjust my keyboard layout.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "input_method"}}, "unique_idx": "open_settings-1156", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Let's open the display settings panel.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "display"}}, "unique_idx": "open_settings-1157", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Show detailed security options on my phone by opening the security settings.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "security"}}, "unique_idx": "open_settings-1158", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I need to access my location settings to adjust geo-location services.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "location"}}, "unique_idx": "open_settings-1159", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "View the internal storage setup on my device, please.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "internal_storage"}}, "unique_idx": "open_settings-1160", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Access the memory card options available on my phone for configuration.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "memory_card"}}, "unique_idx": "open_settings-1161", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Could you search for 221B Baker Street?", "answer": {"plan": "search_location", "arguments": {"query": "221B Baker Street"}}, "unique_idx": "search_location-1162"}
{"query": "I'm trying to find the Eiffel Tower, please locate it for me.", "answer": {"plan": "search_location", "arguments": {"query": "Eiffel Tower"}}, "unique_idx": "search_location-1163"}
{"query": "Please look up the location of the Statue of Liberty.", "answer": {"plan": "search_location", "arguments": {"query": "Statue of Liberty"}}, "unique_idx": "search_location-1164"}
{"query": "Where exactly is Central Park located?", "answer": {"plan": "search_location", "arguments": {"query": "Central Park"}}, "unique_idx": "search_location-1165"}
{"query": "Locate 1600 Amphitheatre Parkway, Mountain View, CA for me.", "answer": {"plan": "search_location", "arguments": {"query": "1600 Amphitheatre Parkway, Mountain View, CA"}}, "unique_idx": "search_location-1166"}
{"query": "Find the address for Buckingham Palace.", "answer": {"plan": "search_location", "arguments": {"query": "Buckingham Palace"}}, "unique_idx": "search_location-1167"}
{"query": "Can you search the area around Times Square in NYC?", "answer": {"plan": "search_location", "arguments": {"query": "Times Square, NYC"}}, "unique_idx": "search_location-1168"}
{"query": "I need directions to the Sydney Opera House, please search its location.", "answer": {"plan": "search_location", "arguments": {"query": "Sydney Opera House"}}, "unique_idx": "search_location-1169"}
{"query": "Could you retrieve the address for 350 5th Ave, New York, NY?", "answer": {"plan": "search_location", "arguments": {"query": "350 5th Ave, New York, NY"}}, "unique_idx": "search_location-1170"}
{"query": "Search for the Golden Gate Bridge.", "answer": {"plan": "search_location", "arguments": {"query": "Golden Gate Bridge"}}, "unique_idx": "search_location-1171"}
{"query": "I want to find out where the Pyramids of Giza are located. Please look it up.", "answer": {"plan": "search_location", "arguments": {"query": "Pyramids of Giza"}}, "unique_idx": "search_location-1172"}
{"query": "Could you search for the location of the Louvre Museum?", "answer": {"plan": "search_location", "arguments": {"query": "Louvre Museum"}}, "unique_idx": "search_location-1173"}
{"query": "What is the address of the Colosseum? Please find it.", "answer": {"plan": "search_location", "arguments": {"query": "Colosseum"}}, "unique_idx": "search_location-1174"}
{"query": "Lookup 10 Downing Street for me.", "answer": {"plan": "search_location", "arguments": {"query": "10 Downing Street"}}, "unique_idx": "search_location-1175"}
{"query": "Identify the location of the CN Tower in Toronto.", "answer": {"plan": "search_location", "arguments": {"query": "CN Tower, Toronto"}}, "unique_idx": "search_location-1176"}
{"query": "Can you help me find the Golden Gate Bridge?", "answer": {"plan": "search_location", "arguments": {"query": "Golden Gate Bridge"}}, "unique_idx": "search_location-1177", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I need to know where the Louvre Museum in Paris is located. Can you search it?", "answer": {"plan": "search_location", "arguments": {"query": "Louvre Museum, Paris"}}, "unique_idx": "search_location-1178", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Could you search for the Colosseum in Rome?", "answer": {"plan": "search_location", "arguments": {"query": "Colosseum, Rome"}}, "unique_idx": "search_location-1179", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I want to see the map for the Burj Khalifa in Dubai, please locate it.", "answer": {"plan": "search_location", "arguments": {"query": "Burj Khalifa, Dubai"}}, "unique_idx": "search_location-1180", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Where can I find Willis Tower in Chicago?", "answer": {"plan": "search_location", "arguments": {"query": "Willis Tower, Chicago"}}, "unique_idx": "search_location-1181", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Identify the location of Red Square in Moscow.", "answer": {"plan": "search_location", "arguments": {"query": "Red Square, Moscow"}}, "unique_idx": "search_location-1182", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Can you search for 4 Pennsylvania Plaza, New York, NY?", "answer": {"plan": "search_location", "arguments": {"query": "4 Pennsylvania Plaza, New York, NY"}}, "unique_idx": "search_location-1183", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I'm trying to find the Grand Palace in Bangkok. Could you locate it?", "answer": {"plan": "search_location", "arguments": {"query": "Grand Palace, Bangkok"}}, "unique_idx": "search_location-1184", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Locate the Lincoln Memorial in Washington, D.C. for me.", "answer": {"plan": "search_location", "arguments": {"query": "Lincoln Memorial, Washington, D.C."}}, "unique_idx": "search_location-1185", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Can you look up where the Statue of Liberty is situated?", "answer": {"plan": "search_location", "arguments": {"query": "Statue of Liberty, New York, NY"}}, "unique_idx": "search_location-1186", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Please find the area corresponding to Central Park in New York City.", "answer": {"plan": "search_location", "arguments": {"query": "Central Park, New York City"}}, "unique_idx": "search_location-1187", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Locate the Great Wall near Beijing.", "answer": {"plan": "search_location", "arguments": {"query": "Great Wall, Beijing"}}, "unique_idx": "search_location-1188", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Could you help me find Kiyomizu-dera Temple in Kyoto, Japan?", "answer": {"plan": "search_location", "arguments": {"query": "Kiyomizu-dera Temple, Kyoto, Japan"}}, "unique_idx": "search_location-1189", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I need to search for the Taj Mahal in Agra. Where is it?", "answer": {"plan": "search_location", "arguments": {"query": "Taj Mahal, Agra"}}, "unique_idx": "search_location-1190", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Find out the location of the Forbidden City in Beijing.", "answer": {"plan": "search_location", "arguments": {"query": "Forbidden City, Beijing"}}, "unique_idx": "search_location-1191", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Search for the Titanic Memorial in Belfast.", "answer": {"plan": "search_location", "arguments": {"query": "Titanic Memorial, Belfast"}}, "unique_idx": "search_location-1192", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Please track down the location of the Anne Frank House in Amsterdam.", "answer": {"plan": "search_location", "arguments": {"query": "Anne Frank House, Amsterdam"}}, "unique_idx": "search_location-1193", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Could you help me find 500 Main Street in Los Angeles?", "answer": {"plan": "search_location", "arguments": {"query": "500 Main Street, Los Angeles"}}, "unique_idx": "search_location-1194", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I'm looking for the location of the Metro Center station in Washington, D.C. Please search it.", "answer": {"plan": "search_location", "arguments": {"query": "Metro Center station, Washington, D.C."}}, "unique_idx": "search_location-1195", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Search for the University of Oxford on the map.", "answer": {"plan": "search_location", "arguments": {"query": "University of Oxford"}}, "unique_idx": "search_location-1196", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Find the location of Westminster Abbey in London.", "answer": {"plan": "search_location", "arguments": {"query": "Westminster Abbey, London"}}, "unique_idx": "search_location-1197", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I'd like to see where Central Station in Sydney is located.", "answer": {"plan": "search_location", "arguments": {"query": "Central Station, Sydney"}}, "unique_idx": "search_location-1198", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Please search the address for 100 King Street, Toronto.", "answer": {"plan": "search_location", "arguments": {"query": "100 King Street, Toronto"}}, "unique_idx": "search_location-1199", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Can you locate the Space Needle in Seattle?", "answer": {"plan": "search_location", "arguments": {"query": "Space Needle, Seattle"}}, "unique_idx": "search_location-1200", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I need the map location for the Royal Palace of Madrid.", "answer": {"plan": "search_location", "arguments": {"query": "Royal Palace of Madrid"}}, "unique_idx": "search_location-1201", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Help me locate the Golden Pavilion in Kyoto.", "answer": {"plan": "search_location", "arguments": {"query": "Golden Pavilion, Kyoto"}}, "unique_idx": "search_location-1202", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Could you search for the Melbourne Cricket Ground?", "answer": {"plan": "search_location", "arguments": {"query": "Melbourne Cricket Ground"}}, "unique_idx": "search_location-1203", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I would like to navigate to the Pyramids of Giza, please help me locate them.", "answer": {"plan": "search_location", "arguments": {"query": "Pyramids of Giza"}}, "unique_idx": "search_location-1204", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Can you find out where Michelangelo's David is housed in Florence?", "answer": {"plan": "search_location", "arguments": {"query": "David, Florence"}}, "unique_idx": "search_location-1205", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Locate 42 Wall Street in New York for me.", "answer": {"plan": "search_location", "arguments": {"query": "42 Wall Street, New York"}}, "unique_idx": "search_location-1206", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Find the site of the Mount Rushmore National Memorial.", "answer": {"plan": "search_location", "arguments": {"query": "Mount Rushmore National Memorial"}}, "unique_idx": "search_location-1207", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Where is the Forbidden City located?", "answer": {"plan": "search_location", "arguments": {"query": "Forbidden City, Beijing"}}, "unique_idx": "search_location-1208", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Would you kindly search for the Sagrada Familia in Barcelona?", "answer": {"plan": "search_location", "arguments": {"query": "Sagrada Familia, Barcelona"}}, "unique_idx": "search_location-1209", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Please locate the Little Mermaid statue in Copenhagen.", "answer": {"plan": "search_location", "arguments": {"query": "Little Mermaid, Copenhagen"}}, "unique_idx": "search_location-1210", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I want to find the geographic position of the Acropolis in Athens. Can you search it?", "answer": {"plan": "search_location", "arguments": {"query": "Acropolis, Athens"}}, "unique_idx": "search_location-1211", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Could you help me locate the modern art hub, the Guggenheim Museum in Bilbao?", "answer": {"plan": "search_location", "arguments": {"query": "Guggenheim Museum, Bilbao"}}, "unique_idx": "search_location-1212", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Search for the location of the historic Montmartre district in Paris.", "answer": {"plan": "search_location", "arguments": {"query": "Montmartre, Paris"}}, "unique_idx": "search_location-1213", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I'm looking for the address of the ancient ruins at Machu Picchu in Peru; can you locate it?", "answer": {"plan": "search_location", "arguments": {"query": "Machu Picchu, Peru"}}, "unique_idx": "search_location-1214", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Help me find where the Neuschwanstein Castle is located in Germany.", "answer": {"plan": "search_location", "arguments": {"query": "Neuschwanstein Castle, Germany"}}, "unique_idx": "search_location-1215", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Locate the site known as the Plaza de Cibeles in Madrid.", "answer": {"plan": "search_location", "arguments": {"query": "Plaza de Cibeles, Madrid"}}, "unique_idx": "search_location-1216", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I need the address for the historic Brandenburg Gate in Berlin. Please search it.", "answer": {"plan": "search_location", "arguments": {"query": "Brandenburg Gate, Berlin"}}, "unique_idx": "search_location-1217", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Hey, can you send an email to alice@example.com regarding the quarterly meeting updates?", "answer": {"plan": "send_email", "arguments": {"to": "alice@example.com", "subject": "quarterly meeting updates"}}, "unique_idx": "send_email-1218"}
{"query": "Compose a quick email to bob@company.com and mention that I'll call him later.", "answer": {"plan": "send_email", "arguments": {"to": "bob@company.com", "body": "I'll call him later."}}, "unique_idx": "send_email-1219"}
{"query": "Draft an email to carol123@mail.com with the subject 'Report Submission' and attach the file report.pdf.", "answer": {"plan": "send_email", "arguments": {"to": "carol123@mail.com", "subject": "Report Submission", "attachments": ["report.pdf"]}}, "unique_idx": "send_email-1220"}
{"query": "Send an email to dave@workplace.org saying that the document is attached.", "answer": {"plan": "send_email", "arguments": {"to": "dave@workplace.org", "body": "the document is attached"}}, "unique_idx": "send_email-1221"}
{"query": "Email emma@home.net with the subject 'Party Invitation' and the message 'Join my birthday bash at 7 PM'.", "answer": {"plan": "send_email", "arguments": {"to": "emma@home.net", "subject": "Party Invitation", "body": "Join my birthday bash at 7 PM"}}, "unique_idx": "send_email-1222"}
{"query": "I need to fire off an email to frank@random.com to let him know we received his proposal.", "answer": {"plan": "send_email", "arguments": {"to": "frank@random.com", "body": "we received his proposal"}}, "unique_idx": "send_email-1223"}
{"query": "Could you send a mail to george@example.net with the subject 'Urgent: Server downtime' and body 'Server will be down for maintenance tonight'?", "answer": {"plan": "send_email", "arguments": {"to": "george@example.net", "subject": "Urgent: Server downtime", "body": "Server will be down for maintenance tonight"}}, "unique_idx": "send_email-1224"}
{"query": "Prepare an email for helen@school.edu to send her assignment submission, and attach image1.png and image2.png to it.", "answer": {"plan": "send_email", "arguments": {"to": "helen@school.edu", "attachments": ["image1.png", "image2.png"]}}, "unique_idx": "send_email-1225"}
{"query": "I want to shoot an email to isaac@tech.io informing him that our meeting has been rescheduled to tomorrow afternoon.", "answer": {"plan": "send_email", "arguments": {"to": "isaac@tech.io", "body": "our meeting has been rescheduled to tomorrow afternoon"}}, "unique_idx": "send_email-1226"}
{"query": "Draft an email to jamie@startup.com with the subject 'New Partnership' and include the text 'Let's discuss our new partnership soon.'", "answer": {"plan": "send_email", "arguments": {"to": "jamie@startup.com", "subject": "New Partnership", "body": "Let's discuss our new partnership soon."}}, "unique_idx": "send_email-1227"}
{"query": "Please send an email to kate@domain.com informing her about the policy updates.", "answer": {"plan": "send_email", "arguments": {"to": "kate@domain.com", "body": "informing her about the policy updates"}}, "unique_idx": "send_email-1228"}
{"query": "Could you compose an email addressed to luke@company.org with the subject 'Budget Review'? I want the email to mention a 10% decrease in expenses since last quarter.", "answer": {"plan": "send_email", "arguments": {"to": "luke@company.org", "subject": "Budget Review", "body": "10% decrease in expenses since last quarter"}}, "unique_idx": "send_email-1229"}
{"query": "I need to email maria@example.com. Attach my resume (resume.docx) and mention that I'm interested in the job opening.", "answer": {"plan": "send_email", "arguments": {"to": "maria@example.com", "body": "I'm interested in the job opening", "attachments": ["resume.docx"]}}, "unique_idx": "send_email-1230"}
{"query": "Send an email to nancy@service.net that simply says 'Thank you for your support'.", "answer": {"plan": "send_email", "arguments": {"to": "nancy@service.net", "body": "Thank you for your support"}}, "unique_idx": "send_email-1231"}
{"query": "Kindly prepare an email for oliver@company.com with the subject 'Follow-up' and no additional content.", "answer": {"plan": "send_email", "arguments": {"to": "oliver@company.com", "subject": "Follow-up"}}, "unique_idx": "send_email-1232"}
{"query": "Send an email to jessica@works.com to thank her for her assistance.", "answer": {"plan": "send_email", "arguments": {"to": "jessica@works.com", "body": "Thank you for your assistance"}}, "unique_idx": "send_email-1233", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "I want to notify michael@finance.org that the deadline for the annual report is next Monday.", "answer": {"plan": "send_email", "arguments": {"to": "michael@finance.org", "body": "The annual report deadline is next Monday"}}, "unique_idx": "send_email-1234", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Draft an email to daniel@company.org with the subject 'Meeting Reminder' and include a note urging him to review the meeting schedule.", "answer": {"plan": "send_email", "arguments": {"to": "daniel@company.org", "subject": "Meeting Reminder", "body": "Please review the meeting schedule."}}, "unique_idx": "send_email-1235", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Could you please send an email to morgana@tech.io that says 'Hello! Please see the attached guidelines' and attach the file guidelines.docx?", "answer": {"plan": "send_email", "arguments": {"to": "morgana@tech.io", "body": "Hello! Please see the attached guidelines", "attachments": ["guidelines.docx"]}}, "unique_idx": "send_email-1236", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "I need to notify sarah@marketing.biz: subject 'Campaign Update' with message 'The latest campaign metrics are attached'.", "answer": {"plan": "send_email", "arguments": {"to": "sarah@marketing.biz", "subject": "Campaign Update", "body": "The latest campaign metrics are attached"}}, "unique_idx": "send_email-1237", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Please inform robert@legal.com about the new contract details via email.", "answer": {"plan": "send_email", "arguments": {"to": "robert@legal.com", "body": "New contract details"}}, "unique_idx": "send_email-1238", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Forward an email to admin@school.edu that reads 'Your schedule is now updated'.", "answer": {"plan": "send_email", "arguments": {"to": "admin@school.edu", "body": "Your schedule is now updated"}}, "unique_idx": "send_email-1239", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Compose a short note to info@startup.com saying 'Hello, looking forward to collaborating!'.", "answer": {"plan": "send_email", "arguments": {"to": "info@startup.com", "body": "Hello, looking forward to collaborating!"}}, "unique_idx": "send_email-1240", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Can you prepare an email for support@service.net with the subject 'Issue Report' stating that the issue persists?", "answer": {"plan": "send_email", "arguments": {"to": "support@service.net", "subject": "Issue Report", "body": "The issue persists"}}, "unique_idx": "send_email-1241", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Write an email to it@enterprise.com to alert them of a current system outage.", "answer": {"plan": "send_email", "arguments": {"to": "it@enterprise.com", "body": "Alert: There is a system outage."}}, "unique_idx": "send_email-1242", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Send an email to helen@consulting.org with subject 'Consultation Request' including a note asking for her available timings.", "answer": {"plan": "send_email", "arguments": {"to": "helen@consulting.org", "subject": "Consultation Request", "body": "Could you please share your available timings?"}}, "unique_idx": "send_email-1243", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Dispatch an email to paul@vendor.net telling him that our feedback on the proposal is positive.", "answer": {"plan": "send_email", "arguments": {"to": "paul@vendor.net", "body": "Our feedback on the proposal is positive."}}, "unique_idx": "send_email-1244", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Can you email linda@arts.com with an attachment of brochure.pdf and portfolio.zip, saying 'These files showcase our work'?", "answer": {"plan": "send_email", "arguments": {"to": "linda@arts.com", "body": "These files showcase our work", "attachments": ["brochure.pdf", "portfolio.zip"]}}, "unique_idx": "send_email-1245", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "I want to send an email to fred@shop.com with the subject 'Order Confirmation' and the body 'Your order has been processed successfully'.", "answer": {"plan": "send_email", "arguments": {"to": "fred@shop.com", "subject": "Order Confirmation", "body": "Your order has been processed successfully"}}, "unique_idx": "send_email-1246", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Please draft an email addressed to george@ngo.org that says 'Thank you for your generous donation'.", "answer": {"plan": "send_email", "arguments": {"to": "george@ngo.org", "body": "Thank you for your generous donation"}}, "unique_idx": "send_email-1247", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Email brian@university.edu with the subject 'Assignment Submission' and include a message that I'm submitting my assignment before the deadline.", "answer": {"plan": "send_email", "arguments": {"to": "brian@university.edu", "subject": "Assignment Submission", "body": "I am submitting my assignment before the deadline"}}, "unique_idx": "send_email-1248", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Could you send an email to emily@designstudio.com and attach design_sketches.pdf?", "answer": {"plan": "send_email", "arguments": {"to": "emily@designstudio.com", "attachments": ["design_sketches.pdf"]}}, "unique_idx": "send_email-1249", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Kindly send a quick email to henry@logistics.org stating 'Shipment delayed due to weather conditions'.", "answer": {"plan": "send_email", "arguments": {"to": "henry@logistics.org", "body": "Shipment delayed due to weather conditions"}}, "unique_idx": "send_email-1250", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "I need to notify nina@hrservices.net about the upcoming interview schedule by email.", "answer": {"plan": "send_email", "arguments": {"to": "nina@hrservices.net", "body": "Upcoming interview schedule information"}}, "unique_idx": "send_email-1251", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Draft a message to operations@factory.com mentioning details about the machinery upgrade.", "answer": {"plan": "send_email", "arguments": {"to": "operations@factory.com", "body": "Details about the machinery upgrade"}}, "unique_idx": "send_email-1252", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Send an email to zara@fashion.com with the subject 'New Collection Preview' and note that the collection photos are attached.", "answer": {"plan": "send_email", "arguments": {"to": "zara@fashion.com", "subject": "New Collection Preview", "body": "The collection photos are attached."}}, "unique_idx": "send_email-1253", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Compose a message for jack@biotech.org that reads 'The experiment results are promising'.", "answer": {"plan": "send_email", "arguments": {"to": "jack@biotech.org", "body": "The experiment results are promising"}}, "unique_idx": "send_email-1254", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Reach out to sydney@travel.net via email and mention that my itinerary has changed.", "answer": {"plan": "send_email", "arguments": {"to": "sydney@travel.net", "body": "My itinerary has changed"}}, "unique_idx": "send_email-1255", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "I need to inform tim@education.edu that the exam has been postponed. Please use the subject 'Exam Date Change'.", "answer": {"plan": "send_email", "arguments": {"to": "tim@education.edu", "subject": "Exam Date Change", "body": "The exam has been postponed"}}, "unique_idx": "send_email-1256", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Email oliver@research.org an urgent notice: 'Data collection halted due to sensor failure'.", "answer": {"plan": "send_email", "arguments": {"to": "oliver@research.org", "body": "Urgent notice: Data collection halted due to sensor failure"}}, "unique_idx": "send_email-1257", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Could you please send an email to grace@foundation.org saying 'Your proposal has been accepted'?", "answer": {"plan": "send_email", "arguments": {"to": "grace@foundation.org", "body": "Your proposal has been accepted"}}, "unique_idx": "send_email-1258", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "I want to send a notification email to sam@accounting.com about the updated expense report. Use 'Expense Report Update' as the subject.", "answer": {"plan": "send_email", "arguments": {"to": "sam@accounting.com", "subject": "Expense Report Update", "body": "Updated expense report information"}}, "unique_idx": "send_email-1259", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Please email helen@construction.biz stating that the blueprint revisions have been finalized.", "answer": {"plan": "send_email", "arguments": {"to": "helen@construction.biz", "body": "Blueprint revisions have been finalized"}}, "unique_idx": "send_email-1260", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Construct an email to felix@logistics.com with the subject 'Shipping Delay' and mention that dispatch is delayed due to weather.", "answer": {"plan": "send_email", "arguments": {"to": "felix@logistics.com", "subject": "Shipping Delay", "body": "Dispatch is delayed due to weather conditions"}}, "unique_idx": "send_email-1261", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Send out an email to karen@realestate.org that reads 'The property details have been updated' and attach property_details.pdf.", "answer": {"plan": "send_email", "arguments": {"to": "karen@realestate.org", "body": "The property details have been updated", "attachments": ["property_details.pdf"]}}, "unique_idx": "send_email-1262", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Could you launch an email to nick@software.dev informing him about the software bug discovered during testing?", "answer": {"plan": "send_email", "arguments": {"to": "nick@software.dev", "body": "There is a software bug discovered during testing"}}, "unique_idx": "send_email-1263", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "I need to inform linda@media.tv with an email that has the subject 'Broadcast Schedule' and mention that the schedule has changed.", "answer": {"plan": "send_email", "arguments": {"to": "linda@media.tv", "subject": "Broadcast Schedule", "body": "The schedule has changed"}}, "unique_idx": "send_email-1264", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Alert david@security.net by email that unusual activity has been detected onsite.", "answer": {"plan": "send_email", "arguments": {"to": "david@security.net", "body": "Unusual activity has been detected onsite"}}, "unique_idx": "send_email-1265", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Compose an email to eileen@conference.org with the subject 'Keynote Update' and inform her that the keynote speaker has changed.", "answer": {"plan": "send_email", "arguments": {"to": "eileen@conference.org", "subject": "Keynote Update", "body": "The keynote speaker has changed"}}, "unique_idx": "send_email-1266", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Please prepare an email for charles@startuphub.com with the message 'Looking forward to our meeting tomorrow.'", "answer": {"plan": "send_email", "arguments": {"to": "charles@startuphub.com", "body": "Looking forward to our meeting tomorrow."}}, "unique_idx": "send_email-1267", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Send an email to amanda@financecorp.com regarding the quarterly earnings with the subject 'Earnings Report' and note that the figures are attached.", "answer": {"plan": "send_email", "arguments": {"to": "amanda@financecorp.com", "subject": "Earnings Report", "body": "Figures are attached."}}, "unique_idx": "send_email-1268", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "I want to send an email to rachel@health.org stating 'Appointment confirmed for next week'.", "answer": {"plan": "send_email", "arguments": {"to": "rachel@health.org", "body": "Appointment confirmed for next week"}}, "unique_idx": "send_email-1269", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Could you email mark@industrial.com with an attachment called spec_sheet.pdf and mention to 'share the product specifications'?", "answer": {"plan": "send_email", "arguments": {"to": "mark@industrial.com", "body": "Share the product specifications", "attachments": ["spec_sheet.pdf"]}}, "unique_idx": "send_email-1270", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Draft a note to lily@nonprofit.org thanking her for her continued support during the fundraising event.", "answer": {"plan": "send_email", "arguments": {"to": "lily@nonprofit.org", "body": "Thank you for your continued support during the fundraising event"}}, "unique_idx": "send_email-1271", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Please send an email to victor@consultancy.net with the subject 'Strategy Meeting' and the message 'Let’s discuss the growth strategy in our next meeting'.", "answer": {"plan": "send_email", "arguments": {"to": "victor@consultancy.net", "subject": "Strategy Meeting", "body": "Let’s discuss the growth strategy in our next meeting"}}, "unique_idx": "send_email-1272", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Send a text to +1234567890 with the message 'Hello, how are you?'", "answer": {"plan": "send_message", "arguments": {"to": "+1234567890", "message": "Hello, how are you?"}}, "unique_idx": "send_message-1273"}
{"query": "Please send the following SMS to John Doe: 'Don't forget our appointment tomorrow at 10 AM.'", "answer": {"plan": "send_message", "arguments": {"to": "John Doe", "message": "Don't forget our appointment tomorrow at 10 AM."}}, "unique_idx": "send_message-1274"}
{"query": "I need to notify +1987654321 that the package has been delivered.", "answer": {"plan": "send_message", "arguments": {"to": "+1987654321", "message": "the package has been delivered."}}, "unique_idx": "send_message-1275"}
{"query": "Could you text Sarah to let her know I'll be late for dinner?", "answer": {"plan": "send_message", "arguments": {"to": "Sarah", "message": "I'll be late for dinner."}}, "unique_idx": "send_message-1276"}
{"query": "Send an SMS to +14155552671 saying 'Happy Birthday!'", "answer": {"plan": "send_message", "arguments": {"to": "+14155552671", "message": "Happy Birthday!"}}, "unique_idx": "send_message-1277"}
{"query": "Kindly send a message to Mom that says 'I love you!'.", "answer": {"plan": "send_message", "arguments": {"to": "Mom", "message": "I love you!"}}, "unique_idx": "send_message-1278"}
{"query": "Send a text message with an attachment. It should go to +442071838750 with the message 'Check out this cool image', and attach the image located at http://example.com/image.jpg.", "answer": {"plan": "send_message", "arguments": {"to": "+442071838750", "message": "Check out this cool image", "attachments": ["http://example.com/image.jpg"]}}, "unique_idx": "send_message-1279"}
{"query": "Could you please send a message to Emily? The SMS should state 'Here's the document you asked for' and include the file at http://files.com/doc.pdf.", "answer": {"plan": "send_message", "arguments": {"to": "Emily", "message": "Here's the document you asked for", "attachments": ["http://files.com/doc.pdf"]}}, "unique_idx": "send_message-1280"}
{"query": "Send a quick SMS to the service desk at +1002003000 saying 'I need assistance with my account'.", "answer": {"plan": "send_message", "arguments": {"to": "+1002003000", "message": "I need assistance with my account"}}, "unique_idx": "send_message-1281"}
{"query": "I want to message my friend Lisa via SMS asking 'Are you available for a call later?'", "answer": {"plan": "send_message", "arguments": {"to": "Lisa", "message": "Are you available for a call later?"}}, "unique_idx": "send_message-1282"}
{"query": "Dispatch an SMS to +5511998765432 with the message 'Your bill is due on the 15th.'", "answer": {"plan": "send_message", "arguments": {"to": "+5511998765432", "message": "Your bill is due on the 15th."}}, "unique_idx": "send_message-1283"}
{"query": "Please forward an SMS to the contact 'Boss' that reads 'Schedule meeting moved to 4 PM.'", "answer": {"plan": "send_message", "arguments": {"to": "Boss", "message": "Schedule meeting moved to 4 PM."}}, "unique_idx": "send_message-1284"}
{"query": "Kindly transmit a message to +819012345678 that states 'Your order has been shipped. Track at http://trackshipment.com/track123'.", "answer": {"plan": "send_message", "arguments": {"to": "+819012345678", "message": "Your order has been shipped. Track at http://trackshipment.com/track123"}}, "unique_idx": "send_message-1285"}
{"query": "Message my colleague Mike saying 'The meeting is postponed to next week'.", "answer": {"plan": "send_message", "arguments": {"to": "Mike", "message": "The meeting is postponed to next week"}}, "unique_idx": "send_message-1286"}
{"query": "Can you send an urgent SMS to +33123456789 with the text 'Call me ASAP' and attach the image from https://photos.example.com/urgent.jpg?", "answer": {"plan": "send_message", "arguments": {"to": "+33123456789", "message": "Call me ASAP", "attachments": ["https://photos.example.com/urgent.jpg"]}}, "unique_idx": "send_message-1287"}
{"query": "Please send a text to John saying 'Don't forget our meeting at 10 AM.'", "answer": {"plan": "send_message", "arguments": {"to": "John", "message": "Don't forget our meeting at 10 AM."}}, "unique_idx": "send_message-1288", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Can you send an SMS to +5551234567 with the message 'Your package has arrived'?", "answer": {"plan": "send_message", "arguments": {"to": "+5551234567", "message": "Your package has arrived"}}, "unique_idx": "send_message-1289", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Text my friend Alice saying 'Lunch today?'.", "answer": {"plan": "send_message", "arguments": {"to": "Alice", "message": "Lunch today?"}}, "unique_idx": "send_message-1290", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Send an SMS to Mom that says 'Thanks for your help!'", "answer": {"plan": "send_message", "arguments": {"to": "Mom", "message": "Thanks for your help!"}}, "unique_idx": "send_message-1291", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Please text Mark 'Your order is now ready for pickup' to notify him.", "answer": {"plan": "send_message", "arguments": {"to": "Mark", "message": "Your order is now ready for pickup"}}, "unique_idx": "send_message-1292", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Could you send a text message to Cousin Kevin asking 'Will you join us for dinner tonight?'", "answer": {"plan": "send_message", "arguments": {"to": "Kevin", "message": "Will you join us for dinner tonight?"}}, "unique_idx": "send_message-1293", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Send a quick SMS to +18881234567 saying 'Be there in 5 minutes'.", "answer": {"plan": "send_message", "arguments": {"to": "+18881234567", "message": "Be there in 5 minutes"}}, "unique_idx": "send_message-1294", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Message Dr. Smith at +12125550123 to inform him that 'The test results are available.'", "answer": {"plan": "send_message", "arguments": {"to": "+12125550123", "message": "The test results are available."}}, "unique_idx": "send_message-1295", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Send a text to Emily: 'Don't forget to submit the report by EOD'.", "answer": {"plan": "send_message", "arguments": {"to": "Emily", "message": "Don't forget to submit the report by EOD"}}, "unique_idx": "send_message-1296", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Can you SMS to +4915791234567 'Meeting has been rescheduled to 3 PM' urgently?", "answer": {"plan": "send_message", "arguments": {"to": "+4915791234567", "message": "Meeting has been rescheduled to 3 PM"}}, "unique_idx": "send_message-1297", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "I need to send a text message to Bob with 'Let me know when you're free for coffee'.", "answer": {"plan": "send_message", "arguments": {"to": "Bob", "message": "Let me know when you're free for coffee"}}, "unique_idx": "send_message-1298", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Please text my partner Jessica: 'I'll be home late tonight', thanks.", "answer": {"plan": "send_message", "arguments": {"to": "Jessica", "message": "I'll be home late tonight"}}, "unique_idx": "send_message-1299", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Send an SMS to the reception at +447911123456 with the note 'Visitor arriving now'.", "answer": {"plan": "send_message", "arguments": {"to": "+447911123456", "message": "Visitor arriving now"}}, "unique_idx": "send_message-1300", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Could you text my brother, Mike, the message 'Don't forget to call Mom'?", "answer": {"plan": "send_message", "arguments": {"to": "Mike", "message": "Don't forget to call Mom"}}, "unique_idx": "send_message-1301", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Message the support team at +18005551234 with 'System outage reported, please investigate'.", "answer": {"plan": "send_message", "arguments": {"to": "+18005551234", "message": "System outage reported, please investigate"}}, "unique_idx": "send_message-1302", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Send a text notification to Customer Service at +1230984567: 'I need help with my order'.", "answer": {"plan": "send_message", "arguments": {"to": "+1230984567", "message": "I need help with my order"}}, "unique_idx": "send_message-1303", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Could you SMS my manager Erica saying 'I'll be working remotely today'?", "answer": {"plan": "send_message", "arguments": {"to": "Erica", "message": "I'll be working remotely today"}}, "unique_idx": "send_message-1304", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Send a text to Deputy John with the info: 'Report to base at 0600 hours'.", "answer": {"plan": "send_message", "arguments": {"to": "John", "message": "Report to base at 0600 hours"}}, "unique_idx": "send_message-1305", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Please message my friend Sara: 'Let's catch up over coffee this weekend'.", "answer": {"plan": "send_message", "arguments": {"to": "Sara", "message": "Let's catch up over coffee this weekend"}}, "unique_idx": "send_message-1306", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Send a heartwarming SMS to Grandma: 'Love you always'.", "answer": {"plan": "send_message", "arguments": {"to": "Grandma", "message": "Love you always"}}, "unique_idx": "send_message-1307", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Text Alan with the note 'Here's the contract' and attach the document from http://files.example.com/contract.pdf.", "answer": {"plan": "send_message", "arguments": {"to": "Alan", "message": "Here's the contract", "attachments": ["http://files.example.com/contract.pdf"]}}, "unique_idx": "send_message-1308", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Could you send an SMS to +81312345678 with the message 'The event schedule is attached' along with its PDF at https://docs.example.com/event.pdf?", "answer": {"plan": "send_message", "arguments": {"to": "+81312345678", "message": "The event schedule is attached", "attachments": ["https://docs.example.com/event.pdf"]}}, "unique_idx": "send_message-1309", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Send a message to Liam: 'Party at my place this Friday!' along with the image at http://images.example.com/invite.jpg.", "answer": {"plan": "send_message", "arguments": {"to": "Liam", "message": "Party at my place this Friday!", "attachments": ["http://images.example.com/invite.jpg"]}}, "unique_idx": "send_message-1310", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Text my friend Zoe with 'Looking forward to our trip next month' and include the itinerary image located at https://example.com/itinerary.png.", "answer": {"plan": "send_message", "arguments": {"to": "Zoe", "message": "Looking forward to our trip next month", "attachments": ["https://example.com/itinerary.png"]}}, "unique_idx": "send_message-1311", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Send a text message to +61234567890 saying 'Reminder: your appointment is tomorrow' and add this reminder image: http://reminders.example.org/appointment.jpg.", "answer": {"plan": "send_message", "arguments": {"to": "+61234567890", "message": "Reminder: your appointment is tomorrow", "attachments": ["http://reminders.example.org/appointment.jpg"]}}, "unique_idx": "send_message-1312", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Could you send a brief SMS to Dad that reads 'Good morning, have a great day'?", "answer": {"plan": "send_message", "arguments": {"to": "Dad", "message": "Good morning, have a great day"}}, "unique_idx": "send_message-1313", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Text the school office at +1233211234: 'I'll be absent due to illness today'.", "answer": {"plan": "send_message", "arguments": {"to": "+1233211234", "message": "I'll be absent due to illness today"}}, "unique_idx": "send_message-1314", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Send a message saying 'Happy Anniversary!' to my spouse, Alex.", "answer": {"plan": "send_message", "arguments": {"to": "Alex", "message": "Happy Anniversary!"}}, "unique_idx": "send_message-1315", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Can you message the taxi service at +441234567890 to say 'I'm outside waiting now'?", "answer": {"plan": "send_message", "arguments": {"to": "+441234567890", "message": "I'm outside waiting now"}}, "unique_idx": "send_message-1316", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Please text my best friend Mark with 'Let's meet at the park in 15 minutes'.", "answer": {"plan": "send_message", "arguments": {"to": "Mark", "message": "Let's meet at the park in 15 minutes"}}, "unique_idx": "send_message-1317", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Send an SMS to Emily at +972545678912 stating 'Your order has been shipped'.", "answer": {"plan": "send_message", "arguments": {"to": "+972545678912", "message": "Your order has been shipped"}}, "unique_idx": "send_message-1318", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Please send a quick SMS to center reception +11234567890 saying 'Visitor has arrived' immediately.", "answer": {"plan": "send_message", "arguments": {"to": "+11234567890", "message": "Visitor has arrived"}}, "unique_idx": "send_message-1319", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Text Professor Lee at +821012345678 to inform him 'The seminar is canceled today'.", "answer": {"plan": "send_message", "arguments": {"to": "+821012345678", "message": "The seminar is canceled today"}}, "unique_idx": "send_message-1320", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Can you send an SMS to Jenny saying 'I'll pick you up at 7 PM'?", "answer": {"plan": "send_message", "arguments": {"to": "Jenny", "message": "I'll pick you up at 7 PM"}}, "unique_idx": "send_message-1321", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Please send a message to my friend Sam: 'Congratulations on your promotion!'", "answer": {"plan": "send_message", "arguments": {"to": "Sam", "message": "Congratulations on your promotion!"}}, "unique_idx": "send_message-1322", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Could you text our IT department at +1000999888 to alert them 'Server downtime in progress'?", "answer": {"plan": "send_message", "arguments": {"to": "+1000999888", "message": "Server downtime in progress"}}, "unique_idx": "send_message-1323", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Send an SMS to coordinator Lily with the note 'Workshop details have been emailed'.", "answer": {"plan": "send_message", "arguments": {"to": "Lily", "message": "Workshop details have been emailed"}}, "unique_idx": "send_message-1324", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Message the delivery guy at +3311223344: 'Please leave the package at the front door if no one answers'.", "answer": {"plan": "send_message", "arguments": {"to": "+3311223344", "message": "Please leave the package at the front door if no one answers"}}, "unique_idx": "send_message-1325", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Could you please text Tracy, stating 'The meeting has been moved to Room 101'?", "answer": {"plan": "send_message", "arguments": {"to": "Tracy", "message": "The meeting has been moved to Room 101"}}, "unique_idx": "send_message-1326", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Send a text message to +491512345678 with 'Reminder: project deadline is tomorrow' and attach a related image from http://example.org/reminder.png.", "answer": {"plan": "send_message", "arguments": {"to": "+491512345678", "message": "Reminder: project deadline is tomorrow", "attachments": ["http://example.org/reminder.png"]}}, "unique_idx": "send_message-1327", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "I'm curious about the latest breakthroughs in electric vehicle technology. Can you search for that?", "answer": {"plan": "web_search", "arguments": {"query": "latest breakthroughs in electric vehicle technology"}}, "unique_idx": "web_search-1328"}
{"query": "Please perform a web search on how to cook authentic Italian pasta recipes.", "answer": {"plan": "web_search", "arguments": {"query": "how to cook authentic Italian pasta recipes"}}, "unique_idx": "web_search-1329"}
{"query": "Look up the current trends in remote working. I need a web search for it.", "answer": {"plan": "web_search", "arguments": {"query": "current trends in remote working"}}, "unique_idx": "web_search-1330"}
{"query": "Could you search the internet for the best strategies for digital marketing?", "answer": {"plan": "web_search", "arguments": {"query": "best strategies for digital marketing"}}, "unique_idx": "web_search-1331"}
{"query": "I need to research the prospects of renewable energy in 2024. Start a web search with that query.", "answer": {"plan": "web_search", "arguments": {"query": "prospects of renewable energy in 2024"}}, "unique_idx": "web_search-1332"}
{"query": "Find information online about the history of the Silk Road.", "answer": {"plan": "web_search", "arguments": {"query": "history of the Silk Road"}}, "unique_idx": "web_search-1333"}
{"query": "Search the web for recent developments in artificial intelligence ethics.", "answer": {"plan": "web_search", "arguments": {"query": "recent developments in artificial intelligence ethics"}}, "unique_idx": "web_search-1334"}
{"query": "I want to see some search results for the best budget smartphones of this year.", "answer": {"plan": "web_search", "arguments": {"query": "best budget smartphones 2023"}}, "unique_idx": "web_search-1335"}
{"query": "Can you look up the most popular travel destinations for 2023 on the internet?", "answer": {"plan": "web_search", "arguments": {"query": "most popular travel destinations 2023"}}, "unique_idx": "web_search-1336"}
{"query": "Initiate a search for eco-friendly home improvement ideas.", "answer": {"plan": "web_search", "arguments": {"query": "eco-friendly home improvement ideas"}}, "unique_idx": "web_search-1337"}
{"query": "I'd like to explore some recent articles on advancements in blockchain technology. Please search for them.", "answer": {"plan": "web_search", "arguments": {"query": "recent articles on advancements in blockchain technology"}}, "unique_idx": "web_search-1338"}
{"query": "Could you run a web search to find tutorials on mastering data science?", "answer": {"plan": "web_search", "arguments": {"query": "tutorials on mastering data science"}}, "unique_idx": "web_search-1339"}
{"query": "Please search for creative interior design ideas that can brighten up small spaces.", "answer": {"plan": "web_search", "arguments": {"query": "creative interior design ideas for small spaces"}}, "unique_idx": "web_search-1340"}
{"query": "I need info on sustainable agriculture practices—can you search the web for it?", "answer": {"plan": "web_search", "arguments": {"query": "sustainable agriculture practices"}}, "unique_idx": "web_search-1341"}
{"query": "Find web results on how to start a successful e-commerce business from home.", "answer": {"plan": "web_search", "arguments": {"query": "how to start a successful e-commerce business from home"}}, "unique_idx": "web_search-1342"}
{"query": "Can you search the web for information on the history of art in Europe?", "answer": {"plan": "web_search", "arguments": {"query": "history of art in Europe"}}, "unique_idx": "web_search-1343", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "I want to see the latest news on climate change. Please perform a web search.", "answer": {"plan": "web_search", "arguments": {"query": "latest news on climate change"}}, "unique_idx": "web_search-1344", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Look up the best budget travel destinations while I plan my vacation.", "answer": {"plan": "web_search", "arguments": {"query": "best budget travel destinations"}}, "unique_idx": "web_search-1345", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Could you search for a step-by-step guide on how to build a DIY wood table?", "answer": {"plan": "web_search", "arguments": {"query": "step by step guide to building a DIY wood table"}}, "unique_idx": "web_search-1346", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Please find some tips online for healthy eating on a tight budget.", "answer": {"plan": "web_search", "arguments": {"query": "tips for healthy eating on a tight budget"}}, "unique_idx": "web_search-1347", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "I'm interested in the current trends in augmented reality technology. Can you search that for me?", "answer": {"plan": "web_search", "arguments": {"query": "current trends in augmented reality technology"}}, "unique_idx": "web_search-1348", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Find information on the top 10 mystery novels of all time.", "answer": {"plan": "web_search", "arguments": {"query": "top 10 mystery novels of all time"}}, "unique_idx": "web_search-1349", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "I need details on open source software development platforms. Can you do a search?", "answer": {"plan": "web_search", "arguments": {"query": "open source software development platforms"}}, "unique_idx": "web_search-1350", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Search for research papers on quantum entanglement.", "answer": {"plan": "web_search", "arguments": {"query": "research papers on quantum entanglement"}}, "unique_idx": "web_search-1351", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "I'm curious about the history and evolution of jazz music. Can you look it up?", "answer": {"plan": "web_search", "arguments": {"query": "history and evolution of jazz music"}}, "unique_idx": "web_search-1352", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Could you perform an online search for effective stress management techniques?", "answer": {"plan": "web_search", "arguments": {"query": "effective stress management techniques"}}, "unique_idx": "web_search-1353", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Find digital resources for learning French as a second language.", "answer": {"plan": "web_search", "arguments": {"query": "digital resources for learning French as a second language"}}, "unique_idx": "web_search-1354", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "I need a list of recipes that are both vegan and gluten-free. Can you search for them?", "answer": {"plan": "web_search", "arguments": {"query": "vegan and gluten-free recipes"}}, "unique_idx": "web_search-1355", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Can you look up some recent studies on sleep and mental health?", "answer": {"plan": "web_search", "arguments": {"query": "recent studies on sleep and mental health"}}, "unique_idx": "web_search-1356", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Search the web for the benefits of meditation.", "answer": {"plan": "web_search", "arguments": {"query": "benefits of meditation"}}, "unique_idx": "web_search-1357", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "I want articles on sustainable urban planning ideas. Please do a web search for them.", "answer": {"plan": "web_search", "arguments": {"query": "articles about sustainable urban planning ideas"}}, "unique_idx": "web_search-1358", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Find out which apps are popular for time management.", "answer": {"plan": "web_search", "arguments": {"query": "popular apps for time management"}}, "unique_idx": "web_search-1359", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Could you search for a comparison of top-rated smartphones of this year?", "answer": {"plan": "web_search", "arguments": {"query": "top-rated smartphones of this year"}}, "unique_idx": "web_search-1360", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "I want to know how to start freelancing online. Please search for guides on this topic.", "answer": {"plan": "web_search", "arguments": {"query": "how to start freelancing online"}}, "unique_idx": "web_search-1361", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Do a web search for the current trends in wearable fitness technology.", "answer": {"plan": "web_search", "arguments": {"query": "current trends in wearable fitness technology"}}, "unique_idx": "web_search-1362", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "I'm interested in learning about cutting-edge robotics research. Can you look that up?", "answer": {"plan": "web_search", "arguments": {"query": "cutting-edge robotics research"}}, "unique_idx": "web_search-1363", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Look up the essential steps for launching a startup business.", "answer": {"plan": "web_search", "arguments": {"query": "essential steps for launching a startup business"}}, "unique_idx": "web_search-1364", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "I would like information on the rise of electric scooters in urban areas. Please search for this.", "answer": {"plan": "web_search", "arguments": {"query": "rise of electric scooters in urban areas"}}, "unique_idx": "web_search-1365", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Perform a web search for comprehensive guides on personal finance management.", "answer": {"plan": "web_search", "arguments": {"query": "comprehensive guides on personal finance management"}}, "unique_idx": "web_search-1366", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Can you search for expert opinions on the future of renewable energy?", "answer": {"plan": "web_search", "arguments": {"query": "expert opinions on the future of renewable energy"}}, "unique_idx": "web_search-1367", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "I need to look up the latest technological innovations in smart home devices.", "answer": {"plan": "web_search", "arguments": {"query": "technological innovations in smart home devices"}}, "unique_idx": "web_search-1368", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Please run a search on the impact of social media on youth.", "answer": {"plan": "web_search", "arguments": {"query": "impact of social media on youth"}}, "unique_idx": "web_search-1369", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Look up blog posts that provide strategies for improving work-life balance.", "answer": {"plan": "web_search", "arguments": {"query": "blog posts about improving work-life balance strategies"}}, "unique_idx": "web_search-1370", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Could you find reviews on the newest models of electric cars?", "answer": {"plan": "web_search", "arguments": {"query": "reviews on the newest electric car models"}}, "unique_idx": "web_search-1371", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "I need a search for the best hiking trails in national parks.", "answer": {"plan": "web_search", "arguments": {"query": "best hiking trails in national parks"}}, "unique_idx": "web_search-1372", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Search the internet for comprehensive guides on digital photography techniques.", "answer": {"plan": "web_search", "arguments": {"query": "comprehensive guides on digital photography"}}, "unique_idx": "web_search-1373", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "I am interested in learning about trends in remote education techniques. Please look it up.", "answer": {"plan": "web_search", "arguments": {"query": "trends in remote education techniques"}}, "unique_idx": "web_search-1374", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Perform a search for web articles on advancements in medical technology.", "answer": {"plan": "web_search", "arguments": {"query": "advancements in medical technology"}}, "unique_idx": "web_search-1375", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "I need to find details on popular workout regimes for busy professionals. Could you search for that?", "answer": {"plan": "web_search", "arguments": {"query": "popular workout regimes for busy professionals"}}, "unique_idx": "web_search-1376", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Look up some modern minimalist ideas for interior decorating.", "answer": {"plan": "web_search", "arguments": {"query": "modern minimalist interior decorating ideas"}}, "unique_idx": "web_search-1377", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Can you search for inspirational quotes on leadership and success?", "answer": {"plan": "web_search", "arguments": {"query": "inspirational quotes on leadership and success"}}, "unique_idx": "web_search-1378", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "I want to find online tutorials for learning how to code in JavaScript. Please search for it.", "answer": {"plan": "web_search", "arguments": {"query": "online tutorials for learning how to code in JavaScript"}}, "unique_idx": "web_search-1379", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Could you look up the latest reviews on high-end gaming laptops?", "answer": {"plan": "web_search", "arguments": {"query": "latest reviews on high-end gaming laptops"}}, "unique_idx": "web_search-1380", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Search for interesting facts and resources about ancient civilizations.", "answer": {"plan": "web_search", "arguments": {"query": "interesting facts on ancient civilizations"}}, "unique_idx": "web_search-1381", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "I need a detailed analysis on stock market trends and predictions. Can you search that for me?", "answer": {"plan": "web_search", "arguments": {"query": "detailed analysis on stock market trends and predictions"}}, "unique_idx": "web_search-1382", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Could you play the song 'Bohemian Rhapsody' on Spotify?", "answer": {"plan": "play_music", "arguments": {"track": "Bohemian Rhapsody", "app": "Spotify"}}, "unique_idx": "play_music-1383"}
{"query": "Play some music.", "answer": {"plan": "play_music", "arguments": {}}, "unique_idx": "play_music-1384"}
{"query": "I would like to listen to 'Stairway to Heaven', please.", "answer": {"plan": "play_music", "arguments": {"track": "Stairway to Heaven"}}, "unique_idx": "play_music-1385"}
{"query": "Can you start music playback on Apple Music?", "answer": {"plan": "play_music", "arguments": {"app": "Apple Music"}}, "unique_idx": "play_music-1386"}
{"query": "Please play 'Shape of You' by Ed Sheeran via Deezer.", "answer": {"plan": "play_music", "arguments": {"track": "Shape of You", "app": "Deezer"}}, "unique_idx": "play_music-1387"}
{"query": "Could you launch the default music player?", "answer": {"plan": "play_music", "arguments": {}}, "unique_idx": "play_music-1388"}
{"query": "I want to hear 'Hotel California'.", "answer": {"plan": "play_music", "arguments": {"track": "Hotel California"}}, "unique_idx": "play_music-1389"}
{"query": "Start playing music on SoundCloud, I want to check out some tracks.", "answer": {"plan": "play_music", "arguments": {"app": "SoundCloud"}}, "unique_idx": "play_music-1390"}
{"query": "Play the track with URI 'spotify:track:6rqhFgbbKwnb9MLmUQDhG6'.", "answer": {"plan": "play_music", "arguments": {"track": "spotify:track:6rqhFgbbKwnb9MLmUQDhG6"}}, "unique_idx": "play_music-1391"}
{"query": "Fire up my tunes and play 'Imagine - John Lennon'.", "answer": {"plan": "play_music", "arguments": {"track": "Imagine - John Lennon"}}, "unique_idx": "play_music-1392"}
{"query": "I feel like enjoying a meditative tune on Pandora; get it started.", "answer": {"plan": "play_music", "arguments": {"app": "Pandora"}}, "unique_idx": "play_music-1393"}
{"query": "Could you initiate playback of the remix version of 'Bad Guy' on Tidal?", "answer": {"plan": "play_music", "arguments": {"track": "Bad Guy Remix", "app": "Tidal"}}, "unique_idx": "play_music-1394"}
{"query": "Start some tunes!", "answer": {"plan": "play_music", "arguments": {}}, "unique_idx": "play_music-1395"}
{"query": "Launch my music app and play 'Rolling in the Deep'.", "answer": {"plan": "play_music", "arguments": {"track": "Rolling in the Deep"}}, "unique_idx": "play_music-1396"}
{"query": "Hey, play 'Uptown Funk' on the Jango app.", "answer": {"plan": "play_music", "arguments": {"track": "Uptown Funk", "app": "Jango"}}, "unique_idx": "play_music-1397"}
{"query": "Can you please play some tunes via the default music app?", "answer": {"plan": "play_music", "arguments": {}}, "unique_idx": "play_music-1398", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "I would like to listen to 'Bohemian Rhapsody'.", "answer": {"plan": "play_music", "arguments": {"track": "Bohemian Rhapsody"}}, "unique_idx": "play_music-1399", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Play 'Bohemian Rhapsody' on Spotify.", "answer": {"plan": "play_music", "arguments": {"track": "Bohemian Rhapsody", "app": "Spotify"}}, "unique_idx": "play_music-1400", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Could you open Pandora for some music streaming?", "answer": {"plan": "play_music", "arguments": {"app": "Pandora"}}, "unique_idx": "play_music-1401", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Put on 'Shape of You' please.", "answer": {"plan": "play_music", "arguments": {"track": "Shape of You"}}, "unique_idx": "play_music-1402", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "I want to jam to 'Lose Yourself' on YouTube Music.", "answer": {"plan": "play_music", "arguments": {"track": "Lose Yourself", "app": "YouTube Music"}}, "unique_idx": "play_music-1403", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Play the song with the URI 'spotify:track:1234567890abcdef' using the default player.", "answer": {"plan": "play_music", "arguments": {"track": "spotify:track:1234567890abcdef"}}, "unique_idx": "play_music-1404", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Launch my music player and start the track 'Thriller'.", "answer": {"plan": "play_music", "arguments": {"track": "Thriller"}}, "unique_idx": "play_music-1405", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Hey, could you get 'Smells Like Teen Spirit' playing right now?", "answer": {"plan": "play_music", "arguments": {"track": "Smells Like Teen Spirit"}}, "unique_idx": "play_music-1406", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "I feel like listening to some tunes; open the default music app for me.", "answer": {"plan": "play_music", "arguments": {}}, "unique_idx": "play_music-1407", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Play a relaxing melody on SoundCloud.", "answer": {"plan": "play_music", "arguments": {"app": "SoundCloud"}}, "unique_idx": "play_music-1408", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Would you please play 'Imagine - John Lennon' using Apple Music?", "answer": {"plan": "play_music", "arguments": {"track": "Imagine - John Lennon", "app": "Apple Music"}}, "unique_idx": "play_music-1409", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "I need some music. Start playing with the default app.", "answer": {"plan": "play_music", "arguments": {}}, "unique_idx": "play_music-1410", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Play the track 'Hey Jude'.", "answer": {"plan": "play_music", "arguments": {"track": "Hey Jude"}}, "unique_idx": "play_music-1411", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Could you start playback on the Deezer app?", "answer": {"plan": "play_music", "arguments": {"app": "Deezer"}}, "unique_idx": "play_music-1412", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "I want 'Rolling in the Deep' to play now through my default music app.", "answer": {"plan": "play_music", "arguments": {"track": "Rolling in the Deep"}}, "unique_idx": "play_music-1413", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Let's listen to 'September' on our default music player.", "answer": {"plan": "play_music", "arguments": {"track": "September"}}, "unique_idx": "play_music-1414", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Open Pandora and play something upbeat.", "answer": {"plan": "play_music", "arguments": {"app": "Pandora"}}, "unique_idx": "play_music-1415", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Put on my favorite track 'Stairway to Heaven', please.", "answer": {"plan": "play_music", "arguments": {"track": "Stairway to Heaven"}}, "unique_idx": "play_music-1416", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Could you fire up the default music player so I can listen to some tunes?", "answer": {"plan": "play_music", "arguments": {}}, "unique_idx": "play_music-1417", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "I want to hear 'Wonderwall' on Spotify, can you play it?", "answer": {"plan": "play_music", "arguments": {"track": "Wonderwall", "app": "Spotify"}}, "unique_idx": "play_music-1418", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Play this track: 'Lose Yourself' using the Music app.", "answer": {"plan": "play_music", "arguments": {"track": "Lose Yourself", "app": "Music"}}, "unique_idx": "play_music-1419", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "I would love to hear 'Counting Stars'.", "answer": {"plan": "play_music", "arguments": {"track": "Counting Stars"}}, "unique_idx": "play_music-1420", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Activate my radio app 'TuneIn Radio'.", "answer": {"plan": "play_music", "arguments": {"app": "TuneIn Radio"}}, "unique_idx": "play_music-1421", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Please play the track identified by 'spotify:track:abcdef1234567890'.", "answer": {"plan": "play_music", "arguments": {"track": "spotify:track:abcdef1234567890"}}, "unique_idx": "play_music-1422", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Play 'Blinding Lights'; I'm in the mood for it.", "answer": {"plan": "play_music", "arguments": {"track": "Blinding Lights"}}, "unique_idx": "play_music-1423", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Launch Google Play Music and start playback.", "answer": {"plan": "play_music", "arguments": {"app": "Google Play Music"}}, "unique_idx": "play_music-1424", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Could you start playing 'Let It Be' right away?", "answer": {"plan": "play_music", "arguments": {"track": "Let It Be"}}, "unique_idx": "play_music-1425", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Start up the default music player; I want some music now.", "answer": {"plan": "play_music", "arguments": {}}, "unique_idx": "play_music-1426", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Play the song named 'Imagine' using my default player.", "answer": {"plan": "play_music", "arguments": {"track": "Imagine"}}, "unique_idx": "play_music-1427", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Put on 'Thunderstruck' on the Amazon Music app.", "answer": {"plan": "play_music", "arguments": {"track": "Thunderstruck", "app": "Amazon Music"}}, "unique_idx": "play_music-1428", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Could you open the music app and play something?", "answer": {"plan": "play_music", "arguments": {}}, "unique_idx": "play_music-1429", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "I want to listen to the hit 'Bad Guy'.", "answer": {"plan": "play_music", "arguments": {"track": "Bad Guy"}}, "unique_idx": "play_music-1430", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Play a track called \"Sweet Child O' Mine\" on my default player.", "answer": {"plan": "play_music", "arguments": {"track": "Sweet Child O' Mine"}}, "unique_idx": "play_music-1431", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "I'd like to use the default app for some tunes.", "answer": {"plan": "play_music", "arguments": {}}, "unique_idx": "play_music-1432", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Fire up Shazam for music streaming.", "answer": {"plan": "play_music", "arguments": {"app": "Shazam"}}, "unique_idx": "play_music-1433", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Play the following URI: 'spotify:track:0987654321fedcba'.", "answer": {"plan": "play_music", "arguments": {"track": "spotify:track:0987654321fedcba"}}, "unique_idx": "play_music-1434", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Get the music rolling on Tidal.", "answer": {"plan": "play_music", "arguments": {"app": "Tidal"}}, "unique_idx": "play_music-1435", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "I would appreciate it if you started 'Watermelon Sugar'.", "answer": {"plan": "play_music", "arguments": {"track": "Watermelon Sugar"}}, "unique_idx": "play_music-1436", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Launch the default player and queue my favorite track.", "answer": {"plan": "play_music", "arguments": {}}, "unique_idx": "play_music-1437", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Could you please start the default video player?", "answer": {"plan": "play_video", "arguments": {}}, "unique_idx": "play_video-1438"}
{"query": "Play video from the URL http://example.com/video.mp4 using default settings.", "answer": {"plan": "play_video", "arguments": {"video_uri": "http://example.com/video.mp4"}}, "unique_idx": "play_video-1439"}
{"query": "Launch my VLC player to play this video at http://videos.example.net/movie.mp4.", "answer": {"plan": "play_video", "arguments": {"video_uri": "http://videos.example.net/movie.mp4", "app": "VLC"}}, "unique_idx": "play_video-1440"}
{"query": "I want to watch a video. Please open the default video app.", "answer": {"plan": "play_video", "arguments": {}}, "unique_idx": "play_video-1441"}
{"query": "Start playing the film on QuickTime.", "answer": {"plan": "play_video", "arguments": {"app": "QuickTime"}}, "unique_idx": "play_video-1442"}
{"query": "Can you play the video from this link: https://media.com/clip.mp4?", "answer": {"plan": "play_video", "arguments": {"video_uri": "https://media.com/clip.mp4"}}, "unique_idx": "play_video-1443"}
{"query": "Play my video using the MX Player.", "answer": {"plan": "play_video", "arguments": {"app": "MX Player"}}, "unique_idx": "play_video-1444"}
{"query": "Help me watch the following video: ftp://files.host/video.mp4 on the default player.", "answer": {"plan": "play_video", "arguments": {"video_uri": "ftp://files.host/video.mp4"}}, "unique_idx": "play_video-1445"}
{"query": "Could you launch a video using the default options?", "answer": {"plan": "play_video", "arguments": {}}, "unique_idx": "play_video-1446"}
{"query": "Play this video file: C:\\Videos\\holiday.mp4, please.", "answer": {"plan": "play_video", "arguments": {"video_uri": "C:\\Videos\\holiday.mp4"}}, "unique_idx": "play_video-1447"}
{"query": "I need to use Windows Media Player to play a video, but I don't have a specific link.", "answer": {"plan": "play_video", "arguments": {"app": "Windows Media Player"}}, "unique_idx": "play_video-1448"}
{"query": "Open the default video player without loading any specific file.", "answer": {"plan": "play_video", "arguments": {}}, "unique_idx": "play_video-1449"}
{"query": "Stream video from https://streaming.site/live.mp4 using MX Player.", "answer": {"plan": "play_video", "arguments": {"video_uri": "https://streaming.site/live.mp4", "app": "MX Player"}}, "unique_idx": "play_video-1450"}
{"query": "Please play the following movie: https://movies.com/avengers.mp4 with my preferred video player, VLC.", "answer": {"plan": "play_video", "arguments": {"video_uri": "https://movies.com/avengers.mp4", "app": "VLC"}}, "unique_idx": "play_video-1451"}
{"query": "Start video playback: load file /home/user/video.mkv via the default player.", "answer": {"plan": "play_video", "arguments": {"video_uri": "/home/user/video.mkv"}}, "unique_idx": "play_video-1452"}
{"query": "Please play the video file located at /home/user/movie.mp4 using the default player.", "answer": {"plan": "play_video", "arguments": {"video_uri": "/home/user/movie.mp4"}}, "unique_idx": "play_video-1453", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Launch the default video player, please.", "answer": {"plan": "play_video", "arguments": {}}, "unique_idx": "play_video-1454", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Could you please play the video at http://example.com/movie.mp4?", "answer": {"plan": "play_video", "arguments": {"video_uri": "http://example.com/movie.mp4"}}, "unique_idx": "play_video-1455", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "I would like to watch the video file C:\\Movies\\action.mp4.", "answer": {"plan": "play_video", "arguments": {"video_uri": "C:\\Movies\\action.mp4"}}, "unique_idx": "play_video-1456", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Start playing the video https://videosite.com/trailer.mp4 on VLC.", "answer": {"plan": "play_video", "arguments": {"video_uri": "https://videosite.com/trailer.mp4", "app": "VLC"}}, "unique_idx": "play_video-1457", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Please open the video located at /mnt/videos/holiday.mp4.", "answer": {"plan": "play_video", "arguments": {"video_uri": "/mnt/videos/holiday.mp4"}}, "unique_idx": "play_video-1458", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "I want to watch a movie using MX Player. The video's URL is http://movies.org/fun.mp4.", "answer": {"plan": "play_video", "arguments": {"video_uri": "http://movies.org/fun.mp4", "app": "MX Player"}}, "unique_idx": "play_video-1459", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Display the default video player now.", "answer": {"plan": "play_video", "arguments": {}}, "unique_idx": "play_video-1460", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Could you stream this clip from http://streaming.net/live.mp4?", "answer": {"plan": "play_video", "arguments": {"video_uri": "http://streaming.net/live.mp4"}}, "unique_idx": "play_video-1461", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Play the following video: /videos/family.mp4 using the default player.", "answer": {"plan": "play_video", "arguments": {"video_uri": "/videos/family.mp4"}}, "unique_idx": "play_video-1462", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "I need to watch my saved video in QuickTime: /Users/me/Videos/clip.mov.", "answer": {"plan": "play_video", "arguments": {"video_uri": "/Users/me/Videos/clip.mov", "app": "QuickTime"}}, "unique_idx": "play_video-1463", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Start streaming the movie from https://cdn.net/movie.mp4, please!", "answer": {"plan": "play_video", "arguments": {"video_uri": "https://cdn.net/movie.mp4"}}, "unique_idx": "play_video-1464", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Initiate the default video application.", "answer": {"plan": "play_video", "arguments": {}}, "unique_idx": "play_video-1465", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Please play my recorded video from D:\\Recordings\\video.mp4.", "answer": {"plan": "play_video", "arguments": {"video_uri": "D:\\Recordings\\video.mp4"}}, "unique_idx": "play_video-1466", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "I want to view the trailer available at https://trailers.com/video.mp4 on MX Player.", "answer": {"plan": "play_video", "arguments": {"video_uri": "https://trailers.com/video.mp4", "app": "MX Player"}}, "unique_idx": "play_video-1467", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Kindly launch the media player and play the video: /home/vids/doc.mp4.", "answer": {"plan": "play_video", "arguments": {"video_uri": "/home/vids/doc.mp4"}}, "unique_idx": "play_video-1468", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Show the video file at /opt/media/clip.mp4 through VLC.", "answer": {"plan": "play_video", "arguments": {"video_uri": "/opt/media/clip.mp4", "app": "VLC"}}, "unique_idx": "play_video-1469", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "I would like to see a video from https://cdn/example.com/show.mp4.", "answer": {"plan": "play_video", "arguments": {"video_uri": "https://cdn/example.com/show.mp4"}}, "unique_idx": "play_video-1470", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Open the video player using the video at /Users/alex/video.avi.", "answer": {"plan": "play_video", "arguments": {"video_uri": "/Users/alex/video.avi"}}, "unique_idx": "play_video-1471", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Can you start playing the video using default settings? The file is located at /data/movies/epic.mp4.", "answer": {"plan": "play_video", "arguments": {"video_uri": "/data/movies/epic.mp4"}}, "unique_idx": "play_video-1472", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Launch my preferred video app: MX Player with this file: http://server.com/media.mp4.", "answer": {"plan": "play_video", "arguments": {"video_uri": "http://server.com/media.mp4", "app": "MX Player"}}, "unique_idx": "play_video-1473", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Begin video playback with no specific file.", "answer": {"plan": "play_video", "arguments": {}}, "unique_idx": "play_video-1474", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Please run the movie using Windows Media Player, file location: C:\\Media\\film.avi.", "answer": {"plan": "play_video", "arguments": {"video_uri": "C:\\Media\\film.avi", "app": "Windows Media Player"}}, "unique_idx": "play_video-1475", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "I want to play a video clip from https://example.com/clip.mp4 with the default player.", "answer": {"plan": "play_video", "arguments": {"video_uri": "https://example.com/clip.mp4"}}, "unique_idx": "play_video-1476", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Could you initiate the default video player for me?", "answer": {"plan": "play_video", "arguments": {}}, "unique_idx": "play_video-1477", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Please play the video located at /videos/unknown.mp4 on QuickTime player.", "answer": {"plan": "play_video", "arguments": {"video_uri": "/videos/unknown.mp4", "app": "QuickTime"}}, "unique_idx": "play_video-1478", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "I need to play the movie from the URL http://movies.example.org/classic.mp4, please.", "answer": {"plan": "play_video", "arguments": {"video_uri": "http://movies.example.org/classic.mp4"}}, "unique_idx": "play_video-1479", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Open the video player and show the video from C:\\Users\\Documents\\video_watching.mp4.", "answer": {"plan": "play_video", "arguments": {"video_uri": "C:\\Users\\Documents\\video_watching.mp4"}}, "unique_idx": "play_video-1480", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Can you launch VLC to play https://firebasestorage.com/video.mp4?", "answer": {"plan": "play_video", "arguments": {"video_uri": "https://firebasestorage.com/video.mp4", "app": "VLC"}}, "unique_idx": "play_video-1481", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Would you start video playback for me? Use the default player for now.", "answer": {"plan": "play_video", "arguments": {}}, "unique_idx": "play_video-1482", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Please play the file located at /var/www/movie.mkv.", "answer": {"plan": "play_video", "arguments": {"video_uri": "/var/www/movie.mkv"}}, "unique_idx": "play_video-1483", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "I want to stream the video from URL https://server.net/stream.mp4 using default settings.", "answer": {"plan": "play_video", "arguments": {"video_uri": "https://server.net/stream.mp4"}}, "unique_idx": "play_video-1484", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Run video playback for me with the file D:\\Videos\\party.mp4 via MX Player.", "answer": {"plan": "play_video", "arguments": {"video_uri": "D:\\Videos\\party.mp4", "app": "MX Player"}}, "unique_idx": "play_video-1485", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Please open a video without specifying any file, just launch the default video player.", "answer": {"plan": "play_video", "arguments": {}}, "unique_idx": "play_video-1486", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Let's watch a movie; here's the link: https://movies.net/2020_hit.mp4. Use VLC to play it.", "answer": {"plan": "play_video", "arguments": {"video_uri": "https://movies.net/2020_hit.mp4", "app": "VLC"}}, "unique_idx": "play_video-1487", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Start the default video application and play the movie from /home/user/watch.mkv.", "answer": {"plan": "play_video", "arguments": {"video_uri": "/home/user/watch.mkv"}}, "unique_idx": "play_video-1488", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Initiate VLC to play this video: C:\\Downloads\\funny_video.mp4.", "answer": {"plan": "play_video", "arguments": {"video_uri": "C:\\Downloads\\funny_video.mp4", "app": "VLC"}}, "unique_idx": "play_video-1489", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "I would appreciate it if you could play a video from the link http://videoarchives.com/clip.avi.", "answer": {"plan": "play_video", "arguments": {"video_uri": "http://videoarchives.com/clip.avi"}}, "unique_idx": "play_video-1490", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Play the video file /srv/videos/exam.mp4 on MX Player if possible.", "answer": {"plan": "play_video", "arguments": {"video_uri": "/srv/videos/exam.mp4", "app": "MX Player"}}, "unique_idx": "play_video-1491", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Can you begin video playback? No file is specified, so just open the default video player.", "answer": {"plan": "play_video", "arguments": {}}, "unique_idx": "play_video-1492", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Could you please launch the YouTube app on my device?", "answer": {"plan": "launch_application", "arguments": {"application_name": "YouTube"}}, "unique_idx": "launch_application-1493"}
{"query": "I want to listen to some music, can you open Spotify for me?", "answer": {"plan": "launch_application", "arguments": {"application_name": "Spotify"}}, "unique_idx": "launch_application-1494"}
{"query": "Open WhatsApp so that I can chat with my friends.", "answer": {"plan": "launch_application", "arguments": {"application_name": "WhatsApp"}}, "unique_idx": "launch_application-1495"}
{"query": "Please launch Google Maps; I need directions to a new restaurant.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Google Maps"}}, "unique_idx": "launch_application-1496"}
{"query": "I need to check my emails, could you please open Gmail?", "answer": {"plan": "launch_application", "arguments": {"application_name": "Gmail"}}, "unique_idx": "launch_application-1497"}
{"query": "Start the Instagram application on my phone.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Instagram"}}, "unique_idx": "launch_application-1498"}
{"query": "Can you kick off the Chrome browser for me?", "answer": {"plan": "launch_application", "arguments": {"application_name": "Chrome"}}, "unique_idx": "launch_application-1499"}
{"query": "Launch the Weather app immediately, I'm curious about today's forecast.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Weather"}}, "unique_idx": "launch_application-1500"}
{"query": "Switch on the Calculator so I can do some quick math.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Calculator"}}, "unique_idx": "launch_application-1501"}
{"query": "Trigger the Calendar application; I need to schedule an important meeting.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Calendar"}}, "unique_idx": "launch_application-1502"}
{"query": "Please start the Facebook app right away.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Facebook"}}, "unique_idx": "launch_application-1503"}
{"query": "I would appreciate it if you could open the Twitter app for me.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Twitter"}}, "unique_idx": "launch_application-1504"}
{"query": "Can you begin the Notes application for some quick jotting?", "answer": {"plan": "launch_application", "arguments": {"application_name": "Notes"}}, "unique_idx": "launch_application-1505"}
{"query": "Make sure to run the Alarm app so I wake up on time.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Alarm"}}, "unique_idx": "launch_application-1506"}
{"query": "Could you launch my file manager? I need to organize some documents.", "answer": {"plan": "launch_application", "arguments": {"application_name": "File Manager"}}, "unique_idx": "launch_application-1507"}
{"query": "Launch the Calculator app so I can crunch some numbers quickly.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Calculator"}}, "unique_idx": "launch_application-1508", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Please open Instagram; I want to check the latest photos.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Instagram"}}, "unique_idx": "launch_application-1509", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Kick off the Notes application so I can jot down a few ideas.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Notes"}}, "unique_idx": "launch_application-1510", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Run the Alarm app for me—I need to set my wake-up time.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Alarm"}}, "unique_idx": "launch_application-1511", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Could you please open Gmail so I can check my inbox?", "answer": {"plan": "launch_application", "arguments": {"application_name": "Gmail"}}, "unique_idx": "launch_application-1512", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Please initiate the Weather app right away; I need to know today's forecast.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Weather"}}, "unique_idx": "launch_application-1513", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Activate Twitter so I can browse the trending topics.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Twitter"}}, "unique_idx": "launch_application-1514", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Kindly fire up Facebook as I want to catch up with my friends.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Facebook"}}, "unique_idx": "launch_application-1515", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "I want to watch some videos; please start the YouTube application.", "answer": {"plan": "launch_application", "arguments": {"application_name": "YouTube"}}, "unique_idx": "launch_application-1516", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Start Spotify so I can listen to some of my favorite tracks.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Spotify"}}, "unique_idx": "launch_application-1517", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Could you launch the Maps app? I need directions to a new restaurant.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Maps"}}, "unique_idx": "launch_application-1518", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Open up the Camera app so I can snap a quick picture.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Camera"}}, "unique_idx": "launch_application-1519", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Activate the Clock application so I can check the time and set a timer.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Clock"}}, "unique_idx": "launch_application-1520", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Help me out by opening my Contacts; I need to make a quick call.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Contacts"}}, "unique_idx": "launch_application-1521", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Please bring up the Calendar app — I want to review today's meetings.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Calendar"}}, "unique_idx": "launch_application-1522", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Run the Files application so I can quickly find some documents.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Files"}}, "unique_idx": "launch_application-1523", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Open Chrome for me, I'd like to do some research online.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Chrome"}}, "unique_idx": "launch_application-1524", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Fire up Reddit since I want to check the latest discussions.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Reddit"}}, "unique_idx": "launch_application-1525", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Launch Messenger so I can start chatting with my colleague.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Messenger"}}, "unique_idx": "launch_application-1526", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Kindly open the Amazon app; I'm interested in browsing some products.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Amazon"}}, "unique_idx": "launch_application-1527", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Please start PayPal so I can make a quick money transfer.", "answer": {"plan": "launch_application", "arguments": {"application_name": "PayPal"}}, "unique_idx": "launch_application-1528", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Initiate LinkedIn, I need to check my professional notifications.", "answer": {"plan": "launch_application", "arguments": {"application_name": "LinkedIn"}}, "unique_idx": "launch_application-1529", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Open Snapchat for me; I'm in the mood to share a quick snap.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Snapchat"}}, "unique_idx": "launch_application-1530", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Could you please launch Pinterest? I need some design inspiration.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Pinterest"}}, "unique_idx": "launch_application-1531", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Start TikTok; I want to see what's trending in short videos.", "answer": {"plan": "launch_application", "arguments": {"application_name": "TikTok"}}, "unique_idx": "launch_application-1532", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Please open eBay so I can check the latest auctions available.", "answer": {"plan": "launch_application", "arguments": {"application_name": "eBay"}}, "unique_idx": "launch_application-1533", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Open WhatsApp immediately; I need to message my family.", "answer": {"plan": "launch_application", "arguments": {"application_name": "WhatsApp"}}, "unique_idx": "launch_application-1534", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Could you fire up Skype? I have an important call coming in.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Skype"}}, "unique_idx": "launch_application-1535", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "I need to join my online meeting – please launch Zoom.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Zoom"}}, "unique_idx": "launch_application-1536", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Run the Viber application so I can speak with my overseas contacts.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Viber"}}, "unique_idx": "launch_application-1537", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "I require access to my emails; please open Outlook.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Outlook"}}, "unique_idx": "launch_application-1538", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Launch the Word app so I can work on my document.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Word"}}, "unique_idx": "launch_application-1539", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Open Excel for me; I need to review some spreadsheets.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Excel"}}, "unique_idx": "launch_application-1540", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Could you start PowerPoint? I’m prepping for a presentation.", "answer": {"plan": "launch_application", "arguments": {"application_name": "PowerPoint"}}, "unique_idx": "launch_application-1541", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "I feel like watching a movie; please start Netflix for me.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Netflix"}}, "unique_idx": "launch_application-1542", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Run Hulu so I can catch up on my favorite TV series.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Hulu"}}, "unique_idx": "launch_application-1543", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Activate Shazam; I want to identify the song playing in the background.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Shazam"}}, "unique_idx": "launch_application-1544", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Launch Tinder as I'm looking to check out new profiles.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Tinder"}}, "unique_idx": "launch_application-1545", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "I need a ride—please open the Uber app immediately.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Uber"}}, "unique_idx": "launch_application-1546", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Could you please start Lyft? I'd like to book a cab now.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Lyft"}}, "unique_idx": "launch_application-1547", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Please open the document at content://documents/doc/123 for editing.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://documents/doc/123"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1548"}
{"query": "Edit my document located at content://files/doc/456 and pre-populate it with 'Important updates required'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://files/doc/456", "content": "Important updates required"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1549"}
{"query": "I want to revise the document from content://docs/doc/789. Could you add 'Draft version approved' as the starting content?", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/doc/789", "content": "Draft version approved"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1550"}
{"query": "Open up document content://documents/doc/321 for me to modify.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://documents/doc/321"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1551"}
{"query": "Can you edit the content at content://docs/notes/654? Please pre-fill it with 'Meeting notes: discuss quarterly targets'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/notes/654", "content": "Meeting notes: discuss quarterly targets"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1552"}
{"query": "Take a look at the file at content://data/doc/111 and insert the text 'Revised draft version'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://data/doc/111", "content": "Revised draft version"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1553"}
{"query": "I need to update the document content at content://files/reports/789. Please add 'Final adjustments' to the document.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://files/reports/789", "content": "Final adjustments"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1554"}
{"query": "Open content://workspace/doc/202 for editing. I don't need any prepended text.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://workspace/doc/202"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1555"}
{"query": "Modify document content://archive/doc/333 by pre-inserting 'Archival update pending'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://archive/doc/333", "content": "Archival update pending"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1556"}
{"query": "Could you launch editing mode for the document at content://documents/updates/555 with the pre-filled content: 'Update timeline soon'?", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://documents/updates/555", "content": "Update timeline soon"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1557"}
{"query": "Need to work on my note at content://mynotes/doc/777, no additional text required.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://mynotes/doc/777"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1558"}
{"query": "Please amend the document at content://docs/reports/888 and set 'Revised by manager' as starting text.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/reports/888", "content": "Revised by manager"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1559"}
{"query": "I'm aiming to revise the content stored at content://workspace/letters/999. Insert the edit note 'Please review changes'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://workspace/letters/999", "content": "Please review changes"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1560"}
{"query": "Could you access the document at content://docs/drafts/101 and make it editable?", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/drafts/101"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1561"}
{"query": "Kindly re-open the file at content://files/notes/2020. Begin with the phrase 'Updated version'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://files/notes/2020", "content": "Updated version"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1562"}
{"query": "Please edit the document at content://files/report/100 and pre-fill it with 'Initial draft'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://files/report/100", "content": "Initial draft"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1563", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Open content://docs/guide/101 for modification.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/guide/101"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1564", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Can you allow editing for the document at content://documents/doc/202 and set the content to 'Revised outline'?", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://documents/doc/202", "content": "Revised outline"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1565", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Access content://workspace/notes/303 for me so I can update it. No text required.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://workspace/notes/303"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1566", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Kindly modify the document found at content://records/entry/404 with initial text 'Log entry updated'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://records/entry/404", "content": "Log entry updated"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1567", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Could you open the file at content://library/articles/505 and load 'Article draft v2' into it?", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://library/articles/505", "content": "Article draft v2"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1568", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Please launch an editor for content://archive/memo/606, with a preloaded message: 'Confidential memo'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://archive/memo/606", "content": "Confidential memo"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1569", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Edit document at content://docs/drafts/707 with default starting phrase 'Draft changes'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/drafts/707", "content": "Draft changes"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1570", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Activate edit mode on content://projects/plans/808 and set up with text 'Project plan review'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://projects/plans/808", "content": "Project plan review"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1571", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "I need to update content://reports/summary/909. No changes to prefill.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://reports/summary/909"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1572", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Launch editing of the file at content://files/drafts/111 with initial note 'Needs revision'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://files/drafts/111", "content": "Needs revision"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1573", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Make content://docs/revisions/222 editable, and pre-fill with 'Version 1.1'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/revisions/222", "content": "Version 1.1"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1574", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Open document content://workspace/updates/333 for update. Initial content: 'Latest updates inside'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://workspace/updates/333", "content": "Latest updates inside"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1575", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Could you start editing at content://archive/docs/444? I would like it pre-populated with 'Archived revision'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://archive/docs/444", "content": "Archived revision"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1576", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "I want to modify content://records/report/555, no additional note.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://records/report/555"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1577", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Open the document at content://docs/notifications/666 and insert 'Alert: check pending items'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/notifications/666", "content": "Alert: check pending items"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1578", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Edit the file located at content://library/notes/777; begin with 'Note update'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://library/notes/777", "content": "Note update"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1579", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Can you make content://workspace/manuals/888 available for editing, prefill it with 'Check user manual'?", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://workspace/manuals/888", "content": "Check user manual"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1580", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Please re-open content://projects/documents/999 for editing with 'Project blueprint' as content.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://projects/documents/999", "content": "Project blueprint"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1581", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Initiate edit mode for the document at content://files/reports/121, no prefill text needed.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://files/reports/121"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1582", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Could you modify content://docs/plan/131 and include 'Plan revision Q3' as starting text?", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/plan/131", "content": "Plan revision Q3"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1583", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Open up content://archive/records/141 for editing, no prefilled content.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://archive/records/141"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1584", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Please change content://workspace/notes/151, initially load 'Meeting agenda' in it.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://workspace/notes/151", "content": "Meeting agenda"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1585", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Access document content://documents/brief/161 for editing. 'Executive summary' should be inserted.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://documents/brief/161", "content": "Executive summary"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1586", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "I'd like to revise the document at content://files/summaries/171. Start editing without preset content.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://files/summaries/171"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1587", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Open up content://docs/reports/181 and insert the text 'Budget update' prior to editing.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/reports/181", "content": "Budget update"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1588", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Kindly enable editing for content://workspace/presentations/191 and pre-populate with 'Intro slide'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://workspace/presentations/191", "content": "Intro slide"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1589", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Can you launch the editor for the file at content://library/articles/202? No default text necessary.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://library/articles/202"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1590", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Please access content://projects/outline/212 for modifications, prefill with 'Updated outline format'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://projects/outline/212", "content": "Updated outline format"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1591", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Could you allow editing on content://docs/memo/222? Please add the note 'Confidential memo update'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/memo/222", "content": "Confidential memo update"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1592", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Initiate editing for the document located at content://archives/document/232 with initial content 'Legal document draft'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://archives/document/232", "content": "Legal document draft"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1593", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Open content://reports/analysis/242 for changes; no pre-insert content is required.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://reports/analysis/242"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1594", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "I need to edit the file at content://workspace/edits/252. Begin with 'Operational edits in progress'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://workspace/edits/252", "content": "Operational edits in progress"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1595", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Activate modification mode on content://docs/archives/262, with 'Historical revisions' as starting text.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/archives/262", "content": "Historical revisions"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1596", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Start editing the document at content://files/update/272, without any prefabricated text.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://files/update/272"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1597", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Could you let me edit content://workspace/plans/282? Insert 'Strategy draft' as the initial content.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://workspace/plans/282", "content": "Strategy draft"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1598", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Kindly open content://archive/notes/292 for editing. No initial content provided, just open it.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://archive/notes/292"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1599", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Please make the file at content://reports/status/303 editable, with 'Status report draft' pre-pended.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://reports/status/303", "content": "Status report draft"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1600", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "I require editing for the document located at content://docs/summaries/313. Load it with 'Summary for review'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/summaries/313", "content": "Summary for review"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1601", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Would you please open content://files/updates/323 to edit? No content preset.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://files/updates/323"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-1602", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Can you set my new ringtone to content://media/ringtone01? I love that tune!", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone01"}}, "unique_idx": "ACTION_SET_RINGTONE-1603"}
{"query": "Please update my phone's ringtone to content://media/ringtone02.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone02"}}, "unique_idx": "ACTION_SET_RINGTONE-1604"}
{"query": "Change my default ringtone to content://media/ringtone03 right away.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone03"}}, "unique_idx": "ACTION_SET_RINGTONE-1605"}
{"query": "I've got a new ringtone I want to use; set it to content://media/ringtone04.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone04"}}, "unique_idx": "ACTION_SET_RINGTONE-1606"}
{"query": "Would you please change the incoming call sound to content://media/ringtone05?", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone05"}}, "unique_idx": "ACTION_SET_RINGTONE-1607"}
{"query": "I'm tired of my current tone, assign content://media/ringtone06 as my new ringtone.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone06"}}, "unique_idx": "ACTION_SET_RINGTONE-1608"}
{"query": "Switch my ringtone to the audio file at content://media/ringtone07 immediately.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone07"}}, "unique_idx": "ACTION_SET_RINGTONE-1609"}
{"query": "I need a new ringback sound; please configure my device with content://media/ringtone08 as the ringtone.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone08"}}, "unique_idx": "ACTION_SET_RINGTONE-1610"}
{"query": "Kindly set the ringtone on my device to content://media/ringtone09.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone09"}}, "unique_idx": "ACTION_SET_RINGTONE-1611"}
{"query": "Update ringtone: I prefer the sound at content://media/ringtone10.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone10"}}, "unique_idx": "ACTION_SET_RINGTONE-1612"}
{"query": "Hey, can you change my phone's ringtone to content://media/ringtone11?", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone11"}}, "unique_idx": "ACTION_SET_RINGTONE-1613"}
{"query": "Please assign content://media/ringtone12 as the default alert sound for incoming calls.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone12"}}, "unique_idx": "ACTION_SET_RINGTONE-1614"}
{"query": "I want my ringtone updated. Use content://media/ringtone13 for my incoming call sound.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone13"}}, "unique_idx": "ACTION_SET_RINGTONE-1615"}
{"query": "Switch my phone's ringtone to content://media/ringtone14 so I can hear it clearly.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone14"}}, "unique_idx": "ACTION_SET_RINGTONE-1616"}
{"query": "Set the system's ringtone to content://media/ringtone15, thanks.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone15"}}, "unique_idx": "ACTION_SET_RINGTONE-1617"}
{"query": "Switch the sound for incoming calls to content://media/ringtone12.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone12"}}, "unique_idx": "ACTION_SET_RINGTONE-1618", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Set a new ringtone from content://media/ringtone14 on my device.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone14"}}, "unique_idx": "ACTION_SET_RINGTONE-1619", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Can you update my ringtone using content://media/ringtone16?", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone16"}}, "unique_idx": "ACTION_SET_RINGTONE-1620", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Could you please help me change the tone to content://media/ringtone18?", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone18"}}, "unique_idx": "ACTION_SET_RINGTONE-1621", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "I need to use content://media/ringtone20 as my ringtone.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone20"}}, "unique_idx": "ACTION_SET_RINGTONE-1622", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Adjust my incoming call sound to be content://media/ringtone13 now.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone13"}}, "unique_idx": "ACTION_SET_RINGTONE-1623", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Replace my current ringtone with content://media/ringtone01 please.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone01"}}, "unique_idx": "ACTION_SET_RINGTONE-1624", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Would you make my phone ring with content://media/ringtone03?", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone03"}}, "unique_idx": "ACTION_SET_RINGTONE-1625", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Set the ringtone for my device to content://media/ringtone07 as soon as possible.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone07"}}, "unique_idx": "ACTION_SET_RINGTONE-1626", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Change the device ringtone using the audio file at content://media/ringtone09.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone09"}}, "unique_idx": "ACTION_SET_RINGTONE-1627", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Quickly update my ringtone to content://media/ringtone11.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone11"}}, "unique_idx": "ACTION_SET_RINGTONE-1628", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Switch my device sound to content://media/ringtone02.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone02"}}, "unique_idx": "ACTION_SET_RINGTONE-1629", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Set my phone's notification bell to content://media/ringtone17.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone17"}}, "unique_idx": "ACTION_SET_RINGTONE-1630", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "I'm switching to the ringtone found at content://media/ringtone04.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone04"}}, "unique_idx": "ACTION_SET_RINGTONE-1631", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Please replace the ringing tone with content://media/ringtone19.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone19"}}, "unique_idx": "ACTION_SET_RINGTONE-1632", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "I prefer a new ringtone, switch it to content://media/ringtone06 right away.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone06"}}, "unique_idx": "ACTION_SET_RINGTONE-1633", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Alter the incoming call sound to content://media/ringtone08 as soon as you can.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone08"}}, "unique_idx": "ACTION_SET_RINGTONE-1634", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "I'd like you to change my phone's ring to content://media/ringtone12.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone12"}}, "unique_idx": "ACTION_SET_RINGTONE-1635", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Reassign my default call tone to content://media/ringtone10.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone10"}}, "unique_idx": "ACTION_SET_RINGTONE-1636", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "I want to update my phone’s ringtone; please set it to content://media/ringtone16.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone16"}}, "unique_idx": "ACTION_SET_RINGTONE-1637", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Make my device ring with the sound at content://media/ringtone18.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone18"}}, "unique_idx": "ACTION_SET_RINGTONE-1638", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Please change the phone's ringtone to content://media/ringtone20 at your earliest convenience.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone20"}}, "unique_idx": "ACTION_SET_RINGTONE-1639", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "I'd appreciate it if you change my ringtone to content://media/ringtone13.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone13"}}, "unique_idx": "ACTION_SET_RINGTONE-1640", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "New ringtone alert: shift my ring tone to content://media/ringtone01.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone01"}}, "unique_idx": "ACTION_SET_RINGTONE-1641", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Can you set my ringtone as content://media/ringtone05?", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone05"}}, "unique_idx": "ACTION_SET_RINGTONE-1642", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Update device sound, set ringtone to content://media/ringtone07.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone07"}}, "unique_idx": "ACTION_SET_RINGTONE-1643", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "I require that my call tone be updated to content://media/ringtone11.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone11"}}, "unique_idx": "ACTION_SET_RINGTONE-1644", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Change the ringtone to use file content://media/ringtone02.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone02"}}, "unique_idx": "ACTION_SET_RINGTONE-1645", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Please assign the new call sound from content://media/ringtone15.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone15"}}, "unique_idx": "ACTION_SET_RINGTONE-1646", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Help me set a new ringtone by using the file content://media/ringtone19.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone19"}}, "unique_idx": "ACTION_SET_RINGTONE-1647", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "I want to use content://media/ringtone02 as my incoming call tone.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone02"}}, "unique_idx": "ACTION_SET_RINGTONE-1648", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Please replace my ringtone with the track located at content://media/ringtone04 immediately.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone04"}}, "unique_idx": "ACTION_SET_RINGTONE-1649", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Set my new alert tone to content://media/ringtone05.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone05"}}, "unique_idx": "ACTION_SET_RINGTONE-1650", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Update my ringtone to content://media/ringtone06 since I'm tired of the old one.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone06"}}, "unique_idx": "ACTION_SET_RINGTONE-1651", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Could you assign content://media/ringtone07 as my ringtone for incoming calls?", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone07"}}, "unique_idx": "ACTION_SET_RINGTONE-1652", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Switch the ringtone of my device to content://media/ringtone08 now, please.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone08"}}, "unique_idx": "ACTION_SET_RINGTONE-1653", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Make the track found at content://media/ringtone09 my new ringtone.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone09"}}, "unique_idx": "ACTION_SET_RINGTONE-1654", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "I got a new ringtone at content://media/ringtone10, set it please.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone10"}}, "unique_idx": "ACTION_SET_RINGTONE-1655", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Set default ringtone as content://media/ringtone11 for all calls.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone11"}}, "unique_idx": "ACTION_SET_RINGTONE-1656", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Please update my phone to play content://media/ringtone12 when someone calls.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone12"}}, "unique_idx": "ACTION_SET_RINGTONE-1657", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Change the ringtone to the one at content://media/ringtone13.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone13"}}, "unique_idx": "ACTION_SET_RINGTONE-1658", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "I would like to change my call alert to content://media/ringtone14.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone14"}}, "unique_idx": "ACTION_SET_RINGTONE-1659", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Switch my ringtone, I prefer content://media/ringtone16.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone16"}}, "unique_idx": "ACTION_SET_RINGTONE-1660", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "I would like to have a new ringer sound at content://media/ringtone18.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone18"}}, "unique_idx": "ACTION_SET_RINGTONE-1661", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Please use content://media/ringtone19 as my incoming call ringtone.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone19"}}, "unique_idx": "ACTION_SET_RINGTONE-1662", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Assign content://media/ringtone20 as my phone's ringtone as early as possible.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone20"}}, "unique_idx": "ACTION_SET_RINGTONE-1663", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Change my call tone to content://media/ringtone03, attention please.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone03"}}, "unique_idx": "ACTION_SET_RINGTONE-1664", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Please make my phone ring using the sound file at content://media/ringtone04.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone04"}}, "unique_idx": "ACTION_SET_RINGTONE-1665", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Your assistance is needed to change my ringtone to content://media/ringtone06.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone06"}}, "unique_idx": "ACTION_SET_RINGTONE-1666", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "I require the audio file at content://media/ringtone07 to be set as my ringtone.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone07"}}, "unique_idx": "ACTION_SET_RINGTONE-1667", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Update my phone's incoming call sound to content://media/ringtone09.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone09"}}, "unique_idx": "ACTION_SET_RINGTONE-1668", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Please apply content://media/ringtone10 as the default ringtone for my phone.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone10"}}, "unique_idx": "ACTION_SET_RINGTONE-1669", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "I want my calls to ring with content://media/ringtone12, please set it.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone12"}}, "unique_idx": "ACTION_SET_RINGTONE-1670", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "I fancy the ringtone content://media/ringtone14, kindly assign it to incoming calls.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone14"}}, "unique_idx": "ACTION_SET_RINGTONE-1671", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Set content://media/ringtone15 as my phone's alert sound.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone15"}}, "unique_idx": "ACTION_SET_RINGTONE-1672", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Please change my ringtone to content://media/ringtone16 immediately.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone16"}}, "unique_idx": "ACTION_SET_RINGTONE-1673", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Alter my ring tone to content://media/ringtone19 as soon as you can.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone19"}}, "unique_idx": "ACTION_SET_RINGTONE-1674", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Would you please enable content://media/ringtone20 as the ring sound for my calls?", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone20"}}, "unique_idx": "ACTION_SET_RINGTONE-1675", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Could you modify my alarm with id 1 so that it rings at 7:30 AM and displays the label 'Wake up'?", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 1, "EXTRA_HOUR": 7, "EXTRA_MINUTES": 30, "EXTRA_MESSAGE": "Wake up"}}, "unique_idx": "ACTION_EDIT_ALARM-1676"}
{"query": "Please update alarm with id 3 to ring at 22:15 and disable vibration.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 3, "EXTRA_HOUR": 22, "EXTRA_MINUTES": 15, "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_EDIT_ALARM-1677"}
{"query": "I want to change alarm 5 to go off at 5:00 AM and add the note 'Gym time'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 5, "EXTRA_HOUR": 5, "EXTRA_MINUTES": 0, "EXTRA_MESSAGE": "Gym time"}}, "unique_idx": "ACTION_EDIT_ALARM-1678"}
{"query": "Edit my alarm with id 7 so that it rings at 9:20 PM with the message 'Dinner Time', and set it to repeat every day.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 7, "EXTRA_HOUR": 21, "EXTRA_MINUTES": 20, "EXTRA_MESSAGE": "Dinner Time", "EXTRA_DAYS": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]}}, "unique_idx": "ACTION_EDIT_ALARM-1679"}
{"query": "Can you change my alarm with id 10 to ring at 12:05 PM?", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 10, "EXTRA_HOUR": 12, "EXTRA_MINUTES": 5}}, "unique_idx": "ACTION_EDIT_ALARM-1680"}
{"query": "I need to modify alarm 4 so that it rings at 18:50, uses the ringtone at 'ringtone://unique', and doesn't show the confirmation UI.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 4, "EXTRA_HOUR": 18, "EXTRA_MINUTES": 50, "EXTRA_RINGTONE": "ringtone://unique", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_EDIT_ALARM-1681"}
{"query": "Update my alarm with id 8 to 3:30 in the afternoon, set it to repeat on weekends (Saturday and Sunday), and ensure vibration is enabled.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 8, "EXTRA_HOUR": 15, "EXTRA_MINUTES": 30, "EXTRA_DAYS": ["Saturday", "Sunday"], "EXTRA_VIBRATE": true}}, "unique_idx": "ACTION_EDIT_ALARM-1682"}
{"query": "Please set alarm 12 to ring at 06:00 with the label 'Meeting' and turn off vibration.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 12, "EXTRA_HOUR": 6, "EXTRA_MINUTES": 0, "EXTRA_MESSAGE": "Meeting", "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_EDIT_ALARM-1683"}
{"query": "Adjust alarm id 9 to go off at 11:45 PM and remove any repeat days settings.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 9, "EXTRA_HOUR": 23, "EXTRA_MINUTES": 45, "EXTRA_DAYS": []}}, "unique_idx": "ACTION_EDIT_ALARM-1684"}
{"query": "Change alarm number 6 to 7:10 AM, set its label to 'Workout', and configure it to repeat on Monday, Wednesday, and Friday.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 6, "EXTRA_HOUR": 7, "EXTRA_MINUTES": 10, "EXTRA_MESSAGE": "Workout", "EXTRA_DAYS": ["Monday", "Wednesday", "Friday"]}}, "unique_idx": "ACTION_EDIT_ALARM-1685"}
{"query": "Modify alarm 15 so that it rings at 00:30 and bypass the clock app UI by setting automatic confirmation.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 15, "EXTRA_HOUR": 0, "EXTRA_MINUTES": 30, "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_EDIT_ALARM-1686"}
{"query": "Revise the alarm with id 11 to sound at 14:25 and include a note saying 'Lunch reminder'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 11, "EXTRA_HOUR": 14, "EXTRA_MINUTES": 25, "EXTRA_MESSAGE": "Lunch reminder"}}, "unique_idx": "ACTION_EDIT_ALARM-1687"}
{"query": "Switch my alarm with id 13 to 7:00 PM and set it to use the ringtone from 'sound://alert'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 13, "EXTRA_HOUR": 19, "EXTRA_MINUTES": 0, "EXTRA_RINGTONE": "sound://alert"}}, "unique_idx": "ACTION_EDIT_ALARM-1688"}
{"query": "Could you please update alarm 14 so that it rings at 8:35 AM with the message 'School', and make it repeat on weekdays?", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 14, "EXTRA_HOUR": 8, "EXTRA_MINUTES": 35, "EXTRA_MESSAGE": "School", "EXTRA_DAYS": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]}}, "unique_idx": "ACTION_EDIT_ALARM-1689"}
{"query": "Would you modify alarm id 20 to go off at 16:40 and prevent the clock UI from showing, while keeping the default message?", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 20, "EXTRA_HOUR": 16, "EXTRA_MINUTES": 40, "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_EDIT_ALARM-1690"}
{"query": "Please adjust alarm 1 to ring at 07:00 and set the label to 'Wake Up'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 1, "EXTRA_HOUR": 7, "EXTRA_MINUTES": 0, "EXTRA_MESSAGE": "Wake Up"}}, "unique_idx": "ACTION_EDIT_ALARM-1691", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Modify my alarm no. 2 so that it rings at 8:30 AM with the notification 'Breakfast time'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 2, "EXTRA_HOUR": 8, "EXTRA_MINUTES": 30, "EXTRA_MESSAGE": "Breakfast time"}}, "unique_idx": "ACTION_EDIT_ALARM-1692", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "I need alarm 3 changed to 22:45 and want the vibration turned off.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 3, "EXTRA_HOUR": 22, "EXTRA_MINUTES": 45, "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_EDIT_ALARM-1693", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Switch the settings for alarm id 4: set it to 6:15 AM and give it the label 'School'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 4, "EXTRA_HOUR": 6, "EXTRA_MINUTES": 15, "EXTRA_MESSAGE": "School"}}, "unique_idx": "ACTION_EDIT_ALARM-1694", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Update alarm 5 to go off at 9:50 AM with the title 'Meeting Alert' and disable the clock app's UI confirmation.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 5, "EXTRA_HOUR": 9, "EXTRA_MINUTES": 50, "EXTRA_MESSAGE": "Meeting Alert", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_EDIT_ALARM-1695", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Change alarm number 6 to ring at 7:05 AM and repeat on Monday and Friday.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 6, "EXTRA_HOUR": 7, "EXTRA_MINUTES": 5, "EXTRA_DAYS": ["Monday", "Friday"]}}, "unique_idx": "ACTION_EDIT_ALARM-1696", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Alter alarm 7 to trigger at 20:20 with the label 'Dinner' and ensure the vibration is on.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 7, "EXTRA_HOUR": 20, "EXTRA_MINUTES": 20, "EXTRA_MESSAGE": "Dinner", "EXTRA_VIBRATE": true}}, "unique_idx": "ACTION_EDIT_ALARM-1697", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Set alarm id 8 to ring at 12:10 PM with the reminder 'Lunch time' and have it repeat on Tuesday and Thursday.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 8, "EXTRA_HOUR": 12, "EXTRA_MINUTES": 10, "EXTRA_MESSAGE": "Lunch time", "EXTRA_DAYS": ["Tuesday", "Thursday"]}}, "unique_idx": "ACTION_EDIT_ALARM-1698", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Please modify alarm 9 so that it sounds at 18:00 using the ringtone located at 'ringtone://classic'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 9, "EXTRA_HOUR": 18, "EXTRA_MINUTES": 0, "EXTRA_RINGTONE": "ringtone://classic"}}, "unique_idx": "ACTION_EDIT_ALARM-1699", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Revise alarm 10 to trigger at 5:30 AM with the label 'Jogging' and disable vibration.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 10, "EXTRA_HOUR": 5, "EXTRA_MINUTES": 30, "EXTRA_MESSAGE": "Jogging", "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_EDIT_ALARM-1700", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Edit alarm id 11 to change its time to 23:15 and tag it with 'Late Night'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 11, "EXTRA_HOUR": 23, "EXTRA_MINUTES": 15, "EXTRA_MESSAGE": "Late Night"}}, "unique_idx": "ACTION_EDIT_ALARM-1701", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Please update alarm 12 to 11:55 PM and bypass the confirmation UI.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 12, "EXTRA_HOUR": 23, "EXTRA_MINUTES": 55, "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_EDIT_ALARM-1702", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Can you set alarm number 13 to 10:00 AM, label it 'Weekend Alarm', and have it repeat on Saturdays and Sundays?", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 13, "EXTRA_HOUR": 10, "EXTRA_MINUTES": 0, "EXTRA_MESSAGE": "Weekend Alarm", "EXTRA_DAYS": ["Saturday", "Sunday"]}}, "unique_idx": "ACTION_EDIT_ALARM-1703", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "I want alarm 14 reconfigured to ring at 03:20 without any additional message.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 14, "EXTRA_HOUR": 3, "EXTRA_MINUTES": 20}}, "unique_idx": "ACTION_EDIT_ALARM-1704", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Update alarm id 15 for a 2:45 PM alert with the title 'Office' and enable vibration.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 15, "EXTRA_HOUR": 14, "EXTRA_MINUTES": 45, "EXTRA_MESSAGE": "Office", "EXTRA_VIBRATE": true}}, "unique_idx": "ACTION_EDIT_ALARM-1705", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Change alarm 16 to trigger at 11:00 AM.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 16, "EXTRA_HOUR": 11, "EXTRA_MINUTES": 0}}, "unique_idx": "ACTION_EDIT_ALARM-1706", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Switch my alarm with id 17 to 21:30 and label it as 'Evening Medication'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 17, "EXTRA_HOUR": 21, "EXTRA_MINUTES": 30, "EXTRA_MESSAGE": "Evening Medication"}}, "unique_idx": "ACTION_EDIT_ALARM-1707", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Set alarm 18 to ring at 4:40 AM and have it repeat from Monday to Friday.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 18, "EXTRA_HOUR": 4, "EXTRA_MINUTES": 40, "EXTRA_DAYS": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]}}, "unique_idx": "ACTION_EDIT_ALARM-1708", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Modify alarm #19 so that it rings at 16:10 with the note 'Pick up kids'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 19, "EXTRA_HOUR": 16, "EXTRA_MINUTES": 10, "EXTRA_MESSAGE": "Pick up kids"}}, "unique_idx": "ACTION_EDIT_ALARM-1709", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Revise alarm 20 to ring at 6:50 AM and disable vibration.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 20, "EXTRA_HOUR": 6, "EXTRA_MINUTES": 50, "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_EDIT_ALARM-1710", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Please alter alarm 21 to ring at 03:05 AM and set its label to 'Early Shift'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 21, "EXTRA_HOUR": 3, "EXTRA_MINUTES": 5, "EXTRA_MESSAGE": "Early Shift"}}, "unique_idx": "ACTION_EDIT_ALARM-1711", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Can you change alarm number 22 to ring at 15:35 and disable vibrations for it?", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 22, "EXTRA_HOUR": 15, "EXTRA_MINUTES": 35, "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_EDIT_ALARM-1712", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Reconfigure alarm id 23 to ring at 7:45 AM, add the note 'Yoga', and set it to repeat every day of the week.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 23, "EXTRA_HOUR": 7, "EXTRA_MINUTES": 45, "EXTRA_MESSAGE": "Yoga", "EXTRA_DAYS": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]}}, "unique_idx": "ACTION_EDIT_ALARM-1713", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "I need to change alarm 24 so that it rings at 13:25 with the ringtone 'ringtone://pop'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 24, "EXTRA_HOUR": 13, "EXTRA_MINUTES": 25, "EXTRA_RINGTONE": "ringtone://pop"}}, "unique_idx": "ACTION_EDIT_ALARM-1714", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Can you modify alarm id 25 to ring at 10:15 with the label 'Team Standup'?", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 25, "EXTRA_HOUR": 10, "EXTRA_MINUTES": 15, "EXTRA_MESSAGE": "Team Standup"}}, "unique_idx": "ACTION_EDIT_ALARM-1715", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Adjust alarm number 26 to go off at 1:30 AM, label it 'Backup', and turn off vibration.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 26, "EXTRA_HOUR": 1, "EXTRA_MINUTES": 30, "EXTRA_MESSAGE": "Backup", "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_EDIT_ALARM-1716", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Alter alarm 27 so that it rings at 17:50 with a custom ringtone 'ringtone://rock' and bypass the clock UI.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 27, "EXTRA_HOUR": 17, "EXTRA_MINUTES": 50, "EXTRA_RINGTONE": "ringtone://rock", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_EDIT_ALARM-1717", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Set alarm id 28 to ring exactly at midnight (00:00) with no extra note.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 28, "EXTRA_HOUR": 0, "EXTRA_MINUTES": 0}}, "unique_idx": "ACTION_EDIT_ALARM-1718", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Change the schedule for alarm 29 to 18:30 and update its message to 'Dinner Prep'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 29, "EXTRA_HOUR": 18, "EXTRA_MINUTES": 30, "EXTRA_MESSAGE": "Dinner Prep"}}, "unique_idx": "ACTION_EDIT_ALARM-1719", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "I want my alarm 30 modified to ring at 9:05 AM and ensure it has vibration enabled.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 30, "EXTRA_HOUR": 9, "EXTRA_MINUTES": 5, "EXTRA_VIBRATE": true}}, "unique_idx": "ACTION_EDIT_ALARM-1720", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Revamp alarm 31: reset it to 20:00, assign the label 'Night Routine', and set it to repeat on Saturdays.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 31, "EXTRA_HOUR": 20, "EXTRA_MINUTES": 0, "EXTRA_MESSAGE": "Night Routine", "EXTRA_DAYS": ["Saturday"]}}, "unique_idx": "ACTION_EDIT_ALARM-1721", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Please update alarm number 32 to 4:55 AM and switch off its vibration.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 32, "EXTRA_HOUR": 4, "EXTRA_MINUTES": 55, "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_EDIT_ALARM-1722", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Could you modify alarm 33 so that it rings at 11:40 AM with no repeating days?", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 33, "EXTRA_HOUR": 11, "EXTRA_MINUTES": 40}}, "unique_idx": "ACTION_EDIT_ALARM-1723", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Change alarm 34 to ring at 15:15 and use the ringtone 'ringtone://jazz'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 34, "EXTRA_HOUR": 15, "EXTRA_MINUTES": 15, "EXTRA_RINGTONE": "ringtone://jazz"}}, "unique_idx": "ACTION_EDIT_ALARM-1724", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Modify my alarm with id 35 to trigger at 12:35 and set the note 'Lunch Meeting' while skipping the UI popup.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 35, "EXTRA_HOUR": 12, "EXTRA_MINUTES": 35, "EXTRA_MESSAGE": "Lunch Meeting", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_EDIT_ALARM-1725", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Set alarm number 36 for 8:05 AM and have it repeat only on Wednesday.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 36, "EXTRA_HOUR": 8, "EXTRA_MINUTES": 5, "EXTRA_DAYS": ["Wednesday"]}}, "unique_idx": "ACTION_EDIT_ALARM-1726", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Revise alarm 37 to 1:45 PM with the label 'Post-Lunch' and make sure vibration is active.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 37, "EXTRA_HOUR": 13, "EXTRA_MINUTES": 45, "EXTRA_MESSAGE": "Post-Lunch", "EXTRA_VIBRATE": true}}, "unique_idx": "ACTION_EDIT_ALARM-1727", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Adjust alarm 38 so that it alerts at 2:20 AM and repeats on Friday and Sunday.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 38, "EXTRA_HOUR": 2, "EXTRA_MINUTES": 20, "EXTRA_DAYS": ["Friday", "Sunday"]}}, "unique_idx": "ACTION_EDIT_ALARM-1728", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Please edit alarm id 39 to ring at 7:00 PM with the message 'Evening Workout' and turn off vibration.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 39, "EXTRA_HOUR": 19, "EXTRA_MINUTES": 0, "EXTRA_MESSAGE": "Evening Workout", "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_EDIT_ALARM-1729", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Switch alarm 40 to a new time of 16:00, leaving all other settings unchanged.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 40, "EXTRA_HOUR": 16, "EXTRA_MINUTES": 0}}, "unique_idx": "ACTION_EDIT_ALARM-1730", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "I have a video at content://videos/trailer.mp4. Could you trim it so that it only plays from 10 seconds to 50 seconds?", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/trailer.mp4", "edit_options": {"start_time": 10000, "end_time": 50000}}}, "unique_idx": "ACTION_EDIT_VIDEO-1731"}
{"query": "Please open the video at content://videos/wedding001.mp4 in editor mode so I can work on it manually.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/wedding001.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-1732"}
{"query": "Can you load the video located at content://videos/interview.mp4 and mute its audio?", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/interview.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-1733"}
{"query": "Load up the video at content://media/summer_vacation.mp4 for editing so I can make some modifications.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://media/summer_vacation.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-1734"}
{"query": "Could you open content://videos/music_video.mp4 and trim it so that only the first minute plays?", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/music_video.mp4", "edit_options": {"start_time": 0, "end_time": 60000}}}, "unique_idx": "ACTION_EDIT_VIDEO-1735"}
{"query": "Edit this clip for me: content://videos/dance.mp4. I need the audio removed, so please mute the video.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/dance.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-1736"}
{"query": "I need to cut my video at content://videos/comedy_show.mp4 to display only the segment from 2 minutes 15 seconds to 5 minutes. Can you do that?", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/comedy_show.mp4", "edit_options": {"start_time": 135000, "end_time": 300000}}}, "unique_idx": "ACTION_EDIT_VIDEO-1737"}
{"query": "Bring up the video at content://videos/sport_match.mp4 for manual editing.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/sport_match.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-1738"}
{"query": "Open content://videos/documentary.mp4 in the editor and mute the sound, please.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/documentary.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-1739"}
{"query": "Please load the video file from content://media/announcement.mp4 and trim it so it only shows the first 20 seconds.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://media/announcement.mp4", "edit_options": {"start_time": 0, "end_time": 20000}}}, "unique_idx": "ACTION_EDIT_VIDEO-1740"}
{"query": "I'd like to manually edit my video at content://videos/family_reunion.mp4. Just open it in the editor.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/family_reunion.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-1741"}
{"query": "I have a tutorial video at content://videos/tutorial.mp4. Open it for editing and also mute the background audio.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/tutorial.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-1742"}
{"query": "Please open the video at content://videos/holiday.mp4 so that I can trim a part of it later.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/holiday.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-1743"}
{"query": "Open the video located at content://videos/360degree.mp4 and trim it from 5 seconds to 45 seconds.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/360degree.mp4", "edit_options": {"start_time": 5000, "end_time": 45000}}}, "unique_idx": "ACTION_EDIT_VIDEO-1744"}
{"query": "Can you open content://videos/special_event.mp4 in the editor? I want to remove its sound to create a silent version.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/special_event.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-1745"}
{"query": "Trim the video from content://videos/action.mp4 to only show the segment between 5 and 35 seconds.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/action.mp4", "edit_options": {"start_time": 5000, "end_time": 35000}}}, "unique_idx": "ACTION_EDIT_VIDEO-1746", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "I need the video at content://videos/comedy.mp4 to be opened with its sound removed. Please mute it.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/comedy.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-1747", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Please load the video file from content://videos/education.mp4 for editing without any automatic changes.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/education.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-1748", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Could you trim content://videos/interview.mp4 so that only the first 2 minutes are kept?", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/interview.mp4", "edit_options": {"start_time": 0, "end_time": 120000}}}, "unique_idx": "ACTION_EDIT_VIDEO-1749", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Open the video content://videos/nature.mp4 for editing and ensure it's muted throughout.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/nature.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-1750", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "I want to extract a clip from content://videos/documentary.mp4 that runs from 20 seconds to 1 minute. Please edit it accordingly.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/documentary.mp4", "edit_options": {"start_time": 20000, "end_time": 60000}}}, "unique_idx": "ACTION_EDIT_VIDEO-1751", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Please load the backup video at content://videos/backup.mp4 in the editor for manual enhancement.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/backup.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-1752", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Load the tutorial video from content://videos/tutorial.mp4 and trim it so that only the portion from 10 to 40 seconds is visible.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/tutorial.mp4", "edit_options": {"start_time": 10000, "end_time": 40000}}}, "unique_idx": "ACTION_EDIT_VIDEO-1753", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Please open the video at content://videos/sunset.mp4 and remove its audio to create a silent version.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/sunset.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-1754", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "I would like to review the footage at content://videos/interlude.mp4. Open it in the video editor for me.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/interlude.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-1755", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Could you load the video content://videos/sport.mp4 for editing? I want to trim it to keep the first 45 seconds only.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/sport.mp4", "edit_options": {"start_time": 0, "end_time": 45000}}}, "unique_idx": "ACTION_EDIT_VIDEO-1756", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Open content://videos/roadtrip.mp4 in the editor and mute the audio track.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/roadtrip.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-1757", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "For content://videos/chat.mp4, please trim the video so that it plays only from 25 seconds to 75 seconds.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/chat.mp4", "edit_options": {"start_time": 25000, "end_time": 75000}}}, "unique_idx": "ACTION_EDIT_VIDEO-1758", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Launch the video editor with my cooking video at content://videos/cooking.mp4 so I can do further edits manually.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/cooking.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-1759", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Please load content://videos/summer.mp4 and trim it to include only the segment from 8 seconds to 30 seconds.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/summer.mp4", "edit_options": {"start_time": 8000, "end_time": 30000}}}, "unique_idx": "ACTION_EDIT_VIDEO-1760", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Open the file content://videos/workshop.mp4 in the editor for a manual review without applying automatic edits.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/workshop.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-1761", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Edit the news segment at content://videos/news_segment.mp4 by trimming it so only the portion from 15 to 90 seconds is displayed.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/news_segment.mp4", "edit_options": {"start_time": 15000, "end_time": 90000}}}, "unique_idx": "ACTION_EDIT_VIDEO-1762", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "I need to remove the audio from my presentation video at content://videos/presentation2.mp4. Can you mute it for me?", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/presentation2.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-1763", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Could you pull up the video at content://videos/review.mp4 in the editor? I might trim the beginning later.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/review.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-1764", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "For the short film at content://videos/short_film.mp4, please trim it so that it starts at 30 seconds and ends at 2 minutes.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/short_film.mp4", "edit_options": {"start_time": 30000, "end_time": 120000}}}, "unique_idx": "ACTION_EDIT_VIDEO-1765", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Please open the advertisement video at content://videos/ad.mp4 in the editor, but make sure the audio is turned off.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/ad.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-1766", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Load the video content://videos/fashion.mp4 to manually edit it; no trimming is required.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/fashion.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-1767", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Activate the editor for content://videos/lifestyle.mp4 and trim it so that only the part between 5 and 35 seconds is shown.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/lifestyle.mp4", "edit_options": {"start_time": 5000, "end_time": 35000}}}, "unique_idx": "ACTION_EDIT_VIDEO-1768", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Kindly edit my cinematic video at content://videos/cinematic.mp4 by muting its sound.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/cinematic.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-1769", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "I want to open the video at content://videos/experiment.mp4 for a manual editing session without any preset modifications.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/experiment.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-1770", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Load and trim the video at content://videos/outdoor.mp4 so that it plays only the portion from 12 to 40 seconds.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/outdoor.mp4", "edit_options": {"start_time": 12000, "end_time": 40000}}}, "unique_idx": "ACTION_EDIT_VIDEO-1771", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Please open the retro video at content://videos/retro.mp4 in the editor and mute its audio.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/retro.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-1772", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Initiate editing for the highlights video at content://videos/highlights.mp4 and trim it to display only from 45 seconds to 1 minute 30 seconds.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/highlights.mp4", "edit_options": {"start_time": 45000, "end_time": 90000}}}, "unique_idx": "ACTION_EDIT_VIDEO-1773", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Please open content://videos/journal.mp4 in the editor so I can work on it manually.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/journal.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-1774", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Load the art video at content://videos/art.mp4 and trim it to show only the first 25 seconds.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/art.mp4", "edit_options": {"start_time": 0, "end_time": 25000}}}, "unique_idx": "ACTION_EDIT_VIDEO-1775", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Could you pull up content://videos/experiment2.mp4 in the video editor without applying any automatic cuts?", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/experiment2.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-1776", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "I need to extract a portion of my vacation video at content://videos/vacation.mp4. Please trim it from 15 seconds to 55 seconds.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/vacation.mp4", "edit_options": {"start_time": 15000, "end_time": 55000}}}, "unique_idx": "ACTION_EDIT_VIDEO-1777", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Open up the travel video at content://videos/travel.mp4 and disable its audio, please.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/travel.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-1778", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Please launch the editor for content://videos/festival.mp4 so I can make manual adjustments later.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/festival.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-1779", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Could you edit the video at content://videos/repair.mp4 so that it only plays from 7 to 37 seconds?", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/repair.mp4", "edit_options": {"start_time": 7000, "end_time": 37000}}}, "unique_idx": "ACTION_EDIT_VIDEO-1780", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "I want to remove the sound from the video at content://videos/meditation.mp4. Can you open it in the editor and mute it?", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/meditation.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-1781", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Bring up the drama clip at content://videos/drama.mp4 for editing and trim it to isolate the portion from 20 to 80 seconds.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/drama.mp4", "edit_options": {"start_time": 20000, "end_time": 80000}}}, "unique_idx": "ACTION_EDIT_VIDEO-1782", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Please load the farm video at content://videos/farm.mp4 into the editor; I don't want any immediate changes.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/farm.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-1783", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Can you start the navigation app and route me to Times Square, New York?", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Times Square, New York"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1784"}
{"query": "I need to get directions to 221B Baker Street in London. Initiate navigation please.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "221B Baker Street, London"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1785"}
{"query": "Could you launch the maps app and navigate me to the Eiffel Tower in Paris?", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Eiffel Tower, Paris"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1786"}
{"query": "Start navigation for me to the Golden Gate Bridge in San Francisco.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Golden Gate Bridge, San Francisco"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1787"}
{"query": "I want to head over to Central Park in New York City. Please start turn-by-turn directions.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Central Park, New York City"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1788"}
{"query": "Begin navigation to 1600 Pennsylvania Avenue NW, Washington DC.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "1600 Pennsylvania Avenue NW, Washington DC"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1789"}
{"query": "Can you show me the route to the Sydney Opera House in Australia by launching my maps app?", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Sydney Opera House, Australia"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1790"}
{"query": "Help me get directions to 1 Infinite Loop, Cupertino, CA.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "1 Infinite Loop, Cupertino, CA"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1791"}
{"query": "Initiate navigation to the Colosseum in Rome.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Colosseum, Rome"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1792"}
{"query": "I need to find my way to the Empire State Building. Can you open navigation for that?", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Empire State Building, New York"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1793"}
{"query": "Set course for the Kremlin in Moscow using the maps application.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Kremlin, Moscow"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1794"}
{"query": "Please navigate me to Big Ben in London.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Big Ben, London"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1795"}
{"query": "I'm traveling to Agra soon. Launch navigation to the Taj Mahal for me.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Taj Mahal, Agra"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1796"}
{"query": "I'm planning a visit to China. Can you directly navigate me to the Great Wall?", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Great Wall, China"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1797"}
{"query": "Please open my maps and start a route to the Uffizi Gallery in Florence, Italy.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Uffizi Gallery, Florence, Italy"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1798"}
{"query": "Could you get me directions to Times Square in New York?", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Times Square, New York"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1799", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I need to navigate to the Sydney Opera House in Australia. Can you set that up?", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Sydney Opera House, Sydney, Australia"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1800", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Take me to the Louvre Museum in Paris.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Louvre Museum, Paris"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1801", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Plan a route for me to Buckingham Palace in London, please.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Buckingham Palace, London"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1802", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Can you direct me to the Statue of Liberty in New York?", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Statue of Liberty, New York"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1803", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Set the map for a trip to Disneyland in Anaheim.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Disneyland, Anaheim"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1804", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I want to visit the Colosseum in Rome. Please chart a route for me.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Colosseum, Rome"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1805", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Start navigation towards Red Square in Moscow.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Red Square, Moscow"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1806", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Could you please set my GPS to the Burj Khalifa in Dubai?", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Burj Khalifa, Dubai"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1807", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I'm heading to Niagara Falls in Canada. Can you map a route there?", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Niagara Falls, Canada"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1808", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I would like directions to Sagrada Familia in Barcelona.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Sagrada Familia, Barcelona"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1809", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I need to go to the Grand Canyon in Arizona. Please start navigation.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Grand Canyon, Arizona"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1810", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Launch the maps app and set a course for Himeji Castle in Japan.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Himeji Castle, Himeji, Japan"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1811", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Could you take me to the Christ the Redeemer statue in Rio de Janeiro?", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Christ the Redeemer, Rio de Janeiro"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1812", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Set my navigation for the Space Needle in Seattle.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Space Needle, Seattle"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1813", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Direct me to the Forbidden City in Beijing.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Forbidden City, Beijing"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1814", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Help me out by navigating to Versailles Palace in France.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Versailles Palace, Versailles, France"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1815", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I need to start navigation to Mount Everest Base Camp.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Mount Everest Base Camp"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1816", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Please direct me to Toronto’s CN Tower.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "CN Tower, Toronto, Canada"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1817", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I want to head to the Sydney Harbour Bridge. Can you launch navigation for me?", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Sydney Harbour Bridge, Sydney, Australia"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1818", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Show me a route to the Acropolis in Athens.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Acropolis, Athens"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1819", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Can you drive me to Neuschwanstein Castle in Bavaria?", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Neuschwanstein Castle, Bavaria"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1820", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I'm off to visit the World Trade Center Memorial in New York City. Please start navigation.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "World Trade Center Memorial, New York City"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1821", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Set the course for Palm Jumeirah in Dubai.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Palm Jumeirah, Dubai"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1822", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Guide me to the Sydney Opera House.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Sydney Opera House, Sydney"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1823", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I need help navigating to the Hiroshima Peace Memorial in Hiroshima, Japan.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Hiroshima Peace Memorial, Hiroshima"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1824", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Take me on a trip to the Alhambra in Granada.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Alhambra, Granada"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1825", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Please navigate me to the Kremlin in Moscow.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Kremlin, Moscow"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1826", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Set the GPS to take me to Auckland Sky Tower in New Zealand.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Auckland Sky Tower, Auckland, New Zealand"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1827", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Direct me towards Buckingham Fountain in Chicago.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Buckingham Fountain, Chicago"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1828", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I require turn-by-turn directions to Edinburgh Castle in Scotland.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Edinburgh Castle, Edinburgh, Scotland"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1829", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Could you map out a route to the ancient ruins of Pompeii near Naples?", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Pompeii, Italy"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1830", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Help me get directions to Victoria Harbour in Hong Kong.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Victoria Harbour, Hong Kong"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1831", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Please start navigation to the Summer Palace located in Beijing.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Summer Palace, Beijing"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1832", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I would really appreciate it if you could guide me to the Trevi Fountain in Rome.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Trevi Fountain, Rome"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1833", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Navigate me over to the Palace of Versailles in France.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Palace of Versailles, Versailles, France"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1834", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I need directions to The National Mall in Washington D.C. Could you please help?", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "The National Mall, Washington D.C."}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1835", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Can you start navigation to the historic center of Kyoto in Japan?", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Historic center, Kyoto, Japan"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-1836", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Please open the calendar event identified by content://calender/event/5 so I can review its details.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/5"}}, "unique_idx": "ACTION_VIEW_EVENT-1837"}
{"query": "Show me what's scheduled for this event: content://calender/event/10.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/10"}}, "unique_idx": "ACTION_VIEW_EVENT-1838"}
{"query": "I want to check the details of my meeting; please display the event at content://calender/event/15.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/15"}}, "unique_idx": "ACTION_VIEW_EVENT-1839"}
{"query": "Could you load the event with URI content://calender/event/23? I need to see the meeting information.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/23"}}, "unique_idx": "ACTION_VIEW_EVENT-1840"}
{"query": "Lookup and display details for the calendar event at content://calender/event/30.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/30"}}, "unique_idx": "ACTION_VIEW_EVENT-1841"}
{"query": "Open the event content://calender/event/45 so I can check what it’s about.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/45"}}, "unique_idx": "ACTION_VIEW_EVENT-1842"}
{"query": "Display the information for my calendar entry at content://calender/event/100.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/100"}}, "unique_idx": "ACTION_VIEW_EVENT-1843"}
{"query": "Retrieve the details for the event with this content URI: content://calender/event/200.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/200"}}, "unique_idx": "ACTION_VIEW_EVENT-1844"}
{"query": "Where is my upcoming meeting? Show the event info for content://calender/event/250.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/250"}}, "unique_idx": "ACTION_VIEW_EVENT-1845"}
{"query": "I need insights into the calendar event at content://calender/event/300. Please display it.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/300"}}, "unique_idx": "ACTION_VIEW_EVENT-1846"}
{"query": "Fetch the event details from content://calender/event/350 for my review.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/350"}}, "unique_idx": "ACTION_VIEW_EVENT-1847"}
{"query": "Kindly open the calendar event with URI content://calender/event/400 so I can see its specifics.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/400"}}, "unique_idx": "ACTION_VIEW_EVENT-1848"}
{"query": "I would appreciate it if you could display the event details corresponding to content://calender/event/450.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/450"}}, "unique_idx": "ACTION_VIEW_EVENT-1849"}
{"query": "Hey, can you view this event for me: content://calender/event/500?", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/500"}}, "unique_idx": "ACTION_VIEW_EVENT-1850"}
{"query": "Examine the calendar event identified by content://calender/event/550 and show me its details.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/550"}}, "unique_idx": "ACTION_VIEW_EVENT-1851"}
{"query": "Could you please display the details of the calendar event located at content://calender/event/1?", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/1"}}, "unique_idx": "ACTION_VIEW_EVENT-1852", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "I need to view the information for the event at content://calender/event/2. Can you open it?", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/2"}}, "unique_idx": "ACTION_VIEW_EVENT-1853", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "Show me the details of this event: content://calender/event/3.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/3"}}, "unique_idx": "ACTION_VIEW_EVENT-1854", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "Retrieve the calendar event information from content://calender/event/4 so I can review it.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/4"}}, "unique_idx": "ACTION_VIEW_EVENT-1855", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "Load the event details at content://calender/event/5, I need to know what's planned.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/5"}}, "unique_idx": "ACTION_VIEW_EVENT-1856", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "Open the calendar event that is available at content://calender/event/6 for me.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/6"}}, "unique_idx": "ACTION_VIEW_EVENT-1857", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "Please check out the event at content://calender/event/7 and display its details.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/7"}}, "unique_idx": "ACTION_VIEW_EVENT-1858", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "I want to see what is scheduled in the event with URI content://calender/event/8.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/8"}}, "unique_idx": "ACTION_VIEW_EVENT-1859", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "View this calendar entry for me: content://calender/event/9.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/9"}}, "unique_idx": "ACTION_VIEW_EVENT-1860", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "Can you fetch the meeting details located at content://calender/event/10?", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/10"}}, "unique_idx": "ACTION_VIEW_EVENT-1861", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "I would like to review the event information at content://calender/event/11. Please open it.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/11"}}, "unique_idx": "ACTION_VIEW_EVENT-1862", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "Get the event information from content://calender/event/13 so I can plan my day.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/13"}}, "unique_idx": "ACTION_VIEW_EVENT-1863", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "Access the calendar event from content://calender/event/14 and display its info.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/14"}}, "unique_idx": "ACTION_VIEW_EVENT-1864", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "I need to inspect the event at content://calender/event/15. Please load the event details.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/15"}}, "unique_idx": "ACTION_VIEW_EVENT-1865", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "Could you open the calendar event specified by content://calender/event/16? I want to check the schedule.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/16"}}, "unique_idx": "ACTION_VIEW_EVENT-1866", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "Let me see the event details at content://calender/event/17. Please display the full information.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/17"}}, "unique_idx": "ACTION_VIEW_EVENT-1867", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "Display the meeting info from content://calender/event/18 so I can know what's happening.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/18"}}, "unique_idx": "ACTION_VIEW_EVENT-1868", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "Please show me the details of the calendar entry at content://calender/event/19.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/19"}}, "unique_idx": "ACTION_VIEW_EVENT-1869", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "I need the details of content://calender/event/20 for my upcoming schedule. Can you fetch it?", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/20"}}, "unique_idx": "ACTION_VIEW_EVENT-1870", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "Check the calendar event at content://calender/event/21 and let me inspect its details.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/21"}}, "unique_idx": "ACTION_VIEW_EVENT-1871", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "I want to take a look at the event scheduled at content://calender/event/22.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/22"}}, "unique_idx": "ACTION_VIEW_EVENT-1872", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "Could you pull up the information for the calendar event with URI content://calender/event/23?", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/23"}}, "unique_idx": "ACTION_VIEW_EVENT-1873", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "Display the event detail from content://calender/event/24 so I can plan accordingly.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/24"}}, "unique_idx": "ACTION_VIEW_EVENT-1874", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "Please open the event at content://calender/event/26 so that I can see what's on the agenda.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/26"}}, "unique_idx": "ACTION_VIEW_EVENT-1875", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "I would like to load the details of the calendar event located at content://calender/event/27.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/27"}}, "unique_idx": "ACTION_VIEW_EVENT-1876", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "Access the event information for content://calender/event/28 so I can review my calendar.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/28"}}, "unique_idx": "ACTION_VIEW_EVENT-1877", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "Could you bring up the calendar event from content://calender/event/29 for me?", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/29"}}, "unique_idx": "ACTION_VIEW_EVENT-1878", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "Please retrieve the meeting details at content://calender/event/30 so I can prepare for it.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/30"}}, "unique_idx": "ACTION_VIEW_EVENT-1879", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "I need to check the details of the event at content://calender/event/31 in my calendar.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/31"}}, "unique_idx": "ACTION_VIEW_EVENT-1880", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "Can you display the full information for content://calender/event/32?", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/32"}}, "unique_idx": "ACTION_VIEW_EVENT-1881", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "I would appreciate it if you could open the event at content://calender/event/33 so I can see the details.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/33"}}, "unique_idx": "ACTION_VIEW_EVENT-1882", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "Show the event details for content://calender/event/34, please.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/34"}}, "unique_idx": "ACTION_VIEW_EVENT-1883", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "Bring up the calendar event with URI content://calender/event/35 so I can then see what's planned.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/35"}}, "unique_idx": "ACTION_VIEW_EVENT-1884", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "Access and display the details of the event at content://calender/event/36 in my schedule.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/36"}}, "unique_idx": "ACTION_VIEW_EVENT-1885", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "I need to review the meeting scheduled at content://calender/event/37, could you fetch its details?", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/37"}}, "unique_idx": "ACTION_VIEW_EVENT-1886", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "Show me what’s happening in the event listed at content://calender/event/38.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/38"}}, "unique_idx": "ACTION_VIEW_EVENT-1887", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "Please open the calendar event at content://calender/event/39 so I can check its time and location.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/39"}}, "unique_idx": "ACTION_VIEW_EVENT-1888", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "I would like to see the detailed schedule for the event at content://calender/event/40. Open it for me.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/40"}}, "unique_idx": "ACTION_VIEW_EVENT-1889", "tools": [{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"]}]}
{"query": "Can you show me all the timers that are currently running?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1890"}
{"query": "I would like to see the list of active timers. Please display them.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1891"}
{"query": "What timers are operating right now? Show them for me.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1892"}
{"query": "Display my active timers.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1893"}
{"query": "I'm curious to know which timers are still going. Could you list them?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1894"}
{"query": "Please retrieve and show all timers that are currently active.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1895"}
{"query": "List any timers that are still in progress, thanks.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1896"}
{"query": "I need to check the status of my timers. Can you display all active ones?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1897"}
{"query": "Could you provide the current list of running timers on my device?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1898"}
{"query": "Show me all the timers that haven't expired yet.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1899"}
{"query": "I want to review my ongoing timers. Display them please.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1900"}
{"query": "Kindly show the active timers currently set in the system.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1901"}
{"query": "What are my active timers? I need to see a list of them now.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1902"}
{"query": "Retrieve and display all currently active timers.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1903"}
{"query": "Please show any timers that are active at the moment.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1904"}
{"query": "Please display the list of active timers.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1905", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Show me the timers that are running right now.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1906", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "I need to see my current active timers. Can you list them?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1907", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "List all my ongoing timers.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1908", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Retrieve and show all timers that haven't expired yet.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1909", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Could you display all the timers currently in progress for me?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1910", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "I would like to check the active timers on my device. Please present them.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1911", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Display any timers that are currently set and active.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1912", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "I want to check which timers haven't completed yet. Show me the active ones.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1913", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Would you mind showing me the list of active timers currently set?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1914", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Kindly list out all the timers that are still ticking.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1915", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Show all timers that are on the clock at this moment.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1916", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Can you present a list of timers that are active right now?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1917", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "I need to know which timers are still going. Please show them.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1918", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "I'm looking to review all my timers that haven't finished yet. Can you list them?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1919", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Please list the timers currently counting down.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1920", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "What timers are active at the moment? Please display them.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1921", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "I need an overview of timers in progress. Can you show them to me?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1922", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Kindly display all timers that are still running.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1923", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Please reveal which timers are currently on the go.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1924", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "I would appreciate a list of my ongoing timers.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1925", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Display the timers that are presently active.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1926", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Can you fetch all active timers for me?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1927", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "List out every timer that's still ticking away.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1928", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Please show the timers that are currently on timer mode.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1929", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "I'd like to see all of my active timers right now.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1930", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Provide the list of timers that are in operation at the moment.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1931", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "What are the current timers running on the system? Please list them.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1932", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "I'd like to know which timers are still active. Could you show them?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1933", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Let me see a list of all timers that are in the middle of a countdown.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1934", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "I need to view the timers that are currently active. Please list them for me.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1935", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Could you give me an overview of my timers that are still running?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1936", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Display the active countdown timers for my reference.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1937", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Can you show me all the active timers I have running?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1938", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Please display the list of timers that are currently active.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1939", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "I need a rundown of all ongoing timers; can you list them for me?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1940", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "List all timers that are still counting down, please.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1941", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Show me the timers that are currently in progress.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1942", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "I'm checking my ongoing activities; list any active timers you find.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1943", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Display the live timers that are still working.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1944", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Could you provide a summary of my current timers that haven't expired yet?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1945", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "I’m wondering what timers are still ticking. Please list them.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1946", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Retrieve all the timers that are still active.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1947", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Would you please show me the active timers currently running on my device?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1948", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "I want to see the countdown timers that are still in effect.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1949", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Please list the timers that haven't stopped yet.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1950", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Could you display the timers that are still running?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1951", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "I need the details of every timer that's still active; show me the list.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1952", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Show all currently active countdowns.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1953", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Please present me with all the timers that are ticking away at the moment.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1954", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "I'm trying to keep track of my ongoing timers. Can you list them?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1955", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Display any timer that is still counting down on my clock.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1956", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Can you list the timers that remain active?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1957", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "I require an overview of my running timers; please display them.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1958", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Show me a current snapshot of active timers, if any.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1959", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "What timers are active right now? I'd like to view the list.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1960", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Could you expose the list of timers that haven't finished counting down?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1961", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Please fetch and display my live timers.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1962", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "I’m curious to see the timers that are still going. Show them to me.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1963", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Display the list of timers that are in the middle of counting down.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1964", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Need to check what timers are still set and active; please list them.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1965", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Give me an update on any timers I have that are still running.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1966", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "I would appreciate a list of all active timers on my system.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1967", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Let me see a summary of every live timer currently in effect.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1968", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Please provide the active timers; I want to know which ones are still pending.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1969", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Display all timers that haven't reached zero yet.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1970", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "I need a full list of timers that are still active. Can you display them?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1971", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Could you please reveal all timers currently operating on my device?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1972", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "I want to audit the active timers running right now. Please show them.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-1973", "tools": [{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"]}]}
{"query": "Could you please show me the recent call log from my device?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-1974"}
{"query": "I need to access my latest call history. Can you pull it up?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-1975"}
{"query": "Display the recent calls on my phone, including missed, answered, and outgoing calls.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-1976"}
{"query": "Show my phone's call log from today and yesterday.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-1977"}
{"query": "Retrieve the list of all calls made, received, or missed on my device recently.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-1978"}
{"query": "I want to see my call history. Could you fetch the recent call log?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-1979"}
{"query": "Open the recent call records saved on my mobile device.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-1980"}
{"query": "List the phone calls recorded on my device most recently.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-1981"}
{"query": "Access and display my recent call log details from the phone.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-1982"}
{"query": "Can you open my recent call history so that I can check who I talked to?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-1983"}
{"query": "I need a rundown of my latest phone calls, including types and times.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-1984"}
{"query": "Please retrieve my phone's recent call log to show the calls made and received.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-1985"}
{"query": "Fetch the recent call data from my device's log.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-1986"}
{"query": "I want to review my call history. Could you display the recent calls on my phone?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-1987"}
{"query": "Get the details of the most recent calls logged on my device.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-1988"}
{"query": "Show me my call history from today's phone calls.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-1989", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "I want to check my recent phone call log.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-1990", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "Retrieve my call records with timestamps please.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-1991", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "Display a list of the latest phone calls on my device.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-1992", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "I need to see who I called and who called me; can you fetch my call log?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-1993", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "Can you show my recent telephone call log entries?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-1994", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "Access my call log to review the most recent calls.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-1995", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "Fetch all my incoming, outgoing, and missed calls from the log.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-1996", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "Display the complete recent call log from my device.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-1997", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "I want to see my phone log with recent calls, including type and time details.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-1998", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "Could you pull up the latest log of my phone calls?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-1999", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "Provide my call log details from my mobile phone.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-2000", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "Get my phone history — list everyone I've called lately.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-2001", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "Show my recent communication details from the call log.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-2002", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "I would like to see my recent call history; please load the call log.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-2003", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "Extract my latest call records, including missed and answered calls.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-2004", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "What does my recent call log display? Show all the necessary info.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-2005", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "I need to view my call history data on my smartphone.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-2006", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "Let me see the recent list of phone calls made on my device.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-2007", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "Retrieve my call history showing both outgoing and incoming call info.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-2008", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "Open the recent call log recorded on my phone.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-2009", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "I need to review my phone's recent call history; can you get the log for me?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-2010", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "Could you list my recent calls including the call types?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-2011", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "I want to see all the recent calls on my phone. Please show the log.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-2012", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "Display my call log, making sure to show missed and received calls.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-2013", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "I'm interested in seeing a record of my most recent phone calls.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-2014", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "Help me view the call log along with call times and types.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-2015", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "Show all my recent calls — both incoming and outgoing.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-2016", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "I need details of my latest phone call records; please fetch my call log.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-2017", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "What is in my recent call log? I need to check my call history.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-2018", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "Bring up my call log from my device so I can review all recent calls.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-2019", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "Let me see the most recent entries in my call log.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-2020", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "I would like a comprehensive list of my latest telephone calls.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-2021", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "Access my recent call history, including details of who called and when.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-2022", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "Show the call log on my phone that contains all recent entries.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-2023", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "I want to check my phone's call log to see past call details.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-2024", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "Can you retrieve my recent telephone call records for me?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-2025", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "Display a rundown of my most recent phone communications from the log.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-2026", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "Get me the call history from my device: show me recent calls with their timestamps.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-2027", "tools": [{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"]}]}
{"query": "Can you show me a list of emails I've sent recently?", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2028"}
{"query": "I need to view my sent mails folder; please display the emails along with their recipients.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2029"}
{"query": "Please pull up the sent emails from my account so I can check the recipients and subjects.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2030"}
{"query": "Show me my recently dispatched emails.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2031"}
{"query": "I want to see all the emails I've sent out lately. Can you display them?", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2032"}
{"query": "Fetch my sent email list, please. I'm interested in checking the messages I've already sent.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2033"}
{"query": "Could you list out the emails I sent recently including the recipients' addresses?", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2034"}
{"query": "Display my outgoing messages folder so I can review what emails have been sent.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2035"}
{"query": "I need an overview of my sent emails. Show the list with subject lines and receiver details.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2036"}
{"query": "List the contents of my sent mailbox to check which emails have been sent out recently.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2037"}
{"query": "Kindly display the emails I have sent, so I can review the recent communications.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2038"}
{"query": "I would like to examine my sent emails folder. Please show all sent emails along with their details.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2039"}
{"query": "Pull up the list of emails I have dispatched, including recipient info and email subjects.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2040"}
{"query": "Show my outgoing emails so I can check the messages I recently sent.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2041"}
{"query": "Could you retrieve my sent email logs? I want to see who I emailed and the related subjects.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2042"}
{"query": "Can you show me the emails I've sent recently along with their recipients?", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2043", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "Please display my outgoing emails for review.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2044", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "I need to check my sent messages folder. Could you list the emails I dispatched?", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2045", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "Show me all the emails I have sent recently, including recipient details.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2046", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "Retrieve my sent email log so I can see who I've contacted and what subjects were used.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2047", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "Could you display my sent mails along with the details of each recipient and subject?", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2048", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "I want to review the emails I've sent. Can you pull up my sent items?", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2049", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "Kindly fetch the list of emails I've sent out recently.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2050", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "Show me my dispatched emails so I can check their recipients and subjects.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2051", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "I need an overview of my sent communications. Please show my recent outgoing emails.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2052", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "Display the content of my sent folder to review the emails I've sent today.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2053", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "Could you list all the emails dispatched from my account with the recipients' info?", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2054", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "I need to see my sent emails. Show me the messages I sent along with contact details.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2055", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "Please retrieve my sent email records for a quick glance at the outbound communications.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2056", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "Show my outgoing email archive so I can verify my last communications.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2057", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "Could you bring up the list of emails I've sent recently?", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2058", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "I want to see who I've emailed lately. Please display my sent messages including subjects.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2059", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "Display my sent emails so I can double-check the details of each message sent.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2060", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "Pull up my sent emails; I need to review both the recipient addresses and email subjects.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2061", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "Please show my dispatched emails to confirm my outgoing communication details.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2062", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "I need an extract of my sent items. Can you display the emails I've sent recently?", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2063", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "Could you pull up the recent emails sent from my account?", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2064", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "List the emails I've dispatched, so I can verify my last communications.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2065", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "Show me the history of my sent emails with details about the recipients.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2066", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "Could you access and display my sent folder? I need to check the outgoing emails.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2067", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "I want to review my email dispatches; list the sent items with the email subjects and addresses.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2068", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "Display the sent messages I recently sent, including their subjects and the recipients' emails.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2069", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "Please provide the log of outgoing emails from my account for review.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2070", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "Show all the emails I have sent out, so I can have a look at who received them.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2071", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "I would like to see my sent emails with recipient and subject details. Please display them.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2072", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "Could you retrieve and show my sent messages? I'm interested in the recipient list and subject lines.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2073", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "Fetch my sent emails so I can check the details of my outgoing messages.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2074", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "I need to see what emails I've already sent. Can you show my sent folder contents?", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2075", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "Show my email outbox to review the messages that have already been sent.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2076", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "Please pull up a list of recent emails I've sent from my account.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2077", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "Could you present my sent emails? I'd like to check the recent communication details.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2078", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "I want to verify my previous outgoing emails. Please display the emails I've sent with all details.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2079", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "Show my sent email folder contents so I can confirm the list of recipients and subjects.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2080", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "Display the emails from my sent folder to review my last batch of messages.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-2081", "tools": [{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"]}]}
{"query": "Show me the sent messages from my phone.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2082"}
{"query": "Can you display the list of texts I have sent recently?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2083"}
{"query": "I need to see my sent SMS and MMS messages. Please show them.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2084"}
{"query": "Please retrieve my outgoing messages with message snippets.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2085"}
{"query": "List all the messages I've sent along with the recipients' details.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2086"}
{"query": "Could you fetch my sent texts?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2087"}
{"query": "I want to review the messages I've sent recently. Can you help?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2088"}
{"query": "Display my message outbox showing the texts I've sent out.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2089"}
{"query": "Can you list my sent SMS messages with short previews of each?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2090"}
{"query": "Show the log of my sent text messages, please.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2091"}
{"query": "Retrieve the records of the texts I have sent.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2092"}
{"query": "I would like to view all my outgoing SMS/MMS messages.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2093"}
{"query": "Could you pull up my recently sent messages along with recipient details?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2094"}
{"query": "Show any text messages I have sent, including any partial content if available.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2095"}
{"query": "Display the last few messages I sent to my contacts.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2096"}
{"query": "Retrieve my sent messages from the outbox.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2097", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "I want to view the history of my sent messages.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2098", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Show my sent text messages.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2099", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Can I get my outbox messages?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2100", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Bring up my sent SMS and MMS records.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2101", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Assist me by showing all texts I've dispatched.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2102", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "I need a list of all text messages that I have sent.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2103", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Could you list my outbound messages?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2104", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Give me a rundown of the texts I sent recently.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2105", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Can you pull up my sent messages log?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2106", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "I would like to review the messages I've sent out.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2107", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Please show the SMS messages I recently sent.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2108", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Display recently sent texts including snippets.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2109", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Show all sent messages with details.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2110", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "I want to see the texts I've sent with a preview of each message.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2111", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Get me my sent messages showing who I sent them to.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2112", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Find all of my sent text records.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2113", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Pull up my sent texts from the outbox for review.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2114", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Which texts have I sent recently? Please list them.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2115", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Show the list of texts I've sent so far.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2116", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Display my sent SMS messages for review.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2117", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "I need to check my outgoing messages list.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2118", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Provide me a view of my recent sent messages.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2119", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "May I see a summary of the texts I sent?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2120", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Show me the details of the SMS messages I've sent.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2121", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "List my dispatched messages with recipient information.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2122", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Reveal my sent text message log.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2123", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Could you bring up all my sent messages?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2124", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "I need a display of the texts I have sent.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2125", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Show me the list of outgoing texts with snippets.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2126", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Present my sent messages history for review.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2127", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Expose the list of SMS and MMS messages that I dispatched.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2128", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Could you show all of my recently sent SMS messages?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2129", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "I want to see all the text messages I've sent.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2130", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Display my sent messages list from earlier.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2131", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Please fetch my sent texts with details.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2132", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Bring up the record of messages I've already sent.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2133", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "I need to check on the texts I have sent out recently.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2134", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "List the SMS texts that I sent.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2135", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Show me the sent SMS conversation history.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2136", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Can you display my outgoing texts?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2137", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "I want to review my sent messages from my phone.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2138", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Retrieve my recently dispatched text messages.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2139", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Fetch the snapshots of my sent SMS/MMS messages.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2140", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Show all outgoing text messages from my messaging app.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2141", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Get me the sent text dialogues with hints.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2142", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Please list the sent SMS messages I sent earlier.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2143", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "I want to look at all messages I have dispatched.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2144", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Display my list of sent SMS messages.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2145", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Show me my outgoing texts with message snippets.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2146", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Could you fetch the details of my sent SMS?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2147", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "I need to view the sent messages from my outbox.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2148", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Display the recently sent SMS messages on my device.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2149", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Bring up my list of text messages I have sent out.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2150", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Fetch my sent messages to see the recipients and snippets.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2151", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "I need a rundown of my sent SMS records.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2152", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Show me all my messages that I have sent.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2153", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Get a detailed list of my sent texts.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2154", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Present the data of sent SMS messages on my phone.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2155", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Please retrieve my sent messages history.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2156", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Display my sent SMS with small previews.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2157", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "I want to see the SMS texts that I have just sent.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2158", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Show which text messages I sent out recently.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2159", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Fetch the list of texts that I have dispatched.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2160", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Display my record of sent texts with brief segments.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2161", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "I want to check what messages I've sent recently.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2162", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Show me a summary of my outgoing text messages.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2163", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Please display a list of my SMS/MMS messages that I sent.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-2164", "tools": [{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"]}]}
{"query": "Could you show me the websites I've been visiting recently?", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2165"}
{"query": "I need to check my web browsing history. Can you display it for me?", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2166"}
{"query": "Display my recent online activity including the page titles I've viewed.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2167"}
{"query": "Show me my browsing record from the past few sessions.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2168"}
{"query": "I want a list of the last few webpages I visited. Please retrieve my history.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2169"}
{"query": "Retrieve and display a summary of my recently visited websites.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2170"}
{"query": "What webpages have I looked at recently? Provide my browsing history details.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2171"}
{"query": "Fetch my web history so I can review the pages I've been on.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2172"}
{"query": "Please display the list of titles and URLs from my recent browsing sessions.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2173"}
{"query": "I would like to see a record of the websites I've visited. Can you show my browser history?", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2174"}
{"query": "Could you pull up the history of my web browsing, including the title of each site?", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2175"}
{"query": "Show my recent browser history indicating the sites I accessed.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2176"}
{"query": "I want to review what websites I've recently visited. Please list my browsing history.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2177"}
{"query": "Provide me with my current web history to see which pages were accessed lately.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2178"}
{"query": "Can you show my recently accessed webpages? I need to check my web history for any familiar sites.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2179"}
{"query": "Display my recent browsing history, please.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2180", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "Could you list the last websites I visited on my browser?", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2181", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "I need to review my web browsing record. Can you show it to me?", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2182", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "Bring up the URLs or titles of webpages I have been accessing lately.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2183", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "Please provide my recent history of online sites I accessed.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2184", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "Show me the current list of webpages I've been browsing.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2185", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "Retrieve and display a record of the sites I've been on recently.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2186", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "I want to see my recent navigation details - can you pull that history up?", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2187", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "Display a summary of the websites I visited in my last few sessions.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2188", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "List out the names and URLs of my recent web pages.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2189", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "Could you fetch my recent web activity record?", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2190", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "I need a rundown of my browsing history from the past few days.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2191", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "Show the websites I've visited in my recent browsing session.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2192", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "Would you please display my recent web page visits with details?", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2193", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "I need to see the list of sites I checked out online recently.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2194", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "Please pull up my current browser history showing the visited pages.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2195", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "Fetch the record of web pages I visited recently for a quick review.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2196", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "I would like to see my history of browsing websites from earlier sessions.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2197", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "Can you provide a detailed list of recently accessed pages from my browser?", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2198", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "Show my browser's history so I can check which pages were accessed recently.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2199", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "Retrieve the recent URLs and page titles from my browsing history.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2200", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "Please display the complete record of the web pages I've visited lately.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2201", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "Can you bring up a list of the internet sites I've explored in my recent sessions?", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2202", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "I want to inspect my recent online activity. Show me my web history.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2203", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "Display my list of recently visited webpages to help me verify my browsing patterns.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2204", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "Please provide my recent history of website visits, including site names if possible.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2205", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "Show the brief record of the online pages I have recently accessed.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2206", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "Can you display a log of my visited websites from the past sessions?", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2207", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "I would like to review the list of webpages I recently visited. Please show the history.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2208", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "List all the URLs and titles from the latest browsing session for me.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2209", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "Could you pull up my online history so I can see the pages I've navigated to recently?", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2210", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "Show a log of my web navigation activity from the past few sessions.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2211", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "I need to look back on my recent web history. Please display the list of pages I've visited.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2212", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "Could you show me the record of the websites I visited during my last browsing session?", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2213", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "Retrieve and present the recent web history entries so I can track my browsing.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2214", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "I need to verify my recent online activities. Please open my browser history and show the webpages.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2215", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "Please fetch the list of webpages I've recently viewed in my browser.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2216", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "Show my web history so I can check the list of sites I accessed recently.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-2217", "tools": [{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"]}]}
{"query": "Show my Road Trip playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Road Trip"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2218"}
{"query": "I need to hear some tunes from my workout mix. Can you open the playlist named 'Workout Mix'?", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Workout Mix"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2219"}
{"query": "Can you display the songs from my Chill Vibes playlist?", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Chill Vibes"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2220"}
{"query": "Please bring up my 'Summer Hits' playlist, I want to review the track list.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Summer Hits"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2221"}
{"query": "Access the Rock Classics playlist, please.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Rock Classics"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2222"}
{"query": "View my Jazz Essentials playlist for tonight’s listening session.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Jazz Essentials"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2223"}
{"query": "Open the playlist called 'Acoustic Mornings'.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Acoustic Mornings"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2224"}
{"query": "I want to check the details of my 'Party Anthems' playlist. Could you show it?", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Party Anthems"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2225"}
{"query": "Could you show the songs in the 'Sleep Sounds' playlist?", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Sleep Sounds"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2226"}
{"query": "I would like to see my 'Indie Mix' playlist on the app.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Indie Mix"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2227"}
{"query": "Let me review my 'Classical Favorites' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Classical Favorites"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2228"}
{"query": "Display the playlist 'Hip Hop Beats' for me.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Hip Hop Beats"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2229"}
{"query": "Take a look at the 'Mellow Indie' playlist I created.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Mellow Indie"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2230"}
{"query": "Retrieve the 'Electronic Vibes' playlist song list, please.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Electronic Vibes"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2231"}
{"query": "Show me the 'Retro Hits' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Retro Hits"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2232"}
{"query": "Could you pull up the 'Jazz Classics' playlist for me?", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Jazz Classics"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2233", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "I would like to view my 'Sunday Mornings' mix. Please show it.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Sunday Mornings"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2234", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "Display the songs in 'Workout Hits'.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Workout Hits"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2235", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "Open up the 'Indie Mix' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Indie Mix"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2236", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "Show me the 'Summer Chill' playlist songs.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Summer Chill"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2237", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "I want to check out the tunes in my 'Evening Beats' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Evening Beats"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2238", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "Can you bring up the 'Pop Essentials' playlist?", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Pop Essentials"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2239", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "Would you display the 'Classical Favorites' playlist?", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Classical Favorites"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2240", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "Please show me the 'Retro Mix' playlist track list.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Retro Mix"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2241", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "Open the 'Hip Hop Beats' playlist in my music app.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Hip Hop Beats"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2242", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "Show the song list from the 'Study Time' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Study Time"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2243", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "I'd like to see what's in 'Sleepy Tunes'.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Sleepy Tunes"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2244", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "Could you open my 'Dance Party' playlist?", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Dance Party"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2245", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "Let me check out the 'Road Trip' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Road Trip"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2246", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "Please display the 'Rainy Day' playlist for some mellow tunes.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Rainy Day"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2247", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "I need to listen to the 'Acoustic Chill' tracks; show that playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Acoustic Chill"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2248", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "Bring up the 'Morning Motivation' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Morning Motivation"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2249", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "Show my 'Feel Good' playlist please.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Feel Good"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2250", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "I'd appreciate if you could load the 'Country Roads' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Country Roads"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2251", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "Can you open 'Lo-Fi Lounge' so I can relax?", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Lo-Fi Lounge"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2252", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "Display the 'Golden Oldies' playlist for me.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Golden Oldies"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2253", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "I'd like to view the 'Rock Anthems' playlist. Could you show it?", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Rock Anthems"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2254", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "Open my 'Electronic Vibes' playlist now.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Electronic Vibes"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2255", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "Can you display the 'Gaming Soundtrack' playlist on my screen?", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Gaming Soundtrack"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2256", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "I need the 'Bossa Nova' playlist to start playing; show me its list.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Bossa Nova"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2257", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "Bring up the 'Piano Relax' playlist, please.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Piano Relax"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2258", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "I want to check out the songs in my 'Vinyl Finds' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Vinyl Finds"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2259", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "Display the track list for 'Happy Hits'.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Happy Hits"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2260", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "Show the 'Urban Grooves' playlist, please.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Urban Grooves"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2261", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "Could you load the 'R&B Classics' playlist?", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "R&B Classics"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2262", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "Please show the song list for my 'Festival Fever' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Festival Fever"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2263", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "Open up the 'Love Songs' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Love Songs"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2264", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "I'd like to take a look at the 'Indie Rock' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Indie Rock"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2265", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "Please open the playlist named 'Meditation' so I can relax.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Meditation"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2266", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "Show the 'Reggae Rhythms' playlist for some island vibes.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Reggae Rhythms"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2267", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "Can you display the 'Broadway Hits' playlist?", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Broadway Hits"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2268", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "I want to check out my 'Instrumental Moods' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Instrumental Moods"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2269", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "Kindly show the 'Epic Scores' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Epic Scores"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-2270", "tools": [{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"]}]}
{"query": "Could you show me a list of my recently used apps?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2271"}
{"query": "I need to check which applications I have opened most recently. Please display them.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2272"}
{"query": "List the apps I've been using lately.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2273"}
{"query": "Show my device's recent applications, please.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2274"}
{"query": "What are the most recent apps I have run on my phone?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2275"}
{"query": "Display the list of my recently accessed apps.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2276"}
{"query": "I want to see my recent app history. Can you pull that information?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2277"}
{"query": "Fetch the recently used applications on my device.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2278"}
{"query": "Please list the apps that were opened recently on my phone.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2279"}
{"query": "Show me the log of applications I've used in the last few sessions.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2280"}
{"query": "I need to see what applications I've launched most recently.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2281"}
{"query": "Open the list of recent apps on my device.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2282"}
{"query": "Could you retrieve the recent applications that I used?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2283"}
{"query": "I want to check my recently active applications; please show me the list.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2284"}
{"query": "Display the apps that were most recently in use on my device.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2285"}
{"query": "Can you show me the recent applications I've been using?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2286", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "Please display the apps that I've opened most recently.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2287", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "I need to check which apps I used last; list them for me.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2288", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "Could you fetch my recently used applications?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2289", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "Retrieve the set of apps I recently accessed on my phone.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2290", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "List the apps that I have used in the latest session.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2291", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "Show me my recent app history.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2292", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "What are the apps I've recently opened on my device?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2293", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "Kindly list the applications I've used in my most recent session.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2294", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "Display all the apps that I interacted with recently.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2295", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "I would like to see which applications were accessed last. Please show them.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2296", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "Can you pull up the list of apps that were recently active?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2297", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "I want a rundown of my recent apps. Could you provide that?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2298", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "Fetch the history of my recently launched applications.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2299", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "Please bring up the recent applications list from my device.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2300", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "Show recent apps, please.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2301", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "Could you list all the apps I have used recently?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2302", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "Display the most recently accessed apps on my smartphone.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2303", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "I need to see my recent app activity. Can you show me that?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2304", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "Retrieve the list of my recent applications on this device.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2305", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "Show me an overview of my recently used apps.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2306", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "I'd like to see a list of apps I've been using. Can you fetch that?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2307", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "Please pull up my app usage history from today.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2308", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "Retrieve all the applications that were launched in the last session.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2309", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "Let me have a look at the recent apps that have been opened.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2310", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "Display the list of my last used applications.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2311", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "I want to check which apps I’ve been using lately. Show them.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2312", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "Give me a rundown of the functionally recent apps on my phone.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2313", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "Fetch and display my list of recently accessed apps.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2314", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "Show recently used apps on my phone's interface.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2315", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "Open up the list of apps I've just been using.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2316", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "List all the applications I've recently interacted with.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2317", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "Can you access the history of my apps opened recently?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2318", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "Show the sequence of apps that I used last on my device.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2319", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "Retrieve my recent application usage information.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2320", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "Please pull the recent app screen so I can check what I used.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2321", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "I’d appreciate it if you could display my recently accessed apps list.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2322", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "Could you please bring up the recent applications that were just active on my phone?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2323", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
{"query": "List out the apps which were in use in my latest activity session.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-2324", "tools": [{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments": {}, "returns": {"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example": ["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples": ["# View recent apps\nACTION_VIEW_RECENT_APPS()"]}]}
