{"query": "I need a new plain text document; please name it 'Meeting Notes.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Meeting Notes.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10000"}
{"query": "Could you generate a PDF document titled 'Report.pdf' for my project?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Report.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10001"}
{"query": "Please create an image file with the title 'Holiday Photo.jpg'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "image/jpeg", "initial_name": "Holiday Photo.jpg"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10002"}
{"query": "I'd like to set up a new PDF file called 'Invoice.pdf'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Invoice.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10003"}
{"query": "Set up a fresh text document with the suggested name 'Draft.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Draft.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10004"}
{"query": "Generate a new document for me: I'd like a PDF titled 'Ebook.pdf'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Ebook.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10005"}
{"query": "I need a new journal file. Create a plain text document and call it 'Journal.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Journal.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10006"}
{"query": "Please build a document for me in PDF format, naming it 'Manual.pdf'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Manual.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10007"}
{"query": "Could you initiate a new file? I'm looking for a text document named 'Notes.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Notes.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10008"}
{"query": "I want to create an image format document with the name 'Graphic.jpg'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "image/jpeg", "initial_name": "Graphic.jpg"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10009"}
{"query": "Help me create a new document. It should be in PDF format and called 'Summary.pdf'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Summary.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10010"}
{"query": "Can you use the app to build a plain text file defined as 'Research.txt'?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Research.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10011"}
{"query": "I need a PDF document created; please name it 'Document.pdf'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Document.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10012"}
{"query": "I'd appreciate a new text document set up with the title 'Todo.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Todo.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10013"}
{"query": "Set up a new file for me in an image format and call it 'Snap.jpg'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "image/jpeg", "initial_name": "Snap.jpg"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10014"}
{"query": "I need a plain text file named 'Calendar.txt' for my schedule. Can you create it?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Calendar.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10015", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Please open a new PDF document called 'Invoice.pdf' as soon as possible.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Invoice.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10016", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "I'd like a jpeg image document titled 'Sunset.jpg'. Could you get that started?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "image/jpeg", "initial_name": "Sunset.jpg"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10017", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Can you generate a new plain text note for me and name it 'Todo.txt'?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Todo.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10018", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Please set up a new text document called 'Summary.txt' for my meeting notes.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Summary.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10019", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "I need you to build a new PDF file titled 'Schedule.pdf'. Can you do that for me?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Schedule.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10020", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Could you open a new drawing in JPEG format named 'Sketch.jpg'?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "image/jpeg", "initial_name": "Sketch.jpg"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10021", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Generate a fresh plain text document titled 'Diary.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Diary.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10022", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Can you craft a PDF document for me with the title 'Budget.pdf'?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Budget.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10023", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "I want a new image document; please name the JPEG file 'Portrait.jpg'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "image/jpeg", "initial_name": "Portrait.jpg"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10024", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Please create a text file labeled 'Story.txt' for my writings.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Story.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10025", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Set up a new PDF document for me—I'd like it named 'Assignment.pdf'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Assignment.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10026", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "I require a JPEG image file. Could you call it 'Selfie.jpg'?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "image/jpeg", "initial_name": "Selfie.jpg"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10027", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Kindly produce a new text document, and please label it 'LectureNotes.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "LectureNotes.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10028", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Could you build a PDF file for me and title it 'Catalog.pdf'?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Catalog.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10029", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "I'd like to have a JPEG image document created, calling it 'Landscape.jpg'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "image/jpeg", "initial_name": "Landscape.jpg"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10030", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Prepare a new text file for me, please designate it as 'Memo.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Memo.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10031", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "I want a PDF document created with the name 'Form.pdf'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Form.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10032", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Could you create an image file in JPEG format and save it as 'Banner.jpg'?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "image/jpeg", "initial_name": "Banner.jpg"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10033", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "I need a plain text document called 'Journal.txt' produced.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Journal.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10034", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Formulate a PDF document for me named 'Guide.pdf'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Guide.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10035", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "I would like to author a new text file titled 'Checklist.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Checklist.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10036", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Could you engage the creation of a JPEG image document named 'Art.jpg'?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "image/jpeg", "initial_name": "Art.jpg"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10037", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Set up a lightweight text document for me and call it 'TodoList.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "TodoList.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10038", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "I require the generation of a detailed PDF file titled 'Manual.pdf'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Manual.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10039", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Could you produce an image document in JPEG format with the name 'Logo.jpg'?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "image/jpeg", "initial_name": "Logo.jpg"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10040", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Please initiate a fresh text note titled 'Observations.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Observations.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10041", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "I'm looking to create a PDF document for work; please call it 'Contract.pdf'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Contract.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10042", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Kindly launch a new photo document with the name 'Picnic.jpg'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "image/jpeg", "initial_name": "Picnic.jpg"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10043", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Would you mind developing a text document named 'DiaryEntry.txt'?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "DiaryEntry.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10044", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "I need a professionally formatted PDF titled 'ResearchPaper.pdf'. Please create one.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "ResearchPaper.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10045", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Generate a new image-based document called 'LandscapeView.jpg' in JPEG format.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "image/jpeg", "initial_name": "LandscapeView.jpg"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10046", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Open a fresh text file and designate it as 'MeetingMinutes.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "MeetingMinutes.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10047", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Could you build a PDF file with the title 'Portfolio.pdf'?", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "Portfolio.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10048", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Create a new image file in JPEG format and name it 'Thumbnail.jpg', please.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "image/jpeg", "initial_name": "Thumbnail.jpg"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10049", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Please get me a new text document called 'Recipe.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "Recipe.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10050", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "I wish to initiate a PDF document that will be called 'ScheduleReport.pdf'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "ScheduleReport.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10051", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Craft a new JPEG image document and go with the name 'Festival.jpg'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "image/jpeg", "initial_name": "Festival.jpg"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10052", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Launch a fresh document that is text-based with the name 'NotesArchive.txt'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "text/plain", "initial_name": "NotesArchive.txt"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10053", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Assemble a PDF file for me with the title 'PerformanceReview.pdf'.", "answer": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"mime_type": "application/pdf", "initial_name": "PerformanceReview.pdf"}}, "unique_idx": "ACTION_CREATE_DOCUMENT-10054", "tools": [{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"]}]}
{"query": "Can you update my contact details for John? His record is at content://contacts/people/john and please set his phone number to 123-456-7890.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/john", "contact_info": {"phone": "123-456-7890"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10055"}
{"query": "Please modify the contact at URI content://contacts/people/jane. I want to update her email to jane.doe@example.com and set her address as '123 Main St, New York'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/jane", "contact_info": {"email": "jane.doe@example.com", "address": "123 Main St, New York"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10056"}
{"query": "I need to update my business partner's details. The contact can be found at content://contacts/people/partner. Please change the company field to Acme Corp.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/partner", "contact_info": {"company": "Acme Corp"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10057"}
{"query": "Can you modify the contact entry at content://contacts/people/alice? I'd like to update her name to 'Alice Smith'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/alice", "contact_info": {"name": "Alice Smith"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10058"}
{"query": "Please update the contact with URI content://contacts/people/bob. Change his phone to 555-1234 and set his company to 'Tech Innovations'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/bob", "contact_info": {"phone": "555-1234", "company": "Tech Innovations"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10059"}
{"query": "Could you change the contact details at content://contacts/people/carla? I need to set her email to carla@example.com.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/carla", "contact_info": {"email": "carla@example.com"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10060"}
{"query": "Patch the details for the contact located at content://contacts/people/kyle: update his address to '456 Elm St, Springfield'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/kyle", "contact_info": {"address": "456 Elm St, Springfield"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10061"}
{"query": "Please update the record at contact URI content://contacts/people/charlie by adding his new email (charlie@company.com) and phone number 9876543210.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/charlie", "contact_info": {"email": "charlie@company.com", "phone": "9876543210"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10062"}
{"query": "I need to edit the contact at content://contacts/people/denise. Kindly update her company to Global Inc.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/denise", "contact_info": {"company": "Global Inc"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10063"}
{"query": "Hey, update my friend Eli's contact details at content://contacts/people/eli by setting his email to eli@domain.org.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/eli", "contact_info": {"email": "eli@domain.org"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10064"}
{"query": "Please change the details for the contact at content://contacts/people/frank. I want his address updated to '789 Broadway, NY' and his name corrected to 'Frank L.'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/frank", "contact_info": {"address": "789 Broadway, NY", "name": "Frank L."}}}, "unique_idx": "ACTION_EDIT_CONTACT-10065"}
{"query": "I need to update one of my contacts at content://contacts/people/grace. Could you modify her phone number to 321-654-0987?", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/grace", "contact_info": {"phone": "321-654-0987"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10066"}
{"query": "Please edit my colleague's information in the address book using URI content://contacts/people/harry. Update his email to harry@workplace.com and change his company to Big Tech.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/harry", "contact_info": {"email": "harry@workplace.com", "company": "Big Tech"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10067"}
{"query": "Kindly update the details for the contact at content://contacts/people/ivy by changing her name to 'Ivy Green'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/ivy", "contact_info": {"name": "Ivy Green"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10068"}
{"query": "I want to modify the contact available at content://contacts/people/jack. Please set his phone number to 202-555-0198 and update his address to '101 First Ave, San Francisco'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/jack", "contact_info": {"phone": "202-555-0198", "address": "101 First Ave, San Francisco"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10069"}
{"query": "Kindly update the details for the contact at content://contacts/people/john by setting his name to 'John Doe'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/john", "contact_info": {"name": "John Doe"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10070", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Please modify the email for the contact found at content://contacts/people/alice, setting it to alice@mail.com.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/alice", "contact_info": {"email": "alice@mail.com"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10071", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Could you update the contact at content://contacts/people/mike by changing his phone number to 123-4567?", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/mike", "contact_info": {"phone": "123-4567"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10072", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "I want to modify my friend's record at content://contacts/people/linda by updating the address to '1234 Maple St'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/linda", "contact_info": {"address": "1234 Maple St"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10073", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Please edit the contact at content://contacts/people/paul and update his email to paul@work.org and phone to 321-7654.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/paul", "contact_info": {"email": "paul@work.org", "phone": "321-7654"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10074", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "I need to correct the record at content://contacts/people/susan. Please change her company to 'Innovate LLC'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/susan", "contact_info": {"company": "Innovate LLC"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10075", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Please revise the contact located at content://contacts/people/yasmine by updating her phone number to 555-6789.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/yasmine", "contact_info": {"phone": "555-6789"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10076", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Kindly update the contact at content://contacts/people/rachel with a new email: rachel@domain.net.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/rachel", "contact_info": {"email": "rachel@domain.net"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10077", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Change the phone number of the contact at content://contacts/people/brian to 999-8888.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/brian", "contact_info": {"phone": "999-8888"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10078", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "I need to update my contact at content://contacts/people/emma. Please change her address to '456 Oak Road'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/emma", "contact_info": {"address": "456 Oak Road"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10079", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Could you update the details for my contact at content://contacts/people/zoe and change her name to Zoe Blue?", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/zoe", "contact_info": {"name": "Zoe Blue"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10080", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Please revise the contact information at content://contacts/people/lucas by changing his company to 'Alpha Corp'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/lucas", "contact_info": {"company": "Alpha Corp"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10081", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "I want to update the contact at content://contacts/people/rick; can you modify his email to rick@example.com?", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/rick", "contact_info": {"email": "rick@example.com"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10082", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Edit the contact at content://contacts/people/samuel by updating his phone number to 555-0101 and his email to samuel@mailer.com.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/samuel", "contact_info": {"phone": "555-0101", "email": "samuel@mailer.com"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10083", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Please update the record for content://contacts/people/noah, changing the address to '789 Pine Lane'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/noah", "contact_info": {"address": "789 Pine Lane"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10084", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "I need to update the details for the contact at content://contacts/people/olivia. Please modify her company to 'Bright Future Inc' and her phone to 123-0000.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/olivia", "contact_info": {"company": "Bright Future Inc", "phone": "123-0000"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10085", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Please modify the contact found at content://contacts/people/david by setting his name to David Smith.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/david", "contact_info": {"name": "David Smith"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10086", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "I would like to change the email of the contact at content://contacts/people/eria to eria@network.com.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/eria", "contact_info": {"email": "eria@network.com"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10087", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Update the phone number for the contact at content://contacts/people/fiona to 777-2222.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/fiona", "contact_info": {"phone": "777-2222"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10088", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Could you update the contact at content://contacts/people/maria? I need her address changed to '890 Birch Blvd'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/maria", "contact_info": {"address": "890 Birch Blvd"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10089", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Please change the email and company details of my colleague at content://contacts/people/steve to 'steve@company.org' and 'TechMasters' respectively.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/steve", "contact_info": {"email": "steve@company.org", "company": "TechMasters"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10090", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Kindly update the details of the contact at content://contacts/people/lila by setting the phone number to 444-3333.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/lila", "contact_info": {"phone": "444-3333"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10091", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Edit the contact entry at content://contacts/people/charlie and change his name to 'Charles Xavier'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/charlie", "contact_info": {"name": "Charles Xavier"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10092", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "I need to update the contact at content://contacts/people/becky with a new email address: becky@mail.com.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/becky", "contact_info": {"email": "becky@mail.com"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10093", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Can you change the company for the contact at content://contacts/people/trent to 'Enterprise Solutions'?", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/trent", "contact_info": {"company": "Enterprise Solutions"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10094", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Please update the contact at content://contacts/people/anna by changing her phone number to 123-3214 and her name to 'Anna Marie'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/anna", "contact_info": {"phone": "123-3214", "name": "Anna Marie"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10095", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Update the contact identified by content://contacts/people/frank. Please change his address to '500 N Central Ave'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/frank", "contact_info": {"address": "500 N Central Ave"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10096", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "I want to edit the contact at content://contacts/people/nina by changing her email to nina@blue.com and her company to 'BlueTech'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/nina", "contact_info": {"email": "nina@blue.com", "company": "BlueTech"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10097", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Could you modify the contact details for content://contacts/people/kevin and set his name as 'Kevin Hart'?", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/kevin", "contact_info": {"name": "Kevin Hart"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10098", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Please adjust the contact with URI content://contacts/people/luke by updating his phone to 888-7777 and his email to luke@star.com.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/luke", "contact_info": {"phone": "888-7777", "email": "luke@star.com"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10099", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Kindly edit the record at content://contacts/people/mia by setting her company to 'Future Innovators'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/mia", "contact_info": {"company": "Future Innovators"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10100", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "I need to revise the contact at content://contacts/people/ginger; please change her address to '123 Cherry Lane'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/ginger", "contact_info": {"address": "123 Cherry Lane"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10101", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Update the contact at content://contacts/people/arthur with new details by setting his phone to 666-7777 and his name to 'Arthur King'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/arthur", "contact_info": {"phone": "666-7777", "name": "Arthur King"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10102", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Can you update my contact entry at content://contacts/people/ella? I want her email changed to ella@work.org.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/ella", "contact_info": {"email": "ella@work.org"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10103", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Please modify the information for the contact at content://contacts/people/igor by updating his company to 'Digital World'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/igor", "contact_info": {"company": "Digital World"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10104", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "I need to update the contact at content://contacts/people/julia. Please change her phone number to 123-9876 and her email to julia@mail.net.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/julia", "contact_info": {"phone": "123-9876", "email": "julia@mail.net"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10105", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Kindly change the email for the contact at content://contacts/people/oliver to oliver@company.com.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/oliver", "contact_info": {"email": "oliver@company.com"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10106", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Could you please help correct my contact details at content://contacts/people/fred by setting the address to '90 Elm Street'?", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/fred", "contact_info": {"address": "90 Elm Street"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10107", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "Please change the name of the contact found at content://contacts/people/gina to 'Gina Lopez'.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/gina", "contact_info": {"name": "Gina Lopez"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10108", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "I need to revise my associate's details. The contact is located at content://contacts/people/harper. Kindly update his email to harper@messenger.net and his phone to 555-9999.", "answer": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/harper", "contact_info": {"email": "harper@messenger.net", "phone": "555-9999"}}}, "unique_idx": "ACTION_EDIT_CONTACT-10109", "tools": [{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}}]}
{"query": "I need to open a PDF document for editing. Can you help me select one?", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/pdf"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10110"}
{"query": "Please let me pick a plain text file from my device.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/plain"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10111"}
{"query": "Open a file with an image format so that I can work on it.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["image/*"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10112"}
{"query": "I would like to choose several documents available in either PDF or plain text format. Let me select more than one at a time.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/pdf", "text/plain"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10113"}
{"query": "Can you open an image file for me? I'm looking for persistent access to it.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["image/*"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10114"}
{"query": "Help me open a document that's in PDF format for long-term editing.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/pdf"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10115"}
{"query": "Allow me to browse and select a PDF file from my files.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/pdf"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10116"}
{"query": "I need to select documents in both text and PDF formats. I plan to pick more than one file; please enable multiple selections.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/plain", "application/pdf"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10117"}
{"query": "I'm looking for image files to attach to my report. Could you let me choose multiple images?", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["image/*"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10118"}
{"query": "Find me an external document that is a plain text file.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/plain"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10119"}
{"query": "I want to launch a file picker to select a PDF document from my cloud storage.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/pdf"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10120"}
{"query": "Open the file chooser for image documents, and allow me to pick multiple files if necessary.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["image/*"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10121"}
{"query": "I need a document viewer to pick a plain text file – please open the file dialog for text documents.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/plain"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10122"}
{"query": "Please open documents of type PDF and text. I would like the option to select more than one file.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/pdf", "text/plain"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10123"}
{"query": "From my device, I want to open a single image file for persistent use.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["image/*"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10124"}
{"query": "Help me open a PDF file I can edit long-term.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/pdf"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10125", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Could you let me pick a single text file from my device?", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/plain"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10126", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I need several images; allow me to open multiple image files for persistent access.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["image/*"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10127", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I want to choose a document that's in PDF format from my files.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/pdf"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10128", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Select a plain text file from my storage for editing.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/plain"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10129", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I need to retrieve a PDF document from my cloud storage. Let me pick one file, please.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/pdf"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10130", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Let me access a TXT document for long-term management from my device.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/plain"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10131", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Get me an image file from my local archive.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["image/*"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10132", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I want to browse files and pick a PDF document.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/pdf"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10133", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Show me a selection dialog where I can pick multiple plain text files.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/plain"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10134", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I want to choose more than one image at once. Please open a multi-select dialog for images.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["image/*"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10135", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I need to open both text and PDF files, and I want to be able to select multiple documents.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/plain", "application/pdf"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10136", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Need a dialog to choose a PDF document; I'm only selecting one file.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/pdf"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10137", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Please open up the file picker for plain text documents.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/plain"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10138", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I require selecting an image file. Let me pick one image from my gallery.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["image/*"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10139", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I want to select one document that is in text format. Open my document picker.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/plain"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10140", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Could you please provide a way to select my PDF file?", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/pdf"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10141", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I'm selecting multiple images. Help me pick several image files at once.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["image/*"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10142", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Can you allow me to open several files? I'm interested in both PDFs and text documents.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/pdf", "text/plain"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10143", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I need to pick out one text file from my system for review.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/plain"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10144", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Give me access to a PDF document stored remotely so I can edit it later.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/pdf"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10145", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Please let me choose an image file for continuous access from my photos.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["image/*"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10146", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I would like to select several PDFs for my records. Open a multi-select for PDF files, please.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/pdf"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10147", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Help me pick a single plain text document from my storage.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/plain"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10148", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I need to select an image from my device for an upcoming editing session.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["image/*"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10149", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I'm trying to open one PDF file that I can work on later; please open the file picker.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/pdf"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10150", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Could you bring up the file selector for a plain text file, please?", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/plain"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10151", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I wish to pick multiple documents—one in PDF and one in plain text. Let me choose them together.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/pdf", "text/plain"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10152", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I want to open a file picker for my images; if possible, allow selecting multiple images.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["image/*"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10153", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Please allow me to choose a single PDF file from my list; one is enough.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/pdf"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10154", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I'm searching for a text document to open; nothing fancy, just one file will do.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/plain"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10155", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Could I select one image only? I just need access to a single image document.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["image/*"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10156", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I want to choose one PDF document for permanent access. Please open the file chooser.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/pdf"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10157", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Open a plain text file from my documents — just one file, please.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/plain"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10158", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Provide a file selection for multiple images; I need to choose several.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["image/*"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10159", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I'm looking to attach documents in both PDF and plain text formats; let me pick multiple files.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/pdf", "text/plain"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10160", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Launch the file selector to choose an image file from my photos.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["image/*"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10161", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I want to use the document picker to select a PDF for some editing tasks.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["application/pdf"]}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10162", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "Help me bring up a file picker to choose multiple plain text documents for review.", "answer": {"plan": "ACTION_OPEN_DOCUMENT", "arguments": {"mime_types": ["text/plain"], "allow_multiple": true}}, "unique_idx": "ACTION_OPEN_DOCUMENT-10163", "tools": [{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"]}]}
{"query": "I would like to select an image file from my device for a quick attachment.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "image/*"}}, "unique_idx": "ACTION_GET_CONTENT-10164"}
{"query": "Can you help me grab an audio file, maybe for a ringtone?", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "audio/*"}}, "unique_idx": "ACTION_GET_CONTENT-10165"}
{"query": "Please fetch a video file from my storage that I can watch immediately.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "video/*"}}, "unique_idx": "ACTION_GET_CONTENT-10166"}
{"query": "Retrieve a file of any type from my computer.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "*/*"}}, "unique_idx": "ACTION_GET_CONTENT-10167"}
{"query": "I need to select several image files for a presentation. Can you pick multiple images?", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "image/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-10168"}
{"query": "Could you fetch multiple video clips from my collection? I want to review them later.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "video/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-10169"}
{"query": "Select a single PDF file from my documents for review.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "application/pdf"}}, "unique_idx": "ACTION_GET_CONTENT-10170"}
{"query": "I need a few documents attached; please allow me to choose several PDF files.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "application/pdf", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-10171"}
{"query": "Help me pick one audio snippet from my media library.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "audio/*"}}, "unique_idx": "ACTION_GET_CONTENT-10172"}
{"query": "I'm looking to upload various files. Can you let me select multiple files of any type?", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "*/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-10173"}
{"query": "Show me a clear picture from my gallery to use in my project.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "image/*"}}, "unique_idx": "ACTION_GET_CONTENT-10174"}
{"query": "Fetch a video file from my collection for immediate playback.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "video/*"}}, "unique_idx": "ACTION_GET_CONTENT-10175"}
{"query": "Could you get me a single document file so I can review its content?", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "application/pdf"}}, "unique_idx": "ACTION_GET_CONTENT-10176"}
{"query": "I need several tracks from my audio files—please enable multiple selections for music files.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "audio/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-10177"}
{"query": "Get me one image file that I can immediately use for my report.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "image/*"}}, "unique_idx": "ACTION_GET_CONTENT-10178"}
{"query": "I want to attach an image to my email; please let me select one from my photos.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "image/*"}}, "unique_idx": "ACTION_GET_CONTENT-10179", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Could you fetch a single audio file for my new ringtone?", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "audio/*"}}, "unique_idx": "ACTION_GET_CONTENT-10180", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I need to grab one PDF document from my files for a quick review, can you help?", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "application/pdf"}}, "unique_idx": "ACTION_GET_CONTENT-10181", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I need any file regardless of format; just pick one for me.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "*/*"}}, "unique_idx": "ACTION_GET_CONTENT-10182", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Let me choose several images for my collage. Please allow multiple selections.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "image/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-10183", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I'd like to select a number of audio files to create a playlist. Enable multiple file selection for audio.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "audio/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-10184", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Can you open my documents folder so I can pick several PDF files for my research?", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "application/pdf", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-10185", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I require multiple video files for my editing project; please let me select several.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "video/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-10186", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I need to review some files from my computer. Let me choose more than one file of any type.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "*/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-10187", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Please let me select a single file of any format from my computer.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "*/*"}}, "unique_idx": "ACTION_GET_CONTENT-10188", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I need a profile picture. Open my gallery for me to select a single image.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "image/*"}}, "unique_idx": "ACTION_GET_CONTENT-10189", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Fetch a video that I can use in my presentation, just one clip is enough.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "video/*"}}, "unique_idx": "ACTION_GET_CONTENT-10190", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I want to obtain an audio file from my device. Please get one for me.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "audio/*"}}, "unique_idx": "ACTION_GET_CONTENT-10191", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Locate a PDF document from my records; I only need one for today's meeting.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "application/pdf"}}, "unique_idx": "ACTION_GET_CONTENT-10192", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Could you let me browse through my photos so I can choose several images for my gallery?", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "image/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-10193", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I'm attaching media to my message; please provide access to video files so I can pick one.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "video/*"}}, "unique_idx": "ACTION_GET_CONTENT-10194", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I need to compile some PDFs for my reference, let me select more than one document.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "application/pdf", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-10195", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I want to create a mix for my event. Let me choose multiple audio clips.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "audio/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-10196", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Could you let me fetch a file regardless of its type? I just need one file from my storage.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "*/*"}}, "unique_idx": "ACTION_GET_CONTENT-10197", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Attach a single image from my album for my social media post.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "image/*"}}, "unique_idx": "ACTION_GET_CONTENT-10198", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I need a short video clip for my blog, please fetch one video file.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "video/*"}}, "unique_idx": "ACTION_GET_CONTENT-10199", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I'm attaching documents to an email; let me choose a few PDFs.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "application/pdf", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-10200", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Find me an audio track from my library for background music; just one will do.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "audio/*"}}, "unique_idx": "ACTION_GET_CONTENT-10201", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I need to select any available file from my storage for a quick task. Any type is fine.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "*/*"}}, "unique_idx": "ACTION_GET_CONTENT-10202", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Grab me a couple of images for my upcoming photo album.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "image/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-10203", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I need to change my ringtone; fetch a single audio file for me.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "audio/*"}}, "unique_idx": "ACTION_GET_CONTENT-10204", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Fetch several PDF documents from my files as I have a series of reports to review.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "application/pdf", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-10205", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I need one video file for a demonstration; please open my file picker for video clips.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "video/*"}}, "unique_idx": "ACTION_GET_CONTENT-10206", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Let me select a file from my storage. I don't care about the format; one file is enough.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "*/*"}}, "unique_idx": "ACTION_GET_CONTENT-10207", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I need to add multiple pictures to my travel diary. Provide me with options to select several images.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "image/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-10208", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I want to update my ringtone with a new sound; please let me pick one audio file.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "audio/*"}}, "unique_idx": "ACTION_GET_CONTENT-10209", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "For my presentation, I need to attach a report. Let me choose one PDF file from my documents.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "application/pdf"}}, "unique_idx": "ACTION_GET_CONTENT-10210", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I require a video clip to explain a concept during my lecture. Fetch a single video file, please.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "video/*"}}, "unique_idx": "ACTION_GET_CONTENT-10211", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I want to browse my files regardless of their type; let me pick any one file for this task.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "*/*"}}, "unique_idx": "ACTION_GET_CONTENT-10212", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I need to select multiple photos to post on social media, please let me pick several image files.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "image/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-10213", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I'm updating my alarm sound. Can you pull an audio file from my collection for me?", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "audio/*"}}, "unique_idx": "ACTION_GET_CONTENT-10214", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I need a PDF file for an important meeting. Open my documents so I can select one.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "application/pdf"}}, "unique_idx": "ACTION_GET_CONTENT-10215", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I require a video file for a quick demo. Allow me to choose one video from my storage.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "video/*"}}, "unique_idx": "ACTION_GET_CONTENT-10216", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I want to access my files urgently; let me pick one file regardless of its format.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "*/*"}}, "unique_idx": "ACTION_GET_CONTENT-10217", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Help me select a few different images for my new portfolio. I need to choose multiple pictures.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "image/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-10218", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I need a new ringtone. Let me pick a single audio file from my music library.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "audio/*"}}, "unique_idx": "ACTION_GET_CONTENT-10219", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "For record-keeping, please allow me to select multiple PDF files from my documents.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "application/pdf", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-10220", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "I need to create a short film clip. Let me choose several video files from my storage for editing.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "video/*", "allow_multiple": true}}, "unique_idx": "ACTION_GET_CONTENT-10221", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Open my file explorer so I can choose one file of any kind for this quick task.", "answer": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "*/*"}}, "unique_idx": "ACTION_GET_CONTENT-10222", "tools": [{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"]}]}
{"query": "Please open the PDF file located at content://documents/report.pdf.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://documents/report.pdf", "mime_type": "application/pdf"}}, "unique_idx": "ACTION_OPEN_CONTENT-10223"}
{"query": "Could you display this image for me at content://gallery/pic01.jpg?", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://gallery/pic01.jpg", "mime_type": "image/jpeg"}}, "unique_idx": "ACTION_OPEN_CONTENT-10224"}
{"query": "I'd like to listen to the audio clip stored at content://media/audio/song.mp3.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://media/audio/song.mp3", "mime_type": "audio/mpeg"}}, "unique_idx": "ACTION_OPEN_CONTENT-10225"}
{"query": "Open the video available at content://videos/movie.mp4, please.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://videos/movie.mp4", "mime_type": "video/mp4"}}, "unique_idx": "ACTION_OPEN_CONTENT-10226"}
{"query": "Show me the text document at content://docs/meeting_notes.txt.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://docs/meeting_notes.txt", "mime_type": "text/plain"}}, "unique_idx": "ACTION_OPEN_CONTENT-10227"}
{"query": "I need to open the file at content://files/image.png.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://files/image.png", "mime_type": "image/png"}}, "unique_idx": "ACTION_OPEN_CONTENT-10228"}
{"query": "Access this ebook for me: content://ebooks/novel.epub so I can read it.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://ebooks/novel.epub", "mime_type": "application/epub+zip"}}, "unique_idx": "ACTION_OPEN_CONTENT-10229"}
{"query": "Can you open content://downloads/archive.zip quickly?", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://downloads/archive.zip", "mime_type": "application/zip"}}, "unique_idx": "ACTION_OPEN_CONTENT-10230"}
{"query": "Display the media file found at content://media/video_clip.avi on my screen.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://media/video_clip.avi", "mime_type": "video/x-msvideo"}}, "unique_idx": "ACTION_OPEN_CONTENT-10231"}
{"query": "I want to see the website snapshot stored at content://screenshots/webpage.jpeg.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://screenshots/webpage.jpeg", "mime_type": "image/jpeg"}}, "unique_idx": "ACTION_OPEN_CONTENT-10232"}
{"query": "Please load my notes from content://notes/todo.md.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://notes/todo.md", "mime_type": "text/markdown"}}, "unique_idx": "ACTION_OPEN_CONTENT-10233"}
{"query": "Could you open the presentation file at content://attachments/presentation.pptx?", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://attachments/presentation.pptx", "mime_type": "application/vnd.openxmlformats-officedocument.presentationml.presentation"}}, "unique_idx": "ACTION_OPEN_CONTENT-10234"}
{"query": "I have a sound file at content://audio/alarm.ogg, please open it.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://audio/alarm.ogg", "mime_type": "audio/ogg"}}, "unique_idx": "ACTION_OPEN_CONTENT-10235"}
{"query": "Fetch and open the spreadsheet located at content://files/spreadsheet.xlsx.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://files/spreadsheet.xlsx", "mime_type": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}}, "unique_idx": "ACTION_OPEN_CONTENT-10236"}
{"query": "Open the user manual from content://docs/user_manual.pdf without any delay.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://docs/user_manual.pdf", "mime_type": "application/pdf"}}, "unique_idx": "ACTION_OPEN_CONTENT-10237"}
{"query": "Try opening the memo file at content://notes/memo.md.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://notes/memo.md", "mime_type": "text/markdown"}}, "unique_idx": "ACTION_OPEN_CONTENT-10238", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Display the image stored at content://images/photo.jpeg for me.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://images/photo.jpeg", "mime_type": "image/jpeg"}}, "unique_idx": "ACTION_OPEN_CONTENT-10239", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Could you open the spreadsheet found at content://data/sales.xlsx?", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://data/sales.xlsx", "mime_type": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}}, "unique_idx": "ACTION_OPEN_CONTENT-10240", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "I want to view a presentation located at content://presentations/quarterly.pptx.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://presentations/quarterly.pptx", "mime_type": "application/vnd.openxmlformats-officedocument.presentationml.presentation"}}, "unique_idx": "ACTION_OPEN_CONTENT-10241", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Load the picture at content://pictures/vacation.png.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://pictures/vacation.png", "mime_type": "image/png"}}, "unique_idx": "ACTION_OPEN_CONTENT-10242", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Please open the PDF document at content://docs/invoice.pdf.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://docs/invoice.pdf", "mime_type": "application/pdf"}}, "unique_idx": "ACTION_OPEN_CONTENT-10243", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Show me the system log file located at content://logs/system.log.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://logs/system.log", "mime_type": "text/plain"}}, "unique_idx": "ACTION_OPEN_CONTENT-10244", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "I need to see the brochure available at content://marketing/brochure.pdf.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://marketing/brochure.pdf", "mime_type": "application/pdf"}}, "unique_idx": "ACTION_OPEN_CONTENT-10245", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Display the audio file found at content://music/song.mp3.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://music/song.mp3", "mime_type": "audio/mpeg"}}, "unique_idx": "ACTION_OPEN_CONTENT-10246", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Play the video located at content://videos/trailer.mp4 please.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://videos/trailer.mp4", "mime_type": "video/mp4"}}, "unique_idx": "ACTION_OPEN_CONTENT-10247", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Kindly open the report file at content://reports/annual.docx for me.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://reports/annual.docx", "mime_type": "application/vnd.openxmlformats-officedocument.wordprocessingml.document"}}, "unique_idx": "ACTION_OPEN_CONTENT-10248", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Please open the compressed archive at content://files/archive.zip.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://files/archive.zip", "mime_type": "application/zip"}}, "unique_idx": "ACTION_OPEN_CONTENT-10249", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Open the markdown meeting notes located at content://notes/meeting.md.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://notes/meeting.md", "mime_type": "text/markdown"}}, "unique_idx": "ACTION_OPEN_CONTENT-10250", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Please display the blueprint at content://designs/house.svg.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://designs/house.svg", "mime_type": "image/svg+xml"}}, "unique_idx": "ACTION_OPEN_CONTENT-10251", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Could you load and show the vector image at content://graphics/logo.svg?", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://graphics/logo.svg", "mime_type": "image/svg+xml"}}, "unique_idx": "ACTION_OPEN_CONTENT-10252", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "I want to open the photo at content://gallery/sunset.jpg.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://gallery/sunset.jpg", "mime_type": "image/jpeg"}}, "unique_idx": "ACTION_OPEN_CONTENT-10253", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Please load the Excel spreadsheet at content://spreadsheets/budget.xlsx.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://spreadsheets/budget.xlsx", "mime_type": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}}, "unique_idx": "ACTION_OPEN_CONTENT-10254", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Show me the project proposal found at content://docs/proposal.pdf.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://docs/proposal.pdf", "mime_type": "application/pdf"}}, "unique_idx": "ACTION_OPEN_CONTENT-10255", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Can you open my personal diary at content://diary/personal.txt?", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://diary/personal.txt", "mime_type": "text/plain"}}, "unique_idx": "ACTION_OPEN_CONTENT-10256", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Access the code snippet stored at content://code/snippet.py.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://code/snippet.py", "mime_type": "text/x-python"}}, "unique_idx": "ACTION_OPEN_CONTENT-10257", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Browse the wallpaper image at content://images/wallpaper.png.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://images/wallpaper.png", "mime_type": "image/png"}}, "unique_idx": "ACTION_OPEN_CONTENT-10258", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Access the ISO backup image at content://backups/system.iso.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://backups/system.iso", "mime_type": "application/x-iso9660-image"}}, "unique_idx": "ACTION_OPEN_CONTENT-10259", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Would you open the font file located at content://fonts/arial.ttf?", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://fonts/arial.ttf", "mime_type": "font/ttf"}}, "unique_idx": "ACTION_OPEN_CONTENT-10260", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Open the archive from content://downloads/archive.rar.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://downloads/archive.rar", "mime_type": "application/x-rar-compressed"}}, "unique_idx": "ACTION_OPEN_CONTENT-10261", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Fetch the error logs from content://logs/error.log.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://logs/error.log", "mime_type": "text/plain"}}, "unique_idx": "ACTION_OPEN_CONTENT-10262", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Please open the contract document at content://contracts/contract.docx.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://contracts/contract.docx", "mime_type": "application/vnd.openxmlformats-officedocument.wordprocessingml.document"}}, "unique_idx": "ACTION_OPEN_CONTENT-10263", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Display the image found at content://images/cat.PNG.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://images/cat.PNG", "mime_type": "image/png"}}, "unique_idx": "ACTION_OPEN_CONTENT-10264", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Could you open the audiobook at content://audiobooks/narration.m4a?", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://audiobooks/narration.m4a", "mime_type": "audio/mp4"}}, "unique_idx": "ACTION_OPEN_CONTENT-10265", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Please load the artwork image from content://artwork/abstract.bmp.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://artwork/abstract.bmp", "mime_type": "image/bmp"}}, "unique_idx": "ACTION_OPEN_CONTENT-10266", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Open the movie file at content://movies/feature.mkv.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://movies/feature.mkv", "mime_type": "video/x-matroska"}}, "unique_idx": "ACTION_OPEN_CONTENT-10267", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Show the scanned document image at content://scans/document.tif.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://scans/document.tif", "mime_type": "image/tiff"}}, "unique_idx": "ACTION_OPEN_CONTENT-10268", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "I require to view the summary text at content://summaries/overview.txt.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://summaries/overview.txt", "mime_type": "text/plain"}}, "unique_idx": "ACTION_OPEN_CONTENT-10269", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Please load my class notes from content://lectures/lecture_notes.md.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://lectures/lecture_notes.md", "mime_type": "text/markdown"}}, "unique_idx": "ACTION_OPEN_CONTENT-10270", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Get me the cover image at content://covers/album.jpeg.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://covers/album.jpeg", "mime_type": "image/jpeg"}}, "unique_idx": "ACTION_OPEN_CONTENT-10271", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Open the secure document located at content://secure/policy.pdf.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://secure/policy.pdf", "mime_type": "application/pdf"}}, "unique_idx": "ACTION_OPEN_CONTENT-10272", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Can you open the network diagram at content://diagrams/network.vsdx?", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://diagrams/network.vsdx", "mime_type": "application/vnd.ms-visio"}}, "unique_idx": "ACTION_OPEN_CONTENT-10273", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Load the photograph from content://photos/vintage.JPG.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://photos/vintage.JPG", "mime_type": "image/jpeg"}}, "unique_idx": "ACTION_OPEN_CONTENT-10274", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Could you play the tune located at content://music/classic.ogg?", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://music/classic.ogg", "mime_type": "audio/ogg"}}, "unique_idx": "ACTION_OPEN_CONTENT-10275", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Please open the vector drawing at content://drawings/diagram.svg.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://drawings/diagram.svg", "mime_type": "image/svg+xml"}}, "unique_idx": "ACTION_OPEN_CONTENT-10276", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "Display the eBook located at content://books/novel.epub.", "answer": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://books/novel.epub", "mime_type": "application/epub+zip"}}, "unique_idx": "ACTION_OPEN_CONTENT-10277", "tools": [{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"]}]}
{"query": "I need to select a ringtone for my alarm. Could you open the ringtone picker?", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10278"}
{"query": "Please let me choose a ringtone. I want to set an alarm with my preferred sound.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10279"}
{"query": "Open the ringtone chooser so I can pick my alarm tone.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10280"}
{"query": "Could you trigger the ringtone selection process? I need to pick one for my alarm clock.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10281"}
{"query": "I want to customize my alarm. Open the ringtone picker for me.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10282"}
{"query": "Help me select a custom ringtone to use for my alarm. Please open the ringtone chooser.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10283"}
{"query": "I'm looking to change my alarm sound. Can you let me pick a ringtone from my device?", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10284"}
{"query": "Let me choose a ringtone for my morning alarm by opening the device's ringtone picker.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10285"}
{"query": "Could you activate the ringtone selection tool so that I can set my alarm tone?", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10286"}
{"query": "I would like to pick a new ringtone for my alarm. Open the ringtone selection interface, please.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10287"}
{"query": "Start the ringtone picker for me. I need to choose a sound for my alarm.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10288"}
{"query": "I want to select a sound for my alarm clock. Can you bring up my phone's ringtone chooser?", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10289"}
{"query": "Trigger the device's ringtone picker so I can select a tune for my alarm.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10290"}
{"query": "Please open the ringtone picker. I want to choose the ringtone for my alarm setting.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10291"}
{"query": "I'm updating my alarm settings. Let me choose a ringtone by opening the ringtone selection tool.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10292"}
{"query": "I need to pick a new alarm tone. Can you launch the ringtone selection tool?", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10293", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Could you show me the available ringtones? I want to choose a different sound for my alarm.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10294", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "I wish to update my alarm sound. Open the ringtone selector, please.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10295", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Please bring up the ringtone selection menu to set my alarm tone.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10296", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Launch the ringtone selection interface so that I may select a new alarm tone.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10297", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Can you enable the ringtone chooser for my alarm customization?", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10298", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Allow me to pick a ringtone for my alarm by opening the selection tool.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10299", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Open the ringtone picker to help me select my alarm sound.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10300", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "I would like to modify my alarm's tone; please activate the ringtone selection tool.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10301", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Set up the ringtone selection so I can choose a pleasing alarm sound.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10302", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Please start the device's ringtone chooser so I can update my alarm.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10303", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "I need a new alarm tone—can you open the ringtone picker for me?", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10304", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Activate the alarm sound selection tool so I can choose my ringtone.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10305", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Could you help me configure my alarm by letting me select a ringtone?", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10306", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "I want to customize my alarm—open the ringtone chooser.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10307", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Boot up the ringtone selection UI for my alarm settings.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10308", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Initiate the ringtone picker so I can choose my customized alarm vibe.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10309", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Would you kindly bring up the ringtone selection screen to choose a new alarm tone?", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10310", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Help me choose an alarm sound by launching the ringtone selector.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10311", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "I would appreciate it if you opened the device's ringtone picker for my alarm configuration.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10312", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Enable the menu for selecting a ringtone; I need a fresh alarm sound.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10313", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Open up the ringtone choosing dialog so I can set a new sound for my alarm.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10314", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "I need a ringtone for my alarm. Please launch the tone selection interface.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10315", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Let me select a custom alarm sound: start the ringtone picking process.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10316", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Get the ringtone selector up for me; I want to choose my alarm music.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10317", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Trigger the ringtone choosing tool to update my alarm tone.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10318", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "I want to change my alarm’s ringtone. Open the ringtone selection panel.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10319", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Would you please open a menu to select a ringtone for my alarm?", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10320", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "I need to set an alarm tone. Please let me choose one by opening the ringtone selector.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10321", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Fire up the ringtone selection so I can customize my alarm's ring tone.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10322", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Let me pick my alarm's ringtone. Activate the ringtone selecting tool.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10323", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "I'm trying to set up a fresh alarm sound; please launch the ringtone chooser.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10324", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Please bring up the ringtone selection system so I can choose my alarm tone.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10325", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "I want a unique alarm sound. Open the ringtone selection app for me.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10326", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Could you open the ringtone picker to help me select an alarm ringtone?", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10327", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Help me refresh my alarm by letting me choose a new ringtone. Please open the ringtone selection.", "answer": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}, "unique_idx": "ACTION_GET_RINGTONE-10328", "tools": [{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments": {}, "returns": {"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example": ["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples": ["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"]}]}
{"query": "Take a photo with the camera app using the default settings; let the system choose where to save it.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10329"}
{"query": "Can you capture an image and store it at content://myapp/images/123?", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://myapp/images/123"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10330"}
{"query": "I need to snap a picture. Please open my phone's camera app and capture the image with the usual settings.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10331"}
{"query": "Open the camera and save the photo at content://photos/storage.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://photos/storage"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10332"}
{"query": "Snap a picture for me using my device camera, letting the system decide the file location.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10333"}
{"query": "Capture a new image and save it under content://device/mypics/newimage, please.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://device/mypics/newimage"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10334"}
{"query": "I want to take a quick picture. Use the camera and choose the default storage location.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10335"}
{"query": "Could you quickly snap a pic and have it saved at content://user/data/pic1?", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://user/data/pic1"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10336"}
{"query": "Using the phone's camera, record an image and let the system determine the save path.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10337"}
{"query": "Please trigger the camera to take a photo and save it to content://custom/path/photo.jpg.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://custom/path/photo.jpg"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10338"}
{"query": "Can you take a snapshot and store it at content://app/images/date2023?", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://app/images/date2023"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10339"}
{"query": "Hey, would you capture an image using the camera app?", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10340"}
{"query": "Show me how to take a photo and optionally save it to content://myphotos/location.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://myphotos/location"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10341"}
{"query": "Take a picture using the camera, but don't worry about choosing a specific save path.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10342"}
{"query": "Trigger the camera and capture an image, storing it at content://alpha/beta/sample for later use.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://alpha/beta/sample"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10343"}
{"query": "Capture an image with default settings without specifying any storage location.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10344", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Snag a quick picture and save it to content://photos/storage1.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://photos/storage1"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10345", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Please take a snapshot using the camera and store the image at content://gallery/recent/snap1.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://gallery/recent/snap1"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10346", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Could you open the camera app, snap a shot and store it at content://custom/path/pic.png?", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://custom/path/pic.png"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10347", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Launch the camera to capture a photo; let the system decide where to save it.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10348", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Take a picture using the camera app and if possible, save it to content://images/latest/shot.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://images/latest/shot"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10349", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "I need an image captured by the camera but I don't require a specific storage path.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10350", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Activate the camera to snap a photo and save it at content://user/photos/snap.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://user/photos/snap"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10351", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Would you mind taking a picture and storing it at content://device/images/myphoto?", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://device/images/myphoto"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10352", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Snap a picture now using the camera, and let the phone choose the storage path.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10353", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Trigger the camera to capture an image and deposit it in content://media/capture/2023.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://media/capture/2023"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10354", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Can you capture a snapshot and save it to content://myapp/data/snap.jpg?", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://myapp/data/snap.jpg"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10355", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Could you grab a photo from the camera? There's no need to specify exactly where to save it.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10356", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Take a picture with the camera and allow the system to automatically determine the saving location.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10357", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "I want a quick photo from the camera; if possible, save it to content://capture/img001.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://capture/img001"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10358", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Please use the camera app to snap a photo and store it under content://photospace/img2.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://photospace/img2"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10359", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "I need a snapshot from the camera, but you can use the default save location if that works.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10360", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Capture an image with the camera and direct it to content://mystorage/new_pic.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://mystorage/new_pic"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10361", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Take a photo and let the system handle where to store it.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10362", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Could you launch the camera to capture an image without a predefined save path?", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10363", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Please snap a photo and store it at content://photo_bucket/fun_shot.jpeg.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://photo_bucket/fun_shot.jpeg"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10364", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "I need to click a picture with the camera; please save it at content://documents/pics/shot1.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://documents/pics/shot1"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10365", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Use the camera to capture a snapshot and let the phone decide the storage location by default.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10366", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Activate your camera, snap a photo, and save it to content://archive/camera/snap2.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://archive/camera/snap2"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10367", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Please take a photograph with your camera and store it automatically (no specific file location needed).", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10368", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Snap an image and, if you can, store it to content://snapshots/2023/event.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://snapshots/2023/event"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10369", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "I want to capture a picture using the camera; please save it to content://myfiles/photos/cap1.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://myfiles/photos/cap1"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10370", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Initiate the camera app and capture an image, storing it using the device's default option.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10371", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Use the camera to snap a photo now and deposit it at content://appdata/captured/image2.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://appdata/captured/image2"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10372", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Capture a shot using the camera; let the system select the save location automatically.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10373", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Please activate your camera, click a photo, and store it into content://folder/cam/photo_final.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://folder/cam/photo_final"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10374", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Could you please initiate the camera to take a picture and have it saved using the default storage?", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10375", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Snap a quick shot from the camera and deposit it at content://saved/photos123.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://saved/photos123"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10376", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Take a picture now, letting the system manage the saving location automatically.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10377", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "I'm asking for a camera capture; please save the photo to content://local/path/capture001.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://local/path/capture001"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10378", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Please launch the camera, click a photo, and let the system determine its save location automatically.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10379", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Snap a beautiful shot and store it at content://photo_archive/last_shot.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://photo_archive/last_shot"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10380", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Capture an image with the camera and let it be saved automatically without a specified URI.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10381", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Take a picture using the camera and set the URI to content://temp/images/quick.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {"file_uri": "content://temp/images/quick"}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10382", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Could you quickly capture a photo with the camera? There's no need to apply any fixed save path.", "answer": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_IMAGE_CAPTURE-10383", "tools": [{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required": false}}, "returns": {"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example": ["content://example/uri"]}, "examples": ["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"]}]}
{"query": "Could you add a new contact for me? I need to store Alice Smith's details; her phone number is 555-1234.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Alice Smith", "phone": "555-1234"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10384"}
{"query": "Please insert a contact entry with the name Michael Johnson and his email michael@example.com.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Michael Johnson", "email": "michael@example.com"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10385"}
{"query": "I want to add a contact for Samuel Green. His details are: name 'Samuel Green', phone '555-6789', email 'samuel.green@mail.com', and address '456 Elm Street'.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Samuel Green", "phone": "555-6789", "email": "samuel.green@mail.com", "address": "456 Elm Street"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10386"}
{"query": "Please add a new contact for Emily Brown. I have her phone number as 777-8888 and her address is 123 Maple Ave.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Emily Brown", "phone": "777-8888", "address": "123 Maple Ave"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10387"}
{"query": "Could you add my friend Lucas to my contacts? His phone number is 123-456-7890.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Lucas", "phone": "123-456-7890"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10388"}
{"query": "I need to create a contact for Nina Patel with her email address nina.patel@example.com.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Nina Patel", "email": "nina.patel@example.com"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10389"}
{"query": "Kindly insert a contact for Mr. Robert King. His phone is 999-9999 and his email is robert.king@domain.com.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Robert King", "phone": "999-9999", "email": "robert.king@domain.com"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10390"}
{"query": "Please set up a new contact for Sarah Williams. Include her email (sarahw@site.com) and address (789 Broad Street).", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Sarah Williams", "email": "sarahw@site.com", "address": "789 Broad Street"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10391"}
{"query": "Add a new contact entry for Carlos. His phone number is 321-654-0987.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Carlos", "phone": "321-654-0987"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10392"}
{"query": "Insert a contact: Diana Prince. Please add her email diana@themyscira.com.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Diana Prince", "email": "diana@themyscira.com"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10393"}
{"query": "I want to save the contact info of Jessica Drew. Her cell number is 112-233-4455 and her office address is listed as '1st Floor, Midtown Office'.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Jessica Drew", "phone": "112-233-4455", "address": "1st Floor, Midtown Office"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10394"}
{"query": "Could you create a contact for Bruce Wayne with the following details: phone number 777-7777, email bruce@wayneenterprises.com, and address '1007 Mountain Drive'?", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Bruce Wayne", "phone": "777-7777", "email": "bruce@wayneenterprises.com", "address": "1007 Mountain Drive"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10395"}
{"query": "I need to register a contact for Tony Stark. His details are: name Tony Stark, phone number 222-3333, and email ironman@starkindustries.com.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Tony Stark", "phone": "222-3333", "email": "ironman@starkindustries.com"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10396"}
{"query": "Please add a contact for Peter Parker. I have his phone as 555-0001, email peter.parker@dailybugle.com, and address '20 Ingram Street'.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Peter Parker", "phone": "555-0001", "email": "peter.parker@dailybugle.com", "address": "20 Ingram Street"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10397"}
{"query": "Add a new entry for Bruce Banner. His information includes his name and email: bigguy@avengers.org.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Bruce Banner", "email": "bigguy@avengers.org"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10398"}
{"query": "Please add a contact: Emily Johnson. Her phone is 123-4567.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Emily Johnson", "phone": "123-4567"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10399", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Could you create a new contact for Michael Brown? I'd like his email as michael.brown@gmail.com and his address as Gold Street.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Michael Brown", "email": "michael.brown@gmail.com", "address": "Gold Street"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10400", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "I need to register Sarah Connor as a contact. Her phone number is 555-9876, her email is sarah.c@skynet.com, and her address is 789 Future Blvd.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Sarah Connor", "phone": "555-9876", "email": "sarah.c@skynet.com", "address": "789 Future Blvd"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10401", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Add Billy Ray as a new contact with the phone 444-1234.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Billy Ray", "phone": "444-1234"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10402", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Please create a contact for Linda Carter; her email is linda.carter@example.com.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Linda Carter", "email": "linda.carter@example.com"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10403", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Could you register a new contact entry for David Ortega, located at 321 Oak Road?", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "David Ortega", "address": "321 Oak Road"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10404", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "I need to add Michelle Williams to my contacts. Her phone is 200-3000, email is michelle.w@example.net, and she lives at 100 King Street.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Michelle Williams", "phone": "200-3000", "email": "michelle.w@example.net", "address": "100 King Street"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10405", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Register a new contact for Oliver Queen with his email address being oliver@qc.com.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Oliver Queen", "email": "oliver@qc.com"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10406", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Please add the contact for George Michael. Include his phone number 333-4444 and email address george@michael.com.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "George Michael", "phone": "333-4444", "email": "george@michael.com"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10407", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "I want to create a contact for Wanda Maximoff with phone 777-2222 and email wanda@avengers.com.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Wanda Maximoff", "phone": "777-2222", "email": "wanda@avengers.com"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10408", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Add a new contact for Lex Luthor; his email is lex.luthor@lexcorp.com.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Lex Luthor", "email": "lex.luthor@lexcorp.com"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10409", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "I need to create an entry for Barbara Gordon. Her phone number is 555-9999 and her address is 123 Gotham Ave.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Barbara Gordon", "phone": "555-9999", "address": "123 Gotham Ave"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10410", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Insert a contact for Frank Castle with the phone 121-2121.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Frank Castle", "phone": "121-2121"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10411", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Please add Carrie Fisher to my contacts. Her email is carrie@example.org.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Carrie Fisher", "email": "carrie@example.org"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10412", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Set up a new contact for Bruce Banner with phone 888-8888, email banner@marvelstudios.com, and address 456 Gamma Ln.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Bruce Banner", "phone": "888-8888", "email": "banner@marvelstudios.com", "address": "456 Gamma Ln"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10413", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Could you register a contact for Steve Rogers? His telephone number is 777-5555.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Steve Rogers", "phone": "777-5555"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10414", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "I want to add Tony Montana's details as a contact. His phone is 101-2020 and his email is tony@scarface.com.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Tony Montana", "phone": "101-2020", "email": "tony@scarface.com"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10415", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Please register a contact for Nancy Drew with the email nancyd@gmail.com and located at 10 Mystery Lane.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Nancy Drew", "email": "nancyd@gmail.com", "address": "10 Mystery Lane"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10416", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "I need to create a contact for Jason Bourne with the phone number 555-1313.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Jason Bourne", "phone": "555-1313"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10417", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Add a new contact: Veronica Mars with the email veronica@baywatch.com and address 'Mars House, CA'.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Veronica Mars", "email": "veronica@baywatch.com", "address": "Mars House, CA"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10418", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Could you create a new entry for Harry Potter? Please use email harry@hogwarts.edu.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Harry Potter", "email": "harry@hogwarts.edu"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10419", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "I would like to add Jack Sparrow to my contacts with his phone number 888-5550.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Jack Sparrow", "phone": "888-5550"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10420", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Please register a contact for Amelia Earhart. Her address is '123 Aviation Blvd' and her phone number is 222-3333.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Amelia Earhart", "address": "123 Aviation Blvd", "phone": "222-3333"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10421", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Could you add Frodo Baggins as a new contact with the email frodo@shire.com?", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Frodo Baggins", "email": "frodo@shire.com"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10422", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "I want to create a record for William Shakespeare with the phone number 100-200-300.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "William Shakespeare", "phone": "100-200-300"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10423", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Please insert a new contact for Cleopatra using the email cleo@pyramid.com and address 'Pyramid Road'.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Cleopatra", "email": "cleo@pyramid.com", "address": "Pyramid Road"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10424", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Add a contact for Galileo Galilei with the phone number '123-321-456'.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Galileo Galilei", "phone": "123-321-456"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10425", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "I need to set up a contact for Ada Lovelace with her email address as ada.lovelace@computing.org.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Ada Lovelace", "email": "ada.lovelace@computing.org"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10426", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Could you create a new contact for Nikola Tesla? His phone is 999-8888 and his email address is tesla@inventions.com.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Nikola Tesla", "phone": "999-8888", "email": "tesla@inventions.com"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10427", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Please add a contact for Charles Darwin with address '5 Evolution St' and phone number 555-0009.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Charles Darwin", "address": "5 Evolution St", "phone": "555-0009"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10428", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "I would like to create a contact for Joan of Arc. No other details are provided besides her name.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Joan of Arc"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10429", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Add a contact for Amir Khan with his email address as amir.khan@example.com.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Amir Khan", "email": "amir.khan@example.com"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10430", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "I need a new contact for Kofi Annan. Please add his phone number 333-2222 and address 'United Nations HQ'.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Kofi Annan", "phone": "333-2222", "address": "United Nations HQ"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10431", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Please register Monica Geller as a contact. Her details include phone 444-5555 and email monica.geller@example.com.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Monica Geller", "phone": "444-5555", "email": "monica.geller@example.com"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10432", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Could you add Chandler Bing to my contacts? His phone number is 666-7777 and his email is chandler@friends.com.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Chandler Bing", "phone": "666-7777", "email": "chandler@friends.com"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10433", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "I need to create a contact for Rachel Green. Please include her email rachel.green@example.com and address 'Manhattan, New York'.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Rachel Green", "email": "rachel.green@example.com", "address": "Manhattan, New York"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10434", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Please insert a new contact for Ross Geller with the phone number 300-4000.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Ross Geller", "phone": "300-4000"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10435", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Can you register Phoebe Buffay as a contact? Her email is phoebe.buffay@music.com and her phone number is 777-7777.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Phoebe Buffay", "email": "phoebe.buffay@music.com", "phone": "777-7777"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10436", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "I want to add Joey Tribbiani to my contacts with the phone 888-0000.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Joey Tribbiani", "phone": "888-0000"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10437", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Could you create a contact for Monica Bellucci? Please set her phone as 555-2345, email as monica.b@cinema.com and address 'Hollywood Blvd'.", "answer": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "Monica Bellucci", "phone": "555-2345", "email": "monica.b@cinema.com", "address": "Hollywood Blvd"}}}, "unique_idx": "ACTION_INSERT_CONTACT-10438", "tools": [{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"]}]}
{"query": "Please add the event 'Project Kickoff' with the details 'New project overview meeting' at Board Room 1. The event should start at 1700050000000 and end at 1700053600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Project Kickoff", "DESCRIPTION": "New project overview meeting", "EVENT_LOCATION": "Board Room 1", "BEGIN_TIME": 1700050000000, "END_TIME": 1700053600000}}, "unique_idx": "ACTION_INSERT_EVENT-10439"}
{"query": "Set up a calendar entry for a 'Team Sync' meeting. It is a weekly sync-up session with no specified location. It should begin at 1700200000000 and finish at 1700203600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Team Sync", "DESCRIPTION": "Weekly sync-up meeting", "BEGIN_TIME": 1700200000000, "END_TIME": 1700203600000}}, "unique_idx": "ACTION_INSERT_EVENT-10440"}
{"query": "I need to schedule a 'Dentist Appointment' for my annual check-up at the Downtown Dental Clinic. Please add it from 1700300000000 to 1700301800000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Dentist Appointment", "DESCRIPTION": "Annual dental check-up", "EVENT_LOCATION": "Downtown Dental Clinic", "BEGIN_TIME": 1700300000000, "END_TIME": 1700301800000}}, "unique_idx": "ACTION_INSERT_EVENT-10441"}
{"query": "Could you insert an event called 'Coffee with John'? The meeting is a casual catch-up over coffee and will be held at Cafe Nero from 1700400000000 to 1700401800000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Coffee with John", "DESCRIPTION": "Casual catch up over coffee", "EVENT_LOCATION": "Cafe Nero", "BEGIN_TIME": 1700400000000, "END_TIME": 1700401800000}}, "unique_idx": "ACTION_INSERT_EVENT-10442"}
{"query": "Please add to my calendar a 'Business Lunch' meeting at City Bistro to discuss client negotiations. Schedule it from 1700500000000 to 1700505400000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Business Lunch", "DESCRIPTION": "Discuss client negotiations", "EVENT_LOCATION": "City Bistro", "BEGIN_TIME": 1700500000000, "END_TIME": 1700505400000}}, "unique_idx": "ACTION_INSERT_EVENT-10443"}
{"query": "Can you schedule my 'Yoga Class'? It's a morning workout session at the Wellness Center starting at 1700600000000 and ending at 1700603600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Yoga Class", "DESCRIPTION": "Morning workout session", "EVENT_LOCATION": "Wellness Center", "BEGIN_TIME": 1700600000000, "END_TIME": 1700603600000}}, "unique_idx": "ACTION_INSERT_EVENT-10444"}
{"query": "I would like to schedule a 'Project Review' meeting to go over our deliverables. No specific location is needed. It should occur from 1700700000000 to 1700703600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Project Review", "DESCRIPTION": "Meeting to go over project deliverables", "BEGIN_TIME": 1700700000000, "END_TIME": 1700703600000}}, "unique_idx": "ACTION_INSERT_EVENT-10445"}
{"query": "Please add an event titled 'Evening Run' to my calendar. The description is 'Jogging in the park to unwind', and it starts at 1700800000000 and ends at 1700801800000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Evening Run", "DESCRIPTION": "Jogging in the park to unwind", "BEGIN_TIME": 1700800000000, "END_TIME": 1700801800000}}, "unique_idx": "ACTION_INSERT_EVENT-10446"}
{"query": "Add an event 'Dinner with Parents' with the details 'Family dinner at home'. The event should take place at Home and will run from 1700900000000 to 1700907200000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Dinner with Parents", "DESCRIPTION": "Family dinner at home", "EVENT_LOCATION": "Home", "BEGIN_TIME": 1700900000000, "END_TIME": 1700907200000}}, "unique_idx": "ACTION_INSERT_EVENT-10447"}
{"query": "Could you insert an event called 'Reading Club Meeting'? The description is 'Monthly book discussion'. There's no specific location. It should be scheduled from 1701000000000 to 1701003600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Reading Club Meeting", "DESCRIPTION": "Monthly book discussion", "BEGIN_TIME": 1701000000000, "END_TIME": 1701003600000}}, "unique_idx": "ACTION_INSERT_EVENT-10448"}
{"query": "Plan an event titled 'Workout Session' at the Local Gym. The description is simply 'Gym time'. Please set it from 1701100000000 to 1701103600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Workout Session", "DESCRIPTION": "Gym time", "EVENT_LOCATION": "Local Gym", "BEGIN_TIME": 1701100000000, "END_TIME": 1701103600000}}, "unique_idx": "ACTION_INSERT_EVENT-10449"}
{"query": "Schedule a 'Language Class' in my calendar. It should cover Spanish basics without any specified venue, starting at 1701200000000 and ending at 1701203600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Language Class", "DESCRIPTION": "Discussing Spanish basics", "BEGIN_TIME": 1701200000000, "END_TIME": 1701203600000}}, "unique_idx": "ACTION_INSERT_EVENT-10450"}
{"query": "Register an event 'Product Launch Meeting' with the description 'Final preparations for the launch event'. The meeting is at Main Office, and it should run from 1701300000000 to 1701305400000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Product Launch Meeting", "DESCRIPTION": "Final preparations for the launch event", "EVENT_LOCATION": "Main Office", "BEGIN_TIME": 1701300000000, "END_TIME": 1701305400000}}, "unique_idx": "ACTION_INSERT_EVENT-10451"}
{"query": "Please schedule an 'Evening Meditation' session, described as a meditation for stress relief. It will take place at Zen Garden, starting at 1701400000000 and ending at 1701403600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Evening Meditation", "DESCRIPTION": "Meditation session for stress relief", "EVENT_LOCATION": "Zen Garden", "BEGIN_TIME": 1701400000000, "END_TIME": 1701403600000}}, "unique_idx": "ACTION_INSERT_EVENT-10452"}
{"query": "Add to my calendar an event named 'Interview Session'. The description is 'Discussing candidate roles'. No location is specified. Please set it from 1701500000000 to 1701505400000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Interview Session", "DESCRIPTION": "Discussing candidate roles", "BEGIN_TIME": 1701500000000, "END_TIME": 1701505400000}}, "unique_idx": "ACTION_INSERT_EVENT-10453"}
{"query": "Please arrange a 'Project Kickoff Meeting' to discuss our new project approach in the Main Conference Room. It should start at 1700000000000 and end at 1700007200000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Project Kickoff Meeting", "DESCRIPTION": "Discuss our new project approach", "EVENT_LOCATION": "Main Conference Room", "BEGIN_TIME": 1700000000000, "END_TIME": 1700007200000}}, "unique_idx": "ACTION_INSERT_EVENT-10454", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Add a calendar event called 'Lunch with Sarah'. It's a casual lunch meeting with Sarah, scheduled from 1700100000000 to 1700103600000. No location is specified.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Lunch with Sarah", "DESCRIPTION": "Casual lunch meeting with Sarah", "BEGIN_TIME": 1700100000000, "END_TIME": 1700103600000}}, "unique_idx": "ACTION_INSERT_EVENT-10455", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Kindly set up an event 'Monthly Review' in my calendar. The event is to review monthly targets and has no specified location. Please schedule it from 1700300000000 to 1700303600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Monthly Review", "DESCRIPTION": "Review monthly targets", "BEGIN_TIME": 1700300000000, "END_TIME": 1700303600000}}, "unique_idx": "ACTION_INSERT_EVENT-10456", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "I want to book an event called 'Dinner Party' described as a celebration dinner for the team. It will take place at Alex's Restaurant from 1700400000000 to 1700407200000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Dinner Party", "DESCRIPTION": "Celebration dinner for the team", "EVENT_LOCATION": "Alex's Restaurant", "BEGIN_TIME": 1700400000000, "END_TIME": 1700407200000}}, "unique_idx": "ACTION_INSERT_EVENT-10457", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Please add a 'Team Building' event to my calendar. It involves fun activities and brainstorming at the Office Playground, scheduled from 1700500000000 to 1700505400000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Team Building", "DESCRIPTION": "Fun activities and brainstorming", "EVENT_LOCATION": "Office Playground", "BEGIN_TIME": 1700500000000, "END_TIME": 1700505400000}}, "unique_idx": "ACTION_INSERT_EVENT-10458", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Could you please create an event for a 'Client Meeting'? The discussion will be about contract details at Downtown Office from 1700600000000 to 1700603600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Client Meeting", "DESCRIPTION": "Discussion about contract details", "EVENT_LOCATION": "Downtown Office", "BEGIN_TIME": 1700600000000, "END_TIME": 1700603600000}}, "unique_idx": "ACTION_INSERT_EVENT-10459", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Add an event named 'Dance Class' for a hip-hop session at City Dance Studio. It should start at 1700800000000 and end at 1700805400000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Dance Class", "DESCRIPTION": "Hip-hop session", "EVENT_LOCATION": "City Dance Studio", "BEGIN_TIME": 1700800000000, "END_TIME": 1700805400000}}, "unique_idx": "ACTION_INSERT_EVENT-10460", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Please arrange a 'Coding Workshop' focused on Python at Tech Hub. The event is scheduled to run from 1700900000000 to 1700907200000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Coding Workshop", "DESCRIPTION": "Learning session focused on Python", "EVENT_LOCATION": "Tech Hub", "BEGIN_TIME": 1700900000000, "END_TIME": 1700907200000}}, "unique_idx": "ACTION_INSERT_EVENT-10461", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Organize an event called 'Board Meeting' in my calendar. It is a strategy and policy review meeting held in the Board Room, starting at 1701000000000 and ending at 1701007200000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Board Meeting", "DESCRIPTION": "Strategy and policy review meeting", "EVENT_LOCATION": "Board Room", "BEGIN_TIME": 1701000000000, "END_TIME": 1701007200000}}, "unique_idx": "ACTION_INSERT_EVENT-10462", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "I would like to set up an event titled 'Art Exhibition'. It's a public display of local art at Downtown Gallery from 1701100000000 to 1701103600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Art Exhibition", "DESCRIPTION": "Public display of local art", "EVENT_LOCATION": "Downtown Gallery", "BEGIN_TIME": 1701100000000, "END_TIME": 1701103600000}}, "unique_idx": "ACTION_INSERT_EVENT-10463", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Schedule a 'Breakfast Meetup' for an early morning networking event. There is no specific location. It should run from 1701200000000 to 1701201800000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Breakfast Meetup", "DESCRIPTION": "Early morning networking event", "BEGIN_TIME": 1701200000000, "END_TIME": 1701201800000}}, "unique_idx": "ACTION_INSERT_EVENT-10464", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Please add an event called 'Gardening Workshop' that encourages community gardening. It will be held at City Park from 1701300000000 to 1701305400000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Gardening Workshop", "DESCRIPTION": "Encourages community gardening", "EVENT_LOCATION": "City Park", "BEGIN_TIME": 1701300000000, "END_TIME": 1701305400000}}, "unique_idx": "ACTION_INSERT_EVENT-10465", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "I need a calendar entry for 'Evening Webinar' about business trends. It is an online session, so no location is required, and it's scheduled from 1701400000000 to 1701405400000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Evening Webinar", "DESCRIPTION": "Online session about business trends", "BEGIN_TIME": 1701400000000, "END_TIME": 1701405400000}}, "unique_idx": "ACTION_INSERT_EVENT-10466", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Create an event titled 'Music Rehearsal' for a band practice session. It will take place at Studio 7 starting at 1701500000000 and ending at 1701503600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Music Rehearsal", "DESCRIPTION": "Band practice for upcoming concert", "EVENT_LOCATION": "Studio 7", "BEGIN_TIME": 1701500000000, "END_TIME": 1701503600000}}, "unique_idx": "ACTION_INSERT_EVENT-10467", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Set up a reminder for 'Book Club Discussion'. It is a group discussion about the monthly book pick with no particular location. Please schedule it from 1701600000000 to 1701603600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Book Club Discussion", "DESCRIPTION": "Discussion about the monthly book pick", "BEGIN_TIME": 1701600000000, "END_TIME": 1701603600000}}, "unique_idx": "ACTION_INSERT_EVENT-10468", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Plan an event 'Restaurant Reservation' for a dinner with friends at Bella Italia to celebrate a special occasion. It should run from 1701700000000 to 1701705400000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Restaurant Reservation", "DESCRIPTION": "Dinner with friends for celebration", "EVENT_LOCATION": "Bella Italia", "BEGIN_TIME": 1701700000000, "END_TIME": 1701705400000}}, "unique_idx": "ACTION_INSERT_EVENT-10469", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Please schedule an event called 'Fitness Bootcamp'. It's described as an intense morning workout session at a local fitness center from 1701800000000 to 1701803600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Fitness Bootcamp", "DESCRIPTION": "Intense morning workout session", "EVENT_LOCATION": "Local fitness center", "BEGIN_TIME": 1701800000000, "END_TIME": 1701803600000}}, "unique_idx": "ACTION_INSERT_EVENT-10470", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "I want to add a new event called 'Strategy Session' to plan the next quarter's objectives in the Executive Boardroom. Schedule it from 1701900000000 to 1701907200000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Strategy Session", "DESCRIPTION": "Planning the next quarter's objectives", "EVENT_LOCATION": "Executive Boardroom", "BEGIN_TIME": 1701900000000, "END_TIME": 1701907200000}}, "unique_idx": "ACTION_INSERT_EVENT-10471", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Input an event for 'Photography Walk' with the description 'An early morning stroll to capture city life'. No location is provided, and it should be scheduled from 1702000000000 to 1702003600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Photography Walk", "DESCRIPTION": "An early morning stroll to capture city life", "BEGIN_TIME": 1702000000000, "END_TIME": 1702003600000}}, "unique_idx": "ACTION_INSERT_EVENT-10472", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Can you record an event 'Language Class'? The session on Spanish will be held at Community Hall from 1702100000000 to 1702103600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Language Class", "DESCRIPTION": "Session on Spanish", "EVENT_LOCATION": "Community Hall", "BEGIN_TIME": 1702100000000, "END_TIME": 1702103600000}}, "unique_idx": "ACTION_INSERT_EVENT-10473", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "I need to log an event named 'Virtual Conference' with an online meeting featuring global speakers. Since it's virtual, no physical location is needed. It runs from 1702200000000 to 1702207200000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Virtual Conference", "DESCRIPTION": "Online meeting with global speakers", "BEGIN_TIME": 1702200000000, "END_TIME": 1702207200000}}, "unique_idx": "ACTION_INSERT_EVENT-10474", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Schedule a 'Kids Playdate' event described as an afternoon of fun at the park. The location is Local Playground and it should take place from 1702300000000 to 1702303600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Kids Playdate", "DESCRIPTION": "Afternoon of fun at the park", "EVENT_LOCATION": "Local Playground", "BEGIN_TIME": 1702300000000, "END_TIME": 1702303600000}}, "unique_idx": "ACTION_INSERT_EVENT-10475", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Please arrange an event 'Stand-up Comedy Night' with the description 'Enjoy a night of laughter and entertainment' at the Comedy Club. It should be scheduled from 1702400000000 to 1702405400000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Stand-up Comedy Night", "DESCRIPTION": "Enjoy a night of laughter and entertainment", "EVENT_LOCATION": "Comedy Club", "BEGIN_TIME": 1702400000000, "END_TIME": 1702405400000}}, "unique_idx": "ACTION_INSERT_EVENT-10476", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "I would like to add an event called 'Sculpture Workshop'. The description is 'Learn sculpting basics under expert guidance'. It will be hosted at the Art Institute from 1702500000000 to 1702505400000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Sculpture Workshop", "DESCRIPTION": "Learn sculpting basics under expert guidance", "EVENT_LOCATION": "Art Institute", "BEGIN_TIME": 1702500000000, "END_TIME": 1702505400000}}, "unique_idx": "ACTION_INSERT_EVENT-10477", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Organize an event titled 'Coding Bootcamp' that is an intensive programming course covering Python and JavaScript. It should be held at Tech Center from 1702600000000 to 1702607200000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Coding Bootcamp", "DESCRIPTION": "Intensive programming course covering Python and JavaScript", "EVENT_LOCATION": "Tech Center", "BEGIN_TIME": 1702600000000, "END_TIME": 1702607200000}}, "unique_idx": "ACTION_INSERT_EVENT-10478", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Set a calendar event for 'Meditation Retreat', a full-day mindfulness practice session. No explicit location is mentioned and it is set from 1702700000000 to 1702707200000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Meditation Retreat", "DESCRIPTION": "Full-day mindfulness practice session", "BEGIN_TIME": 1702700000000, "END_TIME": 1702707200000}}, "unique_idx": "ACTION_INSERT_EVENT-10479", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Arrange an event 'Wine Tasting' described as an evening of sampling fine wines at Vineyard Estate, starting at 1702800000000 and ending at 1702805400000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Wine Tasting", "DESCRIPTION": "Evening of sampling fine wines", "EVENT_LOCATION": "Vineyard Estate", "BEGIN_TIME": 1702800000000, "END_TIME": 1702805400000}}, "unique_idx": "ACTION_INSERT_EVENT-10480", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Add an event titled 'Parent-Teacher Conference' for a meeting about my child's progress. It will be held at School Auditorium from 1702900000000 to 1702903600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Parent-Teacher Conference", "DESCRIPTION": "Meeting about child's progress", "EVENT_LOCATION": "School Auditorium", "BEGIN_TIME": 1702900000000, "END_TIME": 1702903600000}}, "unique_idx": "ACTION_INSERT_EVENT-10481", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Could you schedule an 'Evening Study Group' for a collaborative learning session? It should run from 1703000000000 to 1703003600000 and no location is needed, with the description 'Group study session'.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Evening Study Group", "DESCRIPTION": "Group study session", "BEGIN_TIME": 1703000000000, "END_TIME": 1703003600000}}, "unique_idx": "ACTION_INSERT_EVENT-10482", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Please register an event 'Charity Walk' described as a community fundraising activity at Central Park, starting at 1703100000000 and ending at 1703105400000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Charity Walk", "DESCRIPTION": "Community fundraising activity", "EVENT_LOCATION": "Central Park", "BEGIN_TIME": 1703100000000, "END_TIME": 1703105400000}}, "unique_idx": "ACTION_INSERT_EVENT-10483", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Input a calendar event for 'Business Strategy Meeting' intended to review our growth plans at the Main Office Conference Room. It should be scheduled from 1703200000000 to 1703207200000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Business Strategy Meeting", "DESCRIPTION": "Review growth plans", "EVENT_LOCATION": "Main Office Conference Room", "BEGIN_TIME": 1703200000000, "END_TIME": 1703207200000}}, "unique_idx": "ACTION_INSERT_EVENT-10484", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Plan an event named 'Evening Run' described as jogging in the neighborhood park. There is no specified location. It should occur from 1703300000000 to 1703301800000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Evening Run", "DESCRIPTION": "Jogging in the neighborhood park", "BEGIN_TIME": 1703300000000, "END_TIME": 1703301800000}}, "unique_idx": "ACTION_INSERT_EVENT-10485", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "I need to book an event called 'Customer Feedback Session' to collect feedback on our new product. It will take place at Client's Office, starting at 1703400000000 and ending at 1703405400000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Customer Feedback Session", "DESCRIPTION": "Collecting feedback on our new product", "EVENT_LOCATION": "Client's Office", "BEGIN_TIME": 1703400000000, "END_TIME": 1703405400000}}, "unique_idx": "ACTION_INSERT_EVENT-10486", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Set up a 'Weekly Sync-Up' event for an internal discussion on team progress and updates. There is no location. It should run from 1703500000000 to 1703503600000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Weekly Sync-Up", "DESCRIPTION": "Team progress and updates meeting", "BEGIN_TIME": 1703500000000, "END_TIME": 1703503600000}}, "unique_idx": "ACTION_INSERT_EVENT-10487", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Add a new calendar entry for 'Sales Presentation' to discuss new strategies. It will be hosted at Client Headquarters from 1703700000000 to 1703707200000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Sales Presentation", "DESCRIPTION": "Discuss new strategies", "EVENT_LOCATION": "Client Headquarters", "BEGIN_TIME": 1703700000000, "END_TIME": 1703707200000}}, "unique_idx": "ACTION_INSERT_EVENT-10488", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "Schedule an event 'Workshop on AI' that dives deep into AI trends and technologies. It should be held at Innovation Hub, from 1703800000000 to 1703807200000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Workshop on AI", "DESCRIPTION": "Deep dive into AI trends and technologies", "EVENT_LOCATION": "Innovation Hub", "BEGIN_TIME": 1703800000000, "END_TIME": 1703807200000}}, "unique_idx": "ACTION_INSERT_EVENT-10489", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "I require an event 'Evening Swim' with the description 'Swimming session at the local pool'. There is no location provided. Please schedule it from 1703900000000 to 1703905400000.", "answer": {"plan": "ACTION_INSERT_EVENT", "arguments": {"TITLE": "Evening Swim", "DESCRIPTION": "Swimming session at the local pool", "BEGIN_TIME": 1703900000000, "END_TIME": 1703905400000}}, "unique_idx": "ACTION_INSERT_EVENT-10490", "tools": [{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"]}]}
{"query": "I want to select a contact from my address book.", "answer": {"plan": "ACTION_PICK", "arguments": {}}, "unique_idx": "ACTION_PICK-10491"}
{"query": "Can you fetch a phone number from my contacts?", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "phone"}}, "unique_idx": "ACTION_PICK-10492"}
{"query": "Show me an email address from one of my contacts.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "email"}}, "unique_idx": "ACTION_PICK-10493"}
{"query": "Retrieve the mailing address of a contact from my phone.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "address"}}, "unique_idx": "ACTION_PICK-10494"}
{"query": "I need to pick a contact. Just get me the contact URI.", "answer": {"plan": "ACTION_PICK", "arguments": {}}, "unique_idx": "ACTION_PICK-10495"}
{"query": "Could you choose a number from one of my contact entries?", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "phone"}}, "unique_idx": "ACTION_PICK-10496"}
{"query": "I would like to have someone’s email address! Please help.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "email"}}, "unique_idx": "ACTION_PICK-10497"}
{"query": "Access one of my contacts' physical addresses.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "address"}}, "unique_idx": "ACTION_PICK-10498"}
{"query": "Let me pick a contact identifier from my list.", "answer": {"plan": "ACTION_PICK", "arguments": {}}, "unique_idx": "ACTION_PICK-10499"}
{"query": "Retrieve an email from my address list.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "email"}}, "unique_idx": "ACTION_PICK-10500"}
{"query": "Get me someone's postal address please.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "address"}}, "unique_idx": "ACTION_PICK-10501"}
{"query": "Pick any contact you have for me; default contact info will do.", "answer": {"plan": "ACTION_PICK", "arguments": {}}, "unique_idx": "ACTION_PICK-10502"}
{"query": "I need to fetch a contact detail: specifically, a phone contact.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "phone"}}, "unique_idx": "ACTION_PICK-10503"}
{"query": "Select an email contact info from my directory.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "email"}}, "unique_idx": "ACTION_PICK-10504"}
{"query": "I need to retrieve someone's phone contact.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "phone"}}, "unique_idx": "ACTION_PICK-10505", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Fetch an email address from my contacts, please.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "email"}}, "unique_idx": "ACTION_PICK-10506", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Choose a contact's email for me from the directory.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "email"}}, "unique_idx": "ACTION_PICK-10507", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Select a mailing address from my contacts.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "address"}}, "unique_idx": "ACTION_PICK-10508", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I need someone's address from my phone contacts.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "address"}}, "unique_idx": "ACTION_PICK-10509", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Pick a contact record for me from my address book.", "answer": {"plan": "ACTION_PICK", "arguments": {}}, "unique_idx": "ACTION_PICK-10510", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Can you help select an email contact record?", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "email"}}, "unique_idx": "ACTION_PICK-10511", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I want a contact's phone number - could you pick one for me?", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "phone"}}, "unique_idx": "ACTION_PICK-10512", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I require a phone number selection from my contact list.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "phone"}}, "unique_idx": "ACTION_PICK-10513", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Find me a contact's email address.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "email"}}, "unique_idx": "ACTION_PICK-10514", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Please pick my contact's postal address.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "address"}}, "unique_idx": "ACTION_PICK-10515", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Open my contacts list and choose any person.", "answer": {"plan": "ACTION_PICK", "arguments": {}}, "unique_idx": "ACTION_PICK-10516", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I want to get any available contact, please.", "answer": {"plan": "ACTION_PICK", "arguments": {}}, "unique_idx": "ACTION_PICK-10517", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Could you fetch contact details from my phone book?", "answer": {"plan": "ACTION_PICK", "arguments": {}}, "unique_idx": "ACTION_PICK-10518", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Help me by selecting an email address from my contact list.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "email"}}, "unique_idx": "ACTION_PICK-10519", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Review my contacts and return a phone number.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "phone"}}, "unique_idx": "ACTION_PICK-10520", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Please give me a contact number from my phone.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "phone"}}, "unique_idx": "ACTION_PICK-10521", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Retrieve a friend's postal address from my contacts.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "address"}}, "unique_idx": "ACTION_PICK-10522", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I'm looking for someone’s mailing address in my contact list.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "address"}}, "unique_idx": "ACTION_PICK-10523", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Select from my saved contacts.", "answer": {"plan": "ACTION_PICK", "arguments": {}}, "unique_idx": "ACTION_PICK-10524", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I need to choose a person's email address from my contacts.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "email"}}, "unique_idx": "ACTION_PICK-10525", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Pick someone for me from my phone's contact list.", "answer": {"plan": "ACTION_PICK", "arguments": {}}, "unique_idx": "ACTION_PICK-10526", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I want you to pick a phone contact detail from my phone book.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "phone"}}, "unique_idx": "ACTION_PICK-10527", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Could you pull up an email address from my directory?", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "email"}}, "unique_idx": "ACTION_PICK-10528", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Retrieve someone's mobile number from my contacts.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "phone"}}, "unique_idx": "ACTION_PICK-10529", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Pick out an email on my contact list.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "email"}}, "unique_idx": "ACTION_PICK-10530", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I need a quick selection of a contact's detail.", "answer": {"plan": "ACTION_PICK", "arguments": {}}, "unique_idx": "ACTION_PICK-10531", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Can you please select a person from my contact database?", "answer": {"plan": "ACTION_PICK", "arguments": {}}, "unique_idx": "ACTION_PICK-10532", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Open my contact list and return an email address.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "email"}}, "unique_idx": "ACTION_PICK-10533", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I’d like you to choose a phone number from my contacts.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "phone"}}, "unique_idx": "ACTION_PICK-10534", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Could you extract the address detail of a contact for me?", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "address"}}, "unique_idx": "ACTION_PICK-10535", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Select a contact's postal information, please.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "address"}}, "unique_idx": "ACTION_PICK-10536", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Help me extract a phone number from my contact list.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "phone"}}, "unique_idx": "ACTION_PICK-10537", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I want to pick one of the contacts from my phone; please show me a contact entry.", "answer": {"plan": "ACTION_PICK", "arguments": {}}, "unique_idx": "ACTION_PICK-10538", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Can you get me someone's phone number from my contact directory?", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "phone"}}, "unique_idx": "ACTION_PICK-10539", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Please pick a contact from my saved contacts.", "answer": {"plan": "ACTION_PICK", "arguments": {}}, "unique_idx": "ACTION_PICK-10540", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Fetch a telephone number from one of my contacts.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "phone"}}, "unique_idx": "ACTION_PICK-10541", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Can you extract an email address from my contact list?", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "email"}}, "unique_idx": "ACTION_PICK-10542", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I need to dial someone soon; select their phone number from my phonebook.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "phone"}}, "unique_idx": "ACTION_PICK-10543", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Retrieve a mailing address from the contacts stored on my phone.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "address"}}, "unique_idx": "ACTION_PICK-10544", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Select a personal contact entry from my list.", "answer": {"plan": "ACTION_PICK", "arguments": {}}, "unique_idx": "ACTION_PICK-10545", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I require a contact from my people directory – please pull up one.", "answer": {"plan": "ACTION_PICK", "arguments": {}}, "unique_idx": "ACTION_PICK-10546", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Could you please get an email address record from my contacts?", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "email"}}, "unique_idx": "ACTION_PICK-10547", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Access one of my stored addresses from the contacts database.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "address"}}, "unique_idx": "ACTION_PICK-10548", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I want to choose a contact number from my phone directory.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "phone"}}, "unique_idx": "ACTION_PICK-10549", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Grab a contact entry from my phone contacts list.", "answer": {"plan": "ACTION_PICK", "arguments": {}}, "unique_idx": "ACTION_PICK-10550", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Pull an email from my stored contacts.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "email"}}, "unique_idx": "ACTION_PICK-10551", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Can you help me pick a contact from my saved directory?", "answer": {"plan": "ACTION_PICK", "arguments": {}}, "unique_idx": "ACTION_PICK-10552", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Get me a phone contact from my list, please.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "phone"}}, "unique_idx": "ACTION_PICK-10553", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I'm looking for someone's email contact details.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "email"}}, "unique_idx": "ACTION_PICK-10554", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Choose a person's address from my set of saved contacts.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "address"}}, "unique_idx": "ACTION_PICK-10555", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Could you pick a contact for me from my records?", "answer": {"plan": "ACTION_PICK", "arguments": {}}, "unique_idx": "ACTION_PICK-10556", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I need a phone number from my contacts; please provide one.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "phone"}}, "unique_idx": "ACTION_PICK-10557", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Select one person from my contacts database.", "answer": {"plan": "ACTION_PICK", "arguments": {}}, "unique_idx": "ACTION_PICK-10558", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Recommend a phone record from my phone book.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "phone"}}, "unique_idx": "ACTION_PICK-10559", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Find a valid email for any of my contacts.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "email"}}, "unique_idx": "ACTION_PICK-10560", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Fetch a contact's postal details from my saved contacts.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "address"}}, "unique_idx": "ACTION_PICK-10561", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I want to retrieve a full contact record from my directory.", "answer": {"plan": "ACTION_PICK", "arguments": {}}, "unique_idx": "ACTION_PICK-10562", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I'll need someone's telephone number from my contacts list. Can you help?", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "phone"}}, "unique_idx": "ACTION_PICK-10563", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Help me select a mailing address from my saved contacts.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "address"}}, "unique_idx": "ACTION_PICK-10564", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I want to choose a person by hand from my contacts.", "answer": {"plan": "ACTION_PICK", "arguments": {}}, "unique_idx": "ACTION_PICK-10565", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Could you switch to picking a phone number from my contact list?", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "phone"}}, "unique_idx": "ACTION_PICK-10566", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Please call up a contact's email address from my records.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "email"}}, "unique_idx": "ACTION_PICK-10567", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "I require an address of one of my acquaintances; fetch me the postal info.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "address"}}, "unique_idx": "ACTION_PICK-10568", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Find me a single contact from my directory database, please.", "answer": {"plan": "ACTION_PICK", "arguments": {}}, "unique_idx": "ACTION_PICK-10569", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Please retrieve a mobile phone number from my contacts for me.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "phone"}}, "unique_idx": "ACTION_PICK-10570", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Let me see an email from my contact list.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "email"}}, "unique_idx": "ACTION_PICK-10571", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Please pick someone's address for mailing purposes from my contacts.", "answer": {"plan": "ACTION_PICK", "arguments": {"data_type": "address"}}, "unique_idx": "ACTION_PICK-10572", "tools": [{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"]}]}
{"query": "Set an alarm for 6:45 AM for my morning workout.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 6, "EXTRA_MINUTES": 45, "EXTRA_MESSAGE": "Morning workout"}}, "unique_idx": "ACTION_SET_ALARM-10573"}
{"query": "Set an alarm for tonight at 22:30 with the message 'Bedtime Reminder'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 22, "EXTRA_MINUTES": 30, "EXTRA_MESSAGE": "Bedtime Reminder"}}, "unique_idx": "ACTION_SET_ALARM-10574"}
{"query": "Could you create an alarm at 9:15 with a vibrate alert, repeating on Monday, Wednesday, and Friday?", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 9, "EXTRA_MINUTES": 15, "EXTRA_DAYS": ["Monday", "Wednesday", "Friday"]}}, "unique_idx": "ACTION_SET_ALARM-10575"}
{"query": "Alarm for noon at 12:00 with no ringtone, please.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 12, "EXTRA_MINUTES": 0, "EXTRA_RINGTONE": null}}, "unique_idx": "ACTION_SET_ALARM-10576"}
{"query": "Schedule an alarm for 18:00 labeled 'Evening Run' and don't show the clock app UI.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 18, "EXTRA_MINUTES": 0, "EXTRA_MESSAGE": "Evening Run", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_ALARM-10577"}
{"query": "I need an alarm to wake me up at 5:00 AM every day with a custom ringtone from http://customtone.com/sound.mp3.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 5, "EXTRA_MINUTES": 0, "EXTRA_DAYS": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"], "EXTRA_RINGTONE": "http://customtone.com/sound.mp3"}}, "unique_idx": "ACTION_SET_ALARM-10578"}
{"query": "Please activate an alarm at 23:50 with the default settings.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 23, "EXTRA_MINUTES": 50}}, "unique_idx": "ACTION_SET_ALARM-10579"}
{"query": "Create an alarm for 8:05 with the note 'Meeting' and disable vibrations.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 8, "EXTRA_MINUTES": 5, "EXTRA_MESSAGE": "Meeting", "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_SET_ALARM-10580"}
{"query": "Set a silent alarm for 11:25 AM that repeats on weekends with the label 'Weekend Alert'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 11, "EXTRA_MINUTES": 25, "EXTRA_MESSAGE": "Weekend Alert", "EXTRA_DAYS": ["Saturday", "Sunday"], "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_SET_ALARM-10581"}
{"query": "I want an alarm set for a quick afternoon nap at 16:45, with the note 'Afternoon Nap'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 16, "EXTRA_MINUTES": 45, "EXTRA_MESSAGE": "Afternoon Nap"}}, "unique_idx": "ACTION_SET_ALARM-10582"}
{"query": "Please focus on waking me up at 07:00 with a 'Workout' reminder, only on Monday, Tuesday, and Thursday.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 7, "EXTRA_MINUTES": 0, "EXTRA_MESSAGE": "Workout", "EXTRA_DAYS": ["Monday", "Tuesday", "Thursday"]}}, "unique_idx": "ACTION_SET_ALARM-10583"}
{"query": "Alarm at 20:20 with the message 'Dinner Time'; please skip the confirmation interface.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 20, "EXTRA_MINUTES": 20, "EXTRA_MESSAGE": "Dinner Time", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_ALARM-10584"}
{"query": "Kindly set an alarm for 10:10 AM with a custom ringtone available at http://example.com/ringtone.mp3.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 10, "EXTRA_MINUTES": 10, "EXTRA_RINGTONE": "http://example.com/ringtone.mp3"}}, "unique_idx": "ACTION_SET_ALARM-10585"}
{"query": "Set a standard alarm for today at 19:55.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 19, "EXTRA_MINUTES": 55}}, "unique_idx": "ACTION_SET_ALARM-10586"}
{"query": "Please schedule an alarm for midnight with the reminder 'Midnight Snack', ensuring it vibrates.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 0, "EXTRA_MINUTES": 0, "EXTRA_MESSAGE": "Midnight Snack"}}, "unique_idx": "ACTION_SET_ALARM-10587"}
{"query": "Could you set an alarm for 7:30 AM tomorrow?", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 7, "EXTRA_MINUTES": 30}}, "unique_idx": "ACTION_SET_ALARM-10588", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Please schedule an alarm at 15:45 with the note 'Lunch Reminder'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 15, "EXTRA_MINUTES": 45, "EXTRA_MESSAGE": "Lunch Reminder"}}, "unique_idx": "ACTION_SET_ALARM-10589", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Set an alarm for 6:00 AM that repeats every Sunday.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 6, "EXTRA_MINUTES": 0, "EXTRA_DAYS": ["Sunday"]}}, "unique_idx": "ACTION_SET_ALARM-10590", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Hey, could you activate an alarm at 9:15 in the morning and use the tune available at http://mysite.com/song.mp3?", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 9, "EXTRA_MINUTES": 15, "EXTRA_RINGTONE": "http://mysite.com/song.mp3"}}, "unique_idx": "ACTION_SET_ALARM-10591", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Activate an alarm at 22:50 with the label 'Nightly alert' and disable vibration.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 22, "EXTRA_MINUTES": 50, "EXTRA_MESSAGE": "Nightly alert", "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_SET_ALARM-10592", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "I need an alarm at 5:30 AM that doesn't show the confirmation screen.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 5, "EXTRA_MINUTES": 30, "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_ALARM-10593", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Please set an alarm for 6:20 AM on Monday, Wednesday, and Friday for my workout.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 6, "EXTRA_MINUTES": 20, "EXTRA_MESSAGE": "workout", "EXTRA_DAYS": ["Monday", "Wednesday", "Friday"]}}, "unique_idx": "ACTION_SET_ALARM-10594", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Remind me at 12:00 noon with an alarm.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 12, "EXTRA_MINUTES": 0}}, "unique_idx": "ACTION_SET_ALARM-10595", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Set an alarm at 20:10 for dinner time on weekdays.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 20, "EXTRA_MINUTES": 10, "EXTRA_DAYS": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]}}, "unique_idx": "ACTION_SET_ALARM-10596", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Could you set an alarm for 13:15 with the message 'Nap Time'?", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 13, "EXTRA_MINUTES": 15, "EXTRA_MESSAGE": "Nap Time"}}, "unique_idx": "ACTION_SET_ALARM-10597", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Make an alarm for 19:25 labeled 'Evening Medication'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 19, "EXTRA_MINUTES": 25, "EXTRA_MESSAGE": "Evening Medication"}}, "unique_idx": "ACTION_SET_ALARM-10598", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Set an alarm at 04:45 AM and make sure it doesn't vibrate.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 4, "EXTRA_MINUTES": 45, "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_SET_ALARM-10599", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Please schedule an alarm at 16:30.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 16, "EXTRA_MINUTES": 30}}, "unique_idx": "ACTION_SET_ALARM-10600", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Could you set an alarm for 11:05 AM that only repeats on Saturday?", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 11, "EXTRA_MINUTES": 5, "EXTRA_DAYS": ["Saturday"]}}, "unique_idx": "ACTION_SET_ALARM-10601", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "I want an alarm at 21:50 called 'Study Time' using my favorite ringtone at http://favorite.com/ringtone.mp3.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 21, "EXTRA_MINUTES": 50, "EXTRA_MESSAGE": "Study Time", "EXTRA_RINGTONE": "http://favorite.com/ringtone.mp3"}}, "unique_idx": "ACTION_SET_ALARM-10602", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Please set a reminder alarm for 8:30 AM and skip the clock interface confirmation.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 8, "EXTRA_MINUTES": 30, "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_ALARM-10603", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Can you set an alarm for 2:05 PM for my doctor's appointment?", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 14, "EXTRA_MINUTES": 5, "EXTRA_MESSAGE": "doctor's appointment"}}, "unique_idx": "ACTION_SET_ALARM-10604", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "I need an alarm at 3:20 PM with the message 'afternoon tea'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 15, "EXTRA_MINUTES": 20, "EXTRA_MESSAGE": "afternoon tea"}}, "unique_idx": "ACTION_SET_ALARM-10605", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Please set an early wakeup call at 5:15 AM.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 5, "EXTRA_MINUTES": 15}}, "unique_idx": "ACTION_SET_ALARM-10606", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Activate an alarm at 17:10 labeled 'Evening Walk'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 17, "EXTRA_MINUTES": 10, "EXTRA_MESSAGE": "Evening Walk"}}, "unique_idx": "ACTION_SET_ALARM-10607", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "I want an alarm exactly at 23:59.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 23, "EXTRA_MINUTES": 59}}, "unique_idx": "ACTION_SET_ALARM-10608", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Could you arrange a morning alarm for 7:05 AM with vibrations off?", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 7, "EXTRA_MINUTES": 5, "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_SET_ALARM-10609", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Set the alarm for 10:50 AM and ensure that it doesn't display the clock app UI.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 10, "EXTRA_MINUTES": 50, "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_ALARM-10610", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "I'd like a repeating alarm for 06:00 AM every Tuesday and Thursday.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 6, "EXTRA_MINUTES": 0, "EXTRA_DAYS": ["Tuesday", "Thursday"]}}, "unique_idx": "ACTION_SET_ALARM-10611", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Please create an alarm at 12:30 PM with the note 'Lunch Break'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 12, "EXTRA_MINUTES": 30, "EXTRA_MESSAGE": "Lunch Break"}}, "unique_idx": "ACTION_SET_ALARM-10612", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Set an alarm for 22:00 with the ringtone http://ringtone.com/chime.mp3.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 22, "EXTRA_MINUTES": 0, "EXTRA_RINGTONE": "http://ringtone.com/chime.mp3"}}, "unique_idx": "ACTION_SET_ALARM-10613", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "I want an alarm at 9:55 AM titled 'Breakfast Time'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 9, "EXTRA_MINUTES": 55, "EXTRA_MESSAGE": "Breakfast Time"}}, "unique_idx": "ACTION_SET_ALARM-10614", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Create a silent repeating alarm at 14:20 on Friday with the note 'Team Meeting'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 14, "EXTRA_MINUTES": 20, "EXTRA_MESSAGE": "Team Meeting", "EXTRA_DAYS": ["Friday"], "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_SET_ALARM-10615", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Set an alarm for 18:35 labeled 'Dinner' and skip the clock interface.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 18, "EXTRA_MINUTES": 35, "EXTRA_MESSAGE": "Dinner", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_ALARM-10616", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "I need a simple alarm for 7:15 AM, please.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 7, "EXTRA_MINUTES": 15}}, "unique_idx": "ACTION_SET_ALARM-10617", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Set an alarm at 15:45 for 'Afternoon Workout' that repeats every Monday, Wednesday, and Friday.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 15, "EXTRA_MINUTES": 45, "EXTRA_MESSAGE": "Afternoon Workout", "EXTRA_DAYS": ["Monday", "Wednesday", "Friday"]}}, "unique_idx": "ACTION_SET_ALARM-10618", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Can you set an alarm for 13:05 labeled 'Lunchtime' and disable vibrations?", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 13, "EXTRA_MINUTES": 5, "EXTRA_MESSAGE": "Lunchtime", "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_SET_ALARM-10619", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Initiate an alarm at 20:40 with a ringtone from https://example.org/ringtone.mp3.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 20, "EXTRA_MINUTES": 40, "EXTRA_RINGTONE": "https://example.org/ringtone.mp3"}}, "unique_idx": "ACTION_SET_ALARM-10620", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Could you set an alarm at 5:50 AM that goes off only on Sundays?", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 5, "EXTRA_MINUTES": 50, "EXTRA_DAYS": ["Sunday"]}}, "unique_idx": "ACTION_SET_ALARM-10621", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Set an alarm for 11:30 AM with the note 'Meeting Reminder'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 11, "EXTRA_MINUTES": 30, "EXTRA_MESSAGE": "Meeting Reminder"}}, "unique_idx": "ACTION_SET_ALARM-10622", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Please set an alarm at 16:15 using the sound from http://mysite.com/sound.mp3.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 16, "EXTRA_MINUTES": 15, "EXTRA_RINGTONE": "http://mysite.com/sound.mp3"}}, "unique_idx": "ACTION_SET_ALARM-10623", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "I need an alarm at 8:25 AM with no additional settings.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 8, "EXTRA_MINUTES": 25}}, "unique_idx": "ACTION_SET_ALARM-10624", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Kindly create an alarm at 19:05 with the label 'Gym' that repeats on Friday and Saturday.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 19, "EXTRA_MINUTES": 5, "EXTRA_MESSAGE": "Gym", "EXTRA_DAYS": ["Friday", "Saturday"]}}, "unique_idx": "ACTION_SET_ALARM-10625", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Set a non-vibrating alarm at 20:00 with the message 'News Update'.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 20, "EXTRA_MINUTES": 0, "EXTRA_MESSAGE": "News Update", "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_SET_ALARM-10626", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "I want an alarm at 22:40 with a custom ringtone from http://sound.com/alert.mp3, and please do not show the UI pop-up.", "answer": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 22, "EXTRA_MINUTES": 40, "EXTRA_RINGTONE": "http://sound.com/alert.mp3", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_ALARM-10627", "tools": [{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"]}]}
{"query": "Could you set a timer for 10 minutes so that I remember to check the laundry?", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "10 minutes", "EXTRA_MESSAGE": "check the laundry"}}, "unique_idx": "ACTION_SET_TIMER-10628"}
{"query": "Start a countdown for 1 hours 30 minutes for my meeting alert.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "1 hours 30 minutes"}}, "unique_idx": "ACTION_SET_TIMER-10629"}
{"query": "I need a timer set for 45 seconds with the custom label 'Boiling eggs'.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "45 seconds", "EXTRA_MESSAGE": "Boiling eggs"}}, "unique_idx": "ACTION_SET_TIMER-10630"}
{"query": "Could you set up a 2 hours countdown in the background?", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "2 hours", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_TIMER-10631"}
{"query": "Timer request: Please run a 3 minutes timer without any notification pop-ups.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "3 minutes", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_TIMER-10632"}
{"query": "Set a countdown timer for 1 hours 15 minutes 30 seconds and label it 'Workout'.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "1 hours 15 minutes 30 seconds", "EXTRA_MESSAGE": "Workout"}}, "unique_idx": "ACTION_SET_TIMER-10633"}
{"query": "I want a quick timer: 50 seconds, please.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "50 seconds"}}, "unique_idx": "ACTION_SET_TIMER-10634"}
{"query": "Please initiate a 5 minutes timer through the command line, bypassing any UI confirmations.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "5 minutes", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_TIMER-10635"}
{"query": "Remind me in 90 minutes by setting a timer called 'Nap time'.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "90 minutes", "EXTRA_MESSAGE": "Nap time"}}, "unique_idx": "ACTION_SET_TIMER-10636"}
{"query": "Countdown timer: set it for 30 seconds and add a custom note 'Tea break'.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "30 seconds", "EXTRA_MESSAGE": "Tea break"}}, "unique_idx": "ACTION_SET_TIMER-10637"}
{"query": "I need a timer for 7 minutes 10 seconds. Can you set it for me?", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "7 minutes 10 seconds"}}, "unique_idx": "ACTION_SET_TIMER-10638"}
{"query": "Please set a 2 hours 5 minutes timer and start it immediately without showing any UI.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "2 hours 5 minutes", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_TIMER-10639"}
{"query": "Could you arrange a countdown timer for 4 minutes, tagged as 'Parking meter'?", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "4 minutes", "EXTRA_MESSAGE": "Parking meter"}}, "unique_idx": "ACTION_SET_TIMER-10640"}
{"query": "Initialize a timer counting down from 1 hours 0 minutes 0 seconds for an upcoming event.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "1 hours 0 minutes 0 seconds"}}, "unique_idx": "ACTION_SET_TIMER-10641"}
{"query": "Activate a timer for 25 minutes as a reminder for meeting prep, and don't prompt any UI.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "25 minutes", "EXTRA_MESSAGE": "reminder for meeting prep", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_TIMER-10642"}
{"query": "Set a timer for 10 minutes called 'Pasta timer'.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "10 minutes", "EXTRA_MESSAGE": "Pasta timer"}}, "unique_idx": "ACTION_SET_TIMER-10643", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Remind me in 5 minutes.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "5 minutes"}}, "unique_idx": "ACTION_SET_TIMER-10644", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Start a countdown timer for 2 hours 5 minutes.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "2 hours 5 minutes"}}, "unique_idx": "ACTION_SET_TIMER-10645", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "I need a timer that lasts 45 seconds.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "45 seconds"}}, "unique_idx": "ACTION_SET_TIMER-10646", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Please begin a countdown of 1 hours 10 minutes with the label 'Meeting prep'.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "1 hours 10 minutes", "EXTRA_MESSAGE": "Meeting prep"}}, "unique_idx": "ACTION_SET_TIMER-10647", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Run a timer for 20 minutes and don't show any UI.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "20 minutes", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_TIMER-10648", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Set an alarm: 30 minutes countdown.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "30 minutes"}}, "unique_idx": "ACTION_SET_TIMER-10649", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Timer for 1 hours 30 minutes 15 seconds with note 'Cooking'.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "1 hours 30 minutes 15 seconds", "EXTRA_MESSAGE": "Cooking"}}, "unique_idx": "ACTION_SET_TIMER-10650", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Start a timer for 5 minutes without UI popups.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "5 minutes", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_TIMER-10651", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Enable a countdown timer for 15 seconds.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "15 seconds"}}, "unique_idx": "ACTION_SET_TIMER-10652", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "I want to set a timer lasting 3 minutes 20 seconds for my workout.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "3 minutes 20 seconds", "EXTRA_MESSAGE": "workout"}}, "unique_idx": "ACTION_SET_TIMER-10653", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Please start a countdown timer for 7 minutes with a custom note 'Break time'.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "7 minutes", "EXTRA_MESSAGE": "Break time"}}, "unique_idx": "ACTION_SET_TIMER-10654", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Count down a 50 minute timer.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "50 minutes"}}, "unique_idx": "ACTION_SET_TIMER-10655", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Timer: start a countdown of 2 hours for me.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "2 hours"}}, "unique_idx": "ACTION_SET_TIMER-10656", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Set a quick 25 seconds timer.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "25 seconds"}}, "unique_idx": "ACTION_SET_TIMER-10657", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "I would like to initiate a timer for 40 minutes with the reminder 'Laundry'.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "40 minutes", "EXTRA_MESSAGE": "Laundry"}}, "unique_idx": "ACTION_SET_TIMER-10658", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Please set a timer for 1 hours 5 minutes 10 seconds.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "1 hours 5 minutes 10 seconds"}}, "unique_idx": "ACTION_SET_TIMER-10659", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Countdown: I need a 30 minutes timer for my meeting.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "30 minutes", "EXTRA_MESSAGE": "meeting"}}, "unique_idx": "ACTION_SET_TIMER-10660", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Activate a timer for 10 seconds.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "10 seconds"}}, "unique_idx": "ACTION_SET_TIMER-10661", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Can you launch a timer for 20 minutes 45 seconds with the note 'Tea Time', skipping the UI?", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "20 minutes 45 seconds", "EXTRA_MESSAGE": "Tea Time", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_TIMER-10662", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Set a timer for 55 minutes without extra notifications.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "55 minutes", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_TIMER-10663", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Start a countdown of 1 hours 25 minutes 30 seconds for my alarm.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "1 hours 25 minutes 30 seconds"}}, "unique_idx": "ACTION_SET_TIMER-10664", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "I need an alert in 10 minutes, label it 'Break Reminder'.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "10 minutes", "EXTRA_MESSAGE": "Break Reminder"}}, "unique_idx": "ACTION_SET_TIMER-10665", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Countdown timer for 90 seconds, please.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "90 seconds"}}, "unique_idx": "ACTION_SET_TIMER-10666", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Initiate a timer for 3 hours with no confirmation prompt.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "3 hours", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_TIMER-10667", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Please trigger a timer of 8 minutes with extra info 'Study Time'.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "8 minutes", "EXTRA_MESSAGE": "Study Time"}}, "unique_idx": "ACTION_SET_TIMER-10668", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "I require a countdown timer for 2 minutes 30 seconds to remind me to check the oven.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "2 minutes 30 seconds", "EXTRA_MESSAGE": "remind me to check the oven"}}, "unique_idx": "ACTION_SET_TIMER-10669", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Let me activate a timer: 47 minutes countdown.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "47 minutes"}}, "unique_idx": "ACTION_SET_TIMER-10670", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Countdown for 15 minutes and add a label: 'Exercise break'.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "15 minutes", "EXTRA_MESSAGE": "Exercise break"}}, "unique_idx": "ACTION_SET_TIMER-10671", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Please run a 95 seconds timer with no UI interruption.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "95 seconds", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_TIMER-10672", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "I want to start a timer for 4 minutes 15 seconds now.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "4 minutes 15 seconds"}}, "unique_idx": "ACTION_SET_TIMER-10673", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Count down a 6 minutes timer for my meditation session.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "6 minutes", "EXTRA_MESSAGE": "meditation session"}}, "unique_idx": "ACTION_SET_TIMER-10674", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Set the timer for 12 minutes 5 seconds without any pop-up dialogues.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "12 minutes 5 seconds", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_TIMER-10675", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Initiate a timer with 35 minutes duration and the name 'Project Time'.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "35 minutes", "EXTRA_MESSAGE": "Project Time"}}, "unique_idx": "ACTION_SET_TIMER-10676", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Please set a countdown for roughly 1 minute.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "1 minute"}}, "unique_idx": "ACTION_SET_TIMER-10677", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Can you create a 2 hours countdown timer?", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "2 hours"}}, "unique_idx": "ACTION_SET_TIMER-10678", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Configure a 18 seconds timer for my experiment.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "18 seconds"}}, "unique_idx": "ACTION_SET_TIMER-10679", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Activate a timer for 40 seconds, and include the note 'Quick Test'.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "40 seconds", "EXTRA_MESSAGE": "Quick Test"}}, "unique_idx": "ACTION_SET_TIMER-10680", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Set a timer for 85 minutes, label it as 'Meeting' and do so without any pop-up UI.", "answer": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "85 minutes", "EXTRA_MESSAGE": "Meeting", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_SET_TIMER-10681", "tools": [{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"]}]}
{"query": "Could you show me the list of all alarms that are currently set?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10682"}
{"query": "List my existing alarms, please.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10683"}
{"query": "I need to see what alarms I have set. Display them for me.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10684"}
{"query": "Show my alarms right now.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10685"}
{"query": "Can you list all the alarms I've programmed for this week?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10686"}
{"query": "Display the current alarm schedule.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10687"}
{"query": "Please show me the set alarms for today.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10688"}
{"query": "I want to check which alarms are active. List them out.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10689"}
{"query": "Reveal all the alarms I have on my system.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10690"}
{"query": "Could you please display my current alarms list?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10691"}
{"query": "Show all the alarms I've set.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10692"}
{"query": "I would like to view the alarms I have configured. Please provide the list.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10693"}
{"query": "Exhibit the details of all active alarms on my device.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10694"}
{"query": "Mostrar todos los despertadores programados.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10695"}
{"query": "Affiche-moi les alarmes en cours, s'il te plaît.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10696"}
{"query": "Show me all the alarms set on my device.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10697", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "I need a rundown of all alarms scheduled; please show them.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10698", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "What alarms have I set up on my phone?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10699", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "List all the alarms that are currently active.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10700", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Please pull up the list of my configured alarms.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10701", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Display all alarms I've scheduled.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10702", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "I want to review my alarm schedule; can you show them?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10703", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Would you mind listing all the alarms on my device?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10704", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Fetch my alarm list, please.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10705", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Could you provide an overview of all my set alarms?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10706", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Kindly display every alarm I've programmed.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10707", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "I need to see what's on my alarm list right now.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10708", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Show my alarms, please. I want to check the current schedule.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10709", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Enumerate all the alarms that are active at the moment.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10710", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Display my alarm details.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10711", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Could you kindly list out all my alarm settings?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10712", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "I’d like to check which alarms are active – please show them.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10713", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Pull up the current configuration of my alarms.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10714", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Show me the complete schedule of alarms I have set!", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10715", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Exhibit all my programmed alarm times.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10716", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Can you show my current alarm configurations?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10717", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "What's on my alarm list today? Please display it.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10718", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "I need a list of alarms I've arranged, can you pull it up?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10719", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Summarize all my set alarms for me, please.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10720", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Reveal all active alarms on my device.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10721", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Could you check and list my alarms?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10722", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "I want to know my current alarm settings, list them out.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10723", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Display the schedule for my alarms, please.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10724", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Please show me the alarms that are currently ringing along with their details.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10725", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "I would like to view the alarms already set; kindly display them.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10726", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Could you bring up my list of set alarms right now?", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10727", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Access and show all my alarm configurations, please.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10728", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Exhibit every alarm I've configured on my phone.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10729", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Kindly reveal the complete list of my alarms.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10730", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Mostrar mis alarmas actuales, por favor.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10731", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Lay out all the active alarms for me, please.", "answer": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}, "unique_idx": "ACTION_SHOW_ALARMS-10732", "tools": [{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"]}]}
{"query": "Could you record a video for me using my phone's camera application?", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10733"}
{"query": "I need to capture a video clip. Please open the camera and record the video without specifying a storage location.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10734"}
{"query": "Record a video and save it at content://videos/myclip.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://videos/myclip.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10735"}
{"query": "Please launch the video recording app and let it decide where to store the resulting file.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10736"}
{"query": "I would like to film a short video. Could you use the camera app to capture a video?", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10737"}
{"query": "Record my video and save it in the following location: content://my_videos/clip.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://my_videos/clip.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10738"}
{"query": "Can you capture a video snap from my camera, letting the system choose the storage path?", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10739"}
{"query": "Kindly record a video and ensure the output is saved to content://example/uri.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://example/uri"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10740"}
{"query": "Use the camera application to capture a new video.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10741"}
{"query": "Please take a video recording and store it at content://videos/myclip.mp4 for later use.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://videos/myclip.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10742"}
{"query": "I need to film a quick video; use the default storage option provided by the camera app.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10743"}
{"query": "Could you initiate a video capture session and let the system assign the storage URI of the recorded video?", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10744"}
{"query": "Begin a video recording now and ensure that the file is saved to content://media/recording.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://media/recording.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10745"}
{"query": "Please record a video using my camera app and use your default settings for saving the file.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10746"}
{"query": "I want to capture a video on my smartphone. Record the video and use the specified location content://videos/myclip.mp4 for storage.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://videos/myclip.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10747"}
{"query": "Open the camera and record a video, letting the system determine where to store it.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10748", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "I would appreciate it if you recorded a brief video clip with my camera app.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10749", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Please take a video recording using my camera, saving automatically at the default location.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10750", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "I need a new video recording, please open the camera and capture the video.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10751", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Capture a video using my phone's camera without any preset file destination.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10752", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Could you help me record a video? I don't have a specific location preference for saving it.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10753", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Let’s record a video; please start the camera and capture a video clip for me.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10754", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "I want a video to be recorded now via my device's camera. Use the default save path.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10755", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Record and save a video to content://myfolder/videoclip.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://myfolder/videoclip.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10756", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Record a short video using your camera. I prefer the system's storage option.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10757", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Could you film a video and let the device decide where to store it?", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10758", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "I'd like a video summary recorded right away, with the file stored at content://videos/homevideo.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://videos/homevideo.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10759", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Shoot a video clip for me, allowing the default location for saving.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10760", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Please record a video now without manually setting a save destination.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10761", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "I want to capture a moment on video; simply record and let the phone choose the save path.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10762", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Could you quickly record a video using the camera and store it at content://captured/videos.mp4?", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://captured/videos.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10763", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Record a video for me using the camera, and let the system decide the file location automatically.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10764", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "I’d like to record a video, please launch the camera and start recording immediately.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10765", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Record a video clip and save the output to content://storage/videos/clip.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://storage/videos/clip.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10766", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Start the camera and record a video; no specific save path needed.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10767", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "I need you to record a video; simply use the default recording settings.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10768", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Capture a video now using the device camera, with the video stored at content://archive/video.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://archive/video.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10769", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Please capture a live video and store it where the system automatically assigns the location.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10770", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Can you film a video for me? No file URI necessary, let the system handle it.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10771", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "I want to record a video and save it to content://custom/vid.mp4, so please use the camera.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://custom/vid.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10772", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Using the camera app, please record a video clip with the default storage setup.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10773", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Take a video using my phone's camera and save it in the default location.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10774", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "I need a quick video capture from the camera. No need to specify a storage URI.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10775", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Capture a video for me and store the file at content://media/videos/latest.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://media/videos/latest.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10776", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Record a video clip ensuring the file is saved in the designated folder content://data/videos.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://data/videos.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10777", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Could you start a video recording session via the camera, saving to the system's assigned place?", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10778", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Please record a video using the camera application and if possible, save it at content://files/video.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://files/video.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10779", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Record a video using the camera and store it at content://videos/record.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://videos/record.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10780", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Can you capture a video using the camera app without specifying a storage path?", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10781", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "I want to capture a video now with my phone's camera. Please start recording immediately.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10782", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Begin video recording on my phone using the default settings.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10783", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Please record a video and save it to content://media/myvideo.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://media/myvideo.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10784", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Launch the video recorder and start shooting a clip immediately without any extra instructions.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10785", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Kindly use my device's camera to record a video with no storage location specified.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10786", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "I require a video recording; open the camera app and capture a video for me.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10787", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Record a video, please, and save the file at content://downloads/video1.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://downloads/video1.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10788", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Initiate a video recording session without any special instructions on where to store the clip.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10789", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Capture a video right now with the phone's built-in camera.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10790", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Can you make a recording using the camera and store it at content://files/myfilm.mp4?", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://files/myfilm.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10791", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Start the camera and record a quick video clip; no storage location necessary.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10792", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Open the camera app to record a video for me immediately.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10793", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Please initiate video capture and let the system decide where to save it.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10794", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "I would like you to capture a video now; do not worry about specifying the save path.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10795", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Get the camera to record a video, letting the system choose the storage location.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10796", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Could you start the camera so I can record a quick video?", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10797", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "I need a video recorded using my camera; please save it at content://abc/vid.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://abc/vid.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10798", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Activate video mode on my phone's camera and record a new clip.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10799", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Using the camera application, please capture a video without specifying a storage path.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10800", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Kindly capture a video now and store it at content://videos/event.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://videos/event.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10801", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Please begin recording a video using the camera with the system's default directory.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10802", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "I want to shoot a video; use the camera and let it automatically select the save location.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10803", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Could you capture a video and ensure it is saved at content://recordings/party.mp4?", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://recordings/party.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10804", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Start capturing video using the built-in camera; no file location needs to be specified.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10805", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Initiate a camera app session to record a video.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10806", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "I would appreciate it if you could record a video and store it on content://final/video.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://final/video.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10807", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Use my camera to record a clip and save it to the default location, please.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10808", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Open the video recorder and capture a clip for me right now.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10809", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Record a video and if possible, set the save location to content://android/videos/clip.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://android/videos/clip.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10810", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Can you launch the camera to record a video immediately?", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10811", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Please capture a video and store it on the device without specifying any save path.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10812", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Kindly record a video using my camera, with the output going to content://recorded/video.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://recorded/video.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10813", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "I need to film a short video; please use the video recorder on my phone.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10814", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Video record please; using the camera app and no additional instructions for saving the file.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10815", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Now record a video for me and store it under content://memory/vid2021.mp4.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {"file_uri": "content://memory/vid2021.mp4"}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10816", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Kindly capture a video with the system’s camera app without any specific save instructions.", "answer": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}, "unique_idx": "ACTION_VIDEO_CAPTURE-10817", "tools": [{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments": {"file_uri": {"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required": false}}, "returns": {"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example": ["content://example/uri", "content://videos/myclip.mp4"]}, "examples": ["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"]}]}
{"query": "Could you show me the contact details for the contact with URI content://contacts/people/5678?", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/5678"}}, "unique_idx": "ACTION_VIEW_CONTACT-10818"}
{"query": "Display the details of the contact record at content://contacts/people/1234.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1234"}}, "unique_idx": "ACTION_VIEW_CONTACT-10819"}
{"query": "I need to check the complete details of this contact: content://contacts/people/9876. Please open it.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/9876"}}, "unique_idx": "ACTION_VIEW_CONTACT-10820"}
{"query": "View contact with the following URI: content://contacts/people/2468.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/2468"}}, "unique_idx": "ACTION_VIEW_CONTACT-10821"}
{"query": "Please open the contact specified by content://contacts/people/1122 so I can see their information.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1122"}}, "unique_idx": "ACTION_VIEW_CONTACT-10822"}
{"query": "I want to check the detailed info for the contact at content://contacts/people/5555.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/5555"}}, "unique_idx": "ACTION_VIEW_CONTACT-10823"}
{"query": "Show me the full details of the contact whose URI is content://contacts/people/7788.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/7788"}}, "unique_idx": "ACTION_VIEW_CONTACT-10824"}
{"query": "Kindly open up the contact details for the URI content://contacts/people/3344, please.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/3344"}}, "unique_idx": "ACTION_VIEW_CONTACT-10825"}
{"query": "I need to inspect the details of my friend; the contact URI is content://contacts/people/4433.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/4433"}}, "unique_idx": "ACTION_VIEW_CONTACT-10826"}
{"query": "Retrieve all details for the contact located at content://contacts/people/2211.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/2211"}}, "unique_idx": "ACTION_VIEW_CONTACT-10827"}
{"query": "Access the contact information using this URI: content://contacts/people/6677.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/6677"}}, "unique_idx": "ACTION_VIEW_CONTACT-10828"}
{"query": "Could you fetch and display the complete profile of the contact at URI content://contacts/people/9900?", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/9900"}}, "unique_idx": "ACTION_VIEW_CONTACT-10829"}
{"query": "Help me view the contact details which are available at content://contacts/people/1010.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1010"}}, "unique_idx": "ACTION_VIEW_CONTACT-10830"}
{"query": "I'd like to open the detailed view of the contact found at content://contacts/people/2020.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/2020"}}, "unique_idx": "ACTION_VIEW_CONTACT-10831"}
{"query": "Please display the details of the contact with the URI content://contacts/people/3030.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/3030"}}, "unique_idx": "ACTION_VIEW_CONTACT-10832"}
{"query": "Could you please open the contact details available at content://contacts/people/1001?", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1001"}}, "unique_idx": "ACTION_VIEW_CONTACT-10833", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "I want to check the comprehensive profile stored at content://contacts/people/1002. Please display it.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1002"}}, "unique_idx": "ACTION_VIEW_CONTACT-10834", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Show me the detailed information of the contact with URI content://contacts/people/1003.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1003"}}, "unique_idx": "ACTION_VIEW_CONTACT-10835", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Please load the contact page for content://contacts/people/1004 so I can see their info.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1004"}}, "unique_idx": "ACTION_VIEW_CONTACT-10836", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Access the full details of the contact stored at content://contacts/people/1005.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1005"}}, "unique_idx": "ACTION_VIEW_CONTACT-10837", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "I need to view the profile information at content://contacts/people/1006. Can you help?", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1006"}}, "unique_idx": "ACTION_VIEW_CONTACT-10838", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Kindly display the contact details for the URI content://contacts/people/1007.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1007"}}, "unique_idx": "ACTION_VIEW_CONTACT-10839", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Can you fetch and show the contact information corresponding to content://contacts/people/1008?", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1008"}}, "unique_idx": "ACTION_VIEW_CONTACT-10840", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Retrieve and open the detailed view for contact at content://contacts/people/1009.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1009"}}, "unique_idx": "ACTION_VIEW_CONTACT-10841", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Would you please bring up the contact record located at content://contacts/people/1010?", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1010"}}, "unique_idx": "ACTION_VIEW_CONTACT-10842", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Show the profile for the contact available at content://contacts/people/1011.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1011"}}, "unique_idx": "ACTION_VIEW_CONTACT-10843", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Please display the detailed information of the contact whose URI is content://contacts/people/1012.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1012"}}, "unique_idx": "ACTION_VIEW_CONTACT-10844", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "I would like to review the contact details at content://contacts/people/1013. Open it, please.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1013"}}, "unique_idx": "ACTION_VIEW_CONTACT-10845", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Open up the contact record for me located at content://contacts/people/1014.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1014"}}, "unique_idx": "ACTION_VIEW_CONTACT-10846", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Could you bring up the complete details of the contact with URI content://contacts/people/1015?", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1015"}}, "unique_idx": "ACTION_VIEW_CONTACT-10847", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "I need to examine the contact details; please open the URI content://contacts/people/1017.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1017"}}, "unique_idx": "ACTION_VIEW_CONTACT-10848", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Kindly load the contact information from content://contacts/people/1018.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1018"}}, "unique_idx": "ACTION_VIEW_CONTACT-10849", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Access and show me the contact profile at content://contacts/people/1021.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1021"}}, "unique_idx": "ACTION_VIEW_CONTACT-10850", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "I would appreciate it if you could open the contact view for content://contacts/people/1022.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1022"}}, "unique_idx": "ACTION_VIEW_CONTACT-10851", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Retrieve the contact details from content://contacts/people/1023 and display them.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1023"}}, "unique_idx": "ACTION_VIEW_CONTACT-10852", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Could you open the detailed contact page at content://contacts/people/1024 for me?", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1024"}}, "unique_idx": "ACTION_VIEW_CONTACT-10853", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "I want to see the complete details of my contact at content://contacts/people/1025. Please open it.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1025"}}, "unique_idx": "ACTION_VIEW_CONTACT-10854", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Please bring up the contact record from content://contacts/people/1026 so I can review the info.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1026"}}, "unique_idx": "ACTION_VIEW_CONTACT-10855", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Show me the contact's details by accessing content://contacts/people/1027.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1027"}}, "unique_idx": "ACTION_VIEW_CONTACT-10856", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "I require the complete contact information available at content://contacts/people/1028. Load it, please.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1028"}}, "unique_idx": "ACTION_VIEW_CONTACT-10857", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Could you please retrieve and display the info for the contact at content://contacts/people/1029?", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1029"}}, "unique_idx": "ACTION_VIEW_CONTACT-10858", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "I need the contact details for content://contacts/people/1030; please open it up.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1030"}}, "unique_idx": "ACTION_VIEW_CONTACT-10859", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Kindly display the information of the contact identified by content://contacts/people/1032.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1032"}}, "unique_idx": "ACTION_VIEW_CONTACT-10860", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Open the contact details for me from URI content://contacts/people/1033.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1033"}}, "unique_idx": "ACTION_VIEW_CONTACT-10861", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "I'd like to review the profile stored in content://contacts/people/1034. Please display it.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1034"}}, "unique_idx": "ACTION_VIEW_CONTACT-10862", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Could you fetch the contact details at content://contacts/people/1035 for my inspection?", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1035"}}, "unique_idx": "ACTION_VIEW_CONTACT-10863", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Access the contact information provided at content://contacts/people/1036 so I can see it.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1036"}}, "unique_idx": "ACTION_VIEW_CONTACT-10864", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "I want to open the detailed record for content://contacts/people/1037. Can you do that?", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1037"}}, "unique_idx": "ACTION_VIEW_CONTACT-10865", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Please load the contact's complete details from content://contacts/people/1038 for a review.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1038"}}, "unique_idx": "ACTION_VIEW_CONTACT-10866", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "I need to see the contact's details available at content://contacts/people/1040 immediately.", "answer": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/1040"}}, "unique_idx": "ACTION_VIEW_CONTACT-10867", "tools": [{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"]}]}
{"query": "Please open the device's still image camera so that I can snap a picture.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10868"}
{"query": "Launch the camera app in still mode for taking a photograph.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10869"}
{"query": "I need to take a photo. Can you open up the still image camera?", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10870"}
{"query": "Could you activate the still photo camera on my phone?", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10871"}
{"query": "Open my camera app in still-image mode, please.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10872"}
{"query": "I'd like to capture a moment; please start the still-image camera.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10873"}
{"query": "Get my phone ready for taking a photo by launching its still image camera.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10874"}
{"query": "Please open the photo camera function on my device so I can take a snapshot.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10875"}
{"query": "Turn on the camera app to capture a still image.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10876"}
{"query": "I want to shoot a photo; please launch the still mode camera on my phone.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10877"}
{"query": "Kindly start the still image capture app on my smartphone to take a picture.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10878"}
{"query": "Activate the system's still camera so I can quickly snap a photo.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10879"}
{"query": "I need to open the camera in photo mode. Please launch the still image camera.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10880"}
{"query": "Trigger the device's still image camera app for a photo capture.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10881"}
{"query": "Launch the still image camera app.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10882", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Start photo capture mode on my phone.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10883", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "I want to take a photo. Launch my still camera.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10884", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Please bring up the standard camera mode to snap a photo.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10885", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Could you open my device's still camera app?", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10886", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Open the photographic mode on my smartphone, please.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10887", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Access the still image capture app now.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10888", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Execute the still photo mode for snapping a picture.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10889", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Turn on my still image camera application.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10890", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Can you start the system camera for still photos?", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10891", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "I need to capture an image. Open the camera in still mode.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10892", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Set up the phone's photo mode to take a picture.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10893", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Engage my camera's still photography function.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10894", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Help me open the still image camera so I can take a photo.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10895", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "I want to shoot a picture: launch the photo camera.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10896", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Trigger the camera in still mode to capture a moment.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10897", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Activate the standard photo camera feature on my device.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10898", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Commence the still picture camera so I can snap a shot.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10899", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Please initiate the still image capture mode for photography.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10900", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Boot up the digital camera app for taking a static image.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10901", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Initiate the phone's picture-taking mode in still image format.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10902", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "I wish to record a still snapshot; please fire up the camera.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10903", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Summon the device's camera app for a still photograph.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10904", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Kindly open the application's still capture for a quick shot.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10905", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Start my smartphone's camera in still image mode to snap a photo.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10906", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "I need the still photography app from my phone, please open it.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10907", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Set up my camera in photo mode so I can click a shot.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10908", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "I require the still photo function active; please start it.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10909", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Launch the system's still image capture application now.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10910", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "I want to take a portrait. Open up the good old still camera.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10911", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Care to open the photo application on my phone for a still shot?", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10912", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "I request to use the still image mode on my smartphone.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10913", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Begin the photo capturing tool on my device as a still image camera.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10914", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Open my still camera so I can freeze a moment in time.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10915", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Could you start the device's normal photo shooting mode?", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10916", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Switch to the camera's still image mode so I can take a picture.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10917", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Kick off the still photo app on my device.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10918", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Enable the camera to operate in still image mode for a photo.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10919", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Please fire up my phone's still image camera for a snap.", "answer": {"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_STILL_IMAGE_CAMERA-10920", "tools": [{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"]}]}
{"query": "Could you please open the video camera app so I can record a video?", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10921"}
{"query": "I need to shoot a video clip, can you start the video recording application for me?", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10922"}
{"query": "Please launch the system camera in video mode.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10923"}
{"query": "Open the video camera so that I can capture some footage.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10924"}
{"query": "I want to record a video; could you trigger my device's video camera application?", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10925"}
{"query": "Activate the video recording mode on my phone, please.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10926"}
{"query": "Initiate the video camera function so that I can start recording.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10927"}
{"query": "Could you launch my phone's camera in video mode?", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10928"}
{"query": "Please open the video recording app on my device.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10929"}
{"query": "Start the video camera app immediately so I can record something.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10930"}
{"query": "Hey, can you switch on the video camera for recording a clip?", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10931"}
{"query": "I am about to record an event. Open my phone's video recording application.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10932"}
{"query": "Please activate the video camera on my device to record a short film.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10933"}
{"query": "Launch the app that allows me to record video, please.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10934"}
{"query": "I need to shoot some video footage; please open the video camera function.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10935"}
{"query": "Could you please open my phone's video recording application?", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10936", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "I need to capture a moving scene. Launch the video camera app for me.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10937", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Hey, please activate the video recording mode on my device.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10938", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Open the video recording feature on my smartphone so I can record a clip.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10939", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "I want to record a short film; start my camera in video mode.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10940", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Initiate the video camera on my phone, I need to shoot some footage.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10941", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Please switch on the video camera application to capture video.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10942", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Could you launch the system's video recording app for me?", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10943", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "I need to record an event; open my device's video camera function.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10944", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Open the video app on my phone so I can start filming now.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10945", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Can you prompt the video camera to start recording?", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10946", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "I'm planning to capture some video. Please start the video camera application.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10947", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "I would like to film something. Could you open my phone's video camera?", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10948", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Kindly start the video recording function on my smartphone.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10949", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "For a quick recording, please turn on the video camera on my device.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10950", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Could you trigger the video camera to record footage of my surroundings?", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10951", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "I need to record a vlog, can you launch the video recording camera?", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10952", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Please power up my phone's video camera so I can document an event.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10953", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Activate your video recording mode, I want to capture a personal message.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10954", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Could you bring up the video camera application on my mobile?", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10955", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "I require my video camera to be launched, please open the video recording mode.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10956", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Open my device's camera in video mode so I can start shooting a scene.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10957", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "I need to capture a live moment, kindly open the video recording application.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10958", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Please enable the video camera on my phone for a recording session.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10959", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Launch the video mode of my camera so I can record a quick tutorial.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10960", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "I need to record my performance; please open the video camera.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10961", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Kindly trigger the video recording feature; I have a moment to capture.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10962", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Could you set the phone to video mode? I want to film a quick clip.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10963", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "I would like to record some video content; turn on video recording on my phone.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10964", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Please fire up the video camera app on my device so I can start documenting.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10965", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "I want to record my surroundings. Open the video recording application, please.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10966", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Can you initiate my camera in video mode? I wish to record a message.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10967", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Please enable video mode so I can capture a live event using my phone's camera.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10968", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Switch my phone over to video recording mode. I want to shoot a quick interview.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10969", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Activate the video camera function on my mobile, please.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10970", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "I need to document an event quickly—launch the video camera app on my device.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10971", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Prepare the camera for video recording, I need to shoot a video presentation.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10972", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Turn on the video function of my camera so that I can start recording the demonstration.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10973", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Please open the app that lets me record videos on my phone.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10974", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Could you get the video camera app running? I need to capture some moments on video.", "answer": {"plan": "INTENT_ACTION_VIDEO_CAMERA", "arguments": {}}, "unique_idx": "INTENT_ACTION_VIDEO_CAMERA-10975", "tools": [{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"]}]}
{"query": "Please dial the number 555-1234 for me.", "answer": {"plan": "dial", "arguments": {"phone_number": "555-1234"}}, "unique_idx": "dial-10976"}
{"query": "I need you to call 800-456-7890 right away.", "answer": {"plan": "dial", "arguments": {"phone_number": "800-456-7890"}}, "unique_idx": "dial-10977"}
{"query": "Connect me to the number 999-888-7777, please.", "answer": {"plan": "dial", "arguments": {"phone_number": "999-888-7777"}}, "unique_idx": "dial-10978"}
{"query": "Could you dial 212-867-5309 for me?", "answer": {"plan": "dial", "arguments": {"phone_number": "212-867-5309"}}, "unique_idx": "dial-10979"}
{"query": "Can you call 123-456-7890?", "answer": {"plan": "dial", "arguments": {"phone_number": "123-456-7890"}}, "unique_idx": "dial-10980"}
{"query": "Please place a call to 404-555-0101 immediately.", "answer": {"plan": "dial", "arguments": {"phone_number": "404-555-0101"}}, "unique_idx": "dial-10981"}
{"query": "I want to initiate a phone call to 617-555-1234.", "answer": {"plan": "dial", "arguments": {"phone_number": "617-555-1234"}}, "unique_idx": "dial-10982"}
{"query": "Ring up the number 303-333-4444.", "answer": {"plan": "dial", "arguments": {"phone_number": "303-333-4444"}}, "unique_idx": "dial-10983"}
{"query": "I need to reach someone at 111-222-3333, so please call them.", "answer": {"plan": "dial", "arguments": {"phone_number": "111-222-3333"}}, "unique_idx": "dial-10984"}
{"query": "Using the mobile call feature, please dial 800-123-4567.", "answer": {"plan": "dial", "arguments": {"phone_number": "800-123-4567"}}, "unique_idx": "dial-10985"}
{"query": "Phone call: 202-555-0198.", "answer": {"plan": "dial", "arguments": {"phone_number": "202-555-0198"}}, "unique_idx": "dial-10986"}
{"query": "Could you begin a phone call with this number: 415-000-1234?", "answer": {"plan": "dial", "arguments": {"phone_number": "415-000-1234"}}, "unique_idx": "dial-10987"}
{"query": "I need help calling 678-901-2345.", "answer": {"plan": "dial", "arguments": {"phone_number": "678-901-2345"}}, "unique_idx": "dial-10988"}
{"query": "Activate the call function on 650-987-6543.", "answer": {"plan": "dial", "arguments": {"phone_number": "650-987-6543"}}, "unique_idx": "dial-10989"}
{"query": "Call now 917-555-6789.", "answer": {"plan": "dial", "arguments": {"phone_number": "917-555-6789"}}, "unique_idx": "dial-10990"}
{"query": "Call 305-123-4567 for me.", "answer": {"plan": "dial", "arguments": {"phone_number": "305-123-4567"}}, "unique_idx": "dial-10991", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "I need to call 404-789-4561.", "answer": {"plan": "dial", "arguments": {"phone_number": "404-789-4561"}}, "unique_idx": "dial-10992", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Begin a phone call to 617-111-2222.", "answer": {"plan": "dial", "arguments": {"phone_number": "617-111-2222"}}, "unique_idx": "dial-10993", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Initiate a call to number 800-999-0000.", "answer": {"plan": "dial", "arguments": {"phone_number": "800-999-0000"}}, "unique_idx": "dial-10994", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Connect the call to 718-333-4444.", "answer": {"plan": "dial", "arguments": {"phone_number": "718-333-4444"}}, "unique_idx": "dial-10995", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Please ring up 773-654-3210.", "answer": {"plan": "dial", "arguments": {"phone_number": "773-654-3210"}}, "unique_idx": "dial-10996", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Could you ring 312-987-6543?", "answer": {"plan": "dial", "arguments": {"phone_number": "312-987-6543"}}, "unique_idx": "dial-10997", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Please initiate dialing to 650-444-1212.", "answer": {"plan": "dial", "arguments": {"phone_number": "650-444-1212"}}, "unique_idx": "dial-10998", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "I need a call set up with 503-777-8888.", "answer": {"plan": "dial", "arguments": {"phone_number": "503-777-8888"}}, "unique_idx": "dial-10999", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Ring 847-555-1234, please.", "answer": {"plan": "dial", "arguments": {"phone_number": "847-555-1234"}}, "unique_idx": "dial-11000", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Help me connect to 800-222-3333.", "answer": {"plan": "dial", "arguments": {"phone_number": "800-222-3333"}}, "unique_idx": "dial-11001", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Call the number 212-333-4444 for me.", "answer": {"plan": "dial", "arguments": {"phone_number": "212-333-4444"}}, "unique_idx": "dial-11002", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Please use the dialer to contact 718-555-6789.", "answer": {"plan": "dial", "arguments": {"phone_number": "718-555-6789"}}, "unique_idx": "dial-11003", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Set up a voice call to 919-876-5432.", "answer": {"plan": "dial", "arguments": {"phone_number": "919-876-5432"}}, "unique_idx": "dial-11004", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Dial the number 305-321-4321.", "answer": {"plan": "dial", "arguments": {"phone_number": "305-321-4321"}}, "unique_idx": "dial-11005", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "I want to reach 404-555-0123 via call.", "answer": {"plan": "dial", "arguments": {"phone_number": "404-555-0123"}}, "unique_idx": "dial-11006", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Use the phone function to dial 617-888-2222.", "answer": {"plan": "dial", "arguments": {"phone_number": "617-888-2222"}}, "unique_idx": "dial-11007", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Could you help me dial out to 650-999-8888?", "answer": {"plan": "dial", "arguments": {"phone_number": "650-999-8888"}}, "unique_idx": "dial-11008", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Dial 212-777-6666 at your earliest convenience.", "answer": {"plan": "dial", "arguments": {"phone_number": "212-777-6666"}}, "unique_idx": "dial-11009", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Connect me on a call with 305-666-5555.", "answer": {"plan": "dial", "arguments": {"phone_number": "305-666-5555"}}, "unique_idx": "dial-11010", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Please ring the phone at 404-321-6549.", "answer": {"plan": "dial", "arguments": {"phone_number": "404-321-6549"}}, "unique_idx": "dial-11011", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "I have to call 617-333-1111; please dial that number.", "answer": {"plan": "dial", "arguments": {"phone_number": "617-333-1111"}}, "unique_idx": "dial-11012", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Call number 650-555-4321 for a meeting.", "answer": {"plan": "dial", "arguments": {"phone_number": "650-555-4321"}}, "unique_idx": "dial-11013", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Activate a call to 212-888-7777 right away.", "answer": {"plan": "dial", "arguments": {"phone_number": "212-888-7777"}}, "unique_idx": "dial-11014", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Call 305-444-9999 now, please.", "answer": {"plan": "dial", "arguments": {"phone_number": "305-444-9999"}}, "unique_idx": "dial-11015", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Connect a call with 404-666-3333 using your phone.", "answer": {"plan": "dial", "arguments": {"phone_number": "404-666-3333"}}, "unique_idx": "dial-11016", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Initiate communication with 617-999-0001.", "answer": {"plan": "dial", "arguments": {"phone_number": "617-999-0001"}}, "unique_idx": "dial-11017", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Ring up 650-777-5555 on my phone.", "answer": {"plan": "dial", "arguments": {"phone_number": "650-777-5555"}}, "unique_idx": "dial-11018", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Please dial the number 212-555-0101 for me.", "answer": {"plan": "dial", "arguments": {"phone_number": "212-555-0101"}}, "unique_idx": "dial-11019", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Could you put me through to 305-222-3344?", "answer": {"plan": "dial", "arguments": {"phone_number": "305-222-3344"}}, "unique_idx": "dial-11020", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "I would like to call 404-999-8888, please.", "answer": {"plan": "dial", "arguments": {"phone_number": "404-999-8888"}}, "unique_idx": "dial-11021", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Enable a call to 617-444-5555 using my dialer.", "answer": {"plan": "dial", "arguments": {"phone_number": "617-444-5555"}}, "unique_idx": "dial-11022", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Start a call on 650-123-4567 immediately.", "answer": {"plan": "dial", "arguments": {"phone_number": "650-123-4567"}}, "unique_idx": "dial-11023", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Ring the number 212-678-9012, please.", "answer": {"plan": "dial", "arguments": {"phone_number": "212-678-9012"}}, "unique_idx": "dial-11024", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "I need to get in touch with 305-777-1212, call them now.", "answer": {"plan": "dial", "arguments": {"phone_number": "305-777-1212"}}, "unique_idx": "dial-11025", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Connect the call to 404-123-3210 without delay.", "answer": {"plan": "dial", "arguments": {"phone_number": "404-123-3210"}}, "unique_idx": "dial-11026", "tools": [{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"]}]}
{"query": "Could you please fetch the email info for the contact at /contacts/12345?", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/12345", "info_type": "email"}}, "unique_idx": "get_contact_info-11027"}
{"query": "I need to retrieve the phone number for my friend from the contact URI /contacts/friend_phone.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/friend_phone", "info_type": "phone"}}, "unique_idx": "get_contact_info-11028"}
{"query": "Get the mailing address details for the contact located at /contacts/jane_doe.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/jane_doe", "info_type": "address"}}, "unique_idx": "get_contact_info-11029"}
{"query": "Show me a summary of the contact info for /contacts/samuel.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/samuel"}}, "unique_idx": "get_contact_info-11030"}
{"query": "I would like to see the email details for the contact accessed at /profiles/bob_email.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/profiles/bob_email", "info_type": "email"}}, "unique_idx": "get_contact_info-11031"}
{"query": "Fetch the phone number for the contact at /data/contact_999.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/data/contact_999", "info_type": "phone"}}, "unique_idx": "get_contact_info-11032"}
{"query": "Please retrieve the address from the contact record at /user/info/hello_world.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/user/info/hello_world", "info_type": "address"}}, "unique_idx": "get_contact_info-11033"}
{"query": "I need a complete summary of the contact details for /contacts/alexander.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/alexander"}}, "unique_idx": "get_contact_info-11034"}
{"query": "Give me the email information for the contact found at /mycontacts/julia_d.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/mycontacts/julia_d.", "info_type": "email"}}, "unique_idx": "get_contact_info-11035"}
{"query": "Could you extract the telephone details for the contact at /contact/mark?", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contact/mark", "info_type": "phone"}}, "unique_idx": "get_contact_info-11036"}
{"query": "Retrieve the full contact summary from /contacts/john_doe.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/john_doe"}}, "unique_idx": "get_contact_info-11037"}
{"query": "Please get the address details for the contact with URI /contact/info/sara.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contact/info/sara", "info_type": "address"}}, "unique_idx": "get_contact_info-11038"}
{"query": "Looking up the phone information from contact /contacts/alan_smith. Can you help?", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/alan_smith", "info_type": "phone"}}, "unique_idx": "get_contact_info-11039"}
{"query": "Need to acquire the email address for the contact at /contacts/lily-email.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/lily-email", "info_type": "email"}}, "unique_idx": "get_contact_info-11040"}
{"query": "What is the contact summary for the URI /directory/contact_456?", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/directory/contact_456"}}, "unique_idx": "get_contact_info-11041"}
{"query": "Retrieve the address from the contact record at /user/info/sandra.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/user/info/sandra", "info_type": "address"}}, "unique_idx": "get_contact_info-11042", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "I need a summary of the contact details for /contacts/bob_jones.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/bob_jones"}}, "unique_idx": "get_contact_info-11043", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Can you get the phone number that belongs to /contacts/mary_phone?", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/mary_phone", "info_type": "phone"}}, "unique_idx": "get_contact_info-11044", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Please fetch the email address for the contact located at /profile/john.doe.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/profile/john.doe", "info_type": "email"}}, "unique_idx": "get_contact_info-11045", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "I require a full summary of the contact details from /contacts/adam.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/adam"}}, "unique_idx": "get_contact_info-11046", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Could you fetch the phone information from /contacts/amy_2023?", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/amy_2023", "info_type": "phone"}}, "unique_idx": "get_contact_info-11047", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Fetch the email information for the contact at /directory/evelyn.email.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/directory/evelyn.email", "info_type": "email"}}, "unique_idx": "get_contact_info-11048", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "I want to know the address for the contact listed at /user/profile/jack.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/user/profile/jack", "info_type": "address"}}, "unique_idx": "get_contact_info-11049", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Show me a complete summary for /data/alex.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/data/alex"}}, "unique_idx": "get_contact_info-11050", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Please pull the phone number from the contact at /contacts/david.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/david", "info_type": "phone"}}, "unique_idx": "get_contact_info-11051", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Can you retrieve the email info for the record at /contacts/laura?", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/laura", "info_type": "email"}}, "unique_idx": "get_contact_info-11052", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "I require the address details of the contact at /user/info/samuel.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/user/info/samuel", "info_type": "address"}}, "unique_idx": "get_contact_info-11053", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "What is the phone number associated with /contacts/rita?", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/rita", "info_type": "phone"}}, "unique_idx": "get_contact_info-11054", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Get me the contact summary for /contacts/henry.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/henry"}}, "unique_idx": "get_contact_info-11055", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "I need to see the email details from /users/info/nina.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/users/info/nina", "info_type": "email"}}, "unique_idx": "get_contact_info-11056", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Give me the phone information from the contact record located at /contacts/oliver.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/oliver", "info_type": "phone"}}, "unique_idx": "get_contact_info-11057", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Could you deliver the address info for the URI /user/contact/paul?", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/user/contact/paul", "info_type": "address"}}, "unique_idx": "get_contact_info-11058", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Fetch the contact summary for /directory/linda_contact.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/directory/linda_contact"}}, "unique_idx": "get_contact_info-11059", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Retrieve the email information from /contacts/kevin.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/kevin", "info_type": "email"}}, "unique_idx": "get_contact_info-11060", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "I want the phone number for the contact at /data/steve.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/data/steve", "info_type": "phone"}}, "unique_idx": "get_contact_info-11061", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Please get the contact summary for /contacts/mia.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/mia"}}, "unique_idx": "get_contact_info-11062", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Can you obtain the address for the contact at /contacts/chris?", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/chris", "info_type": "address"}}, "unique_idx": "get_contact_info-11063", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "I desire to see the email address linked to the contact at /user/julia.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/user/julia", "info_type": "email"}}, "unique_idx": "get_contact_info-11064", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Acquire the phone info from the record located at /info/mark.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/info/mark", "info_type": "phone"}}, "unique_idx": "get_contact_info-11065", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Please look up the address of the contact found at /directory/annie.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/directory/annie", "info_type": "address"}}, "unique_idx": "get_contact_info-11066", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "I need to check the email contact info for /contacts/peter_email.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/peter_email", "info_type": "email"}}, "unique_idx": "get_contact_info-11067", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Show me a summary of the contact information for /profile/quentin.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/profile/quentin"}}, "unique_idx": "get_contact_info-11068", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Provide the phone number for the contact at /data/rachel.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/data/rachel", "info_type": "phone"}}, "unique_idx": "get_contact_info-11069", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Please fetch the email details from the contact at /user/input/samuel_email.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/user/input/samuel_email", "info_type": "email"}}, "unique_idx": "get_contact_info-11070", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "I am looking for address information for the contact at /contacts/tina_address.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/tina_address", "info_type": "address"}}, "unique_idx": "get_contact_info-11071", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Please provide a summary of the contact details for /contacts/ursula.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/ursula"}}, "unique_idx": "get_contact_info-11072", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Could you retrieve the phone number for the contact at /contacts/victor?", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/victor", "info_type": "phone"}}, "unique_idx": "get_contact_info-11073", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "I require the email information from the contact URI /user/walter.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/user/walter", "info_type": "email"}}, "unique_idx": "get_contact_info-11074", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Get me the address details for the contact at /contacts/xavier.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/xavier", "info_type": "address"}}, "unique_idx": "get_contact_info-11075", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "What is the complete summary for the contact at /contacts/yolanda?", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/yolanda"}}, "unique_idx": "get_contact_info-11076", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Please obtain the phone details from /contacts/zach.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/zach", "info_type": "phone"}}, "unique_idx": "get_contact_info-11077", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "I need the email information for the contact at /contacts/amber.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/amber", "info_type": "email"}}, "unique_idx": "get_contact_info-11078", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Show me the address of the contact registered as /contacts/brian_address.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/brian_address", "info_type": "address"}}, "unique_idx": "get_contact_info-11079", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Can you retrieve complete contact info for /directory/carmen?", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/directory/carmen"}}, "unique_idx": "get_contact_info-11080", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "I want the phone info from the record at /contacts/derek.", "answer": {"plan": "get_contact_info", "arguments": {"contact_uri": "/contacts/derek", "info_type": "phone"}}, "unique_idx": "get_contact_info-11081", "tools": [{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"]}]}
{"query": "Can you fetch the phone number using the URI 'contact://phone/456'?", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://phone/456"}}, "unique_idx": "get_contact_info_from_uri-11082"}
{"query": "I need the contact data from this content URI: contact://email/789. Can you help?", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://email/789"}}, "unique_idx": "get_contact_info_from_uri-11083"}
{"query": "Get the contact information available at the URI contact://fax/001.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://fax/001"}}, "unique_idx": "get_contact_info_from_uri-11084"}
{"query": "Please check out this content URI and return the data: contact://email/test@samsung.com.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://email/test@samsung.com"}}, "unique_idx": "get_contact_info_from_uri-11085"}
{"query": "I have this URI: contact://phone/321. Retrieve the phone number for me.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://phone/321"}}, "unique_idx": "get_contact_info_from_uri-11086"}
{"query": "Fetch the contact information from the following URI: 'contact://social/twitter/@user'.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://social/twitter/@user"}}, "unique_idx": "get_contact_info_from_uri-11087"}
{"query": "Could you look up the contact number using this URI: contact://phone/9876543210?", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://phone/9876543210"}}, "unique_idx": "get_contact_info_from_uri-11088"}
{"query": "Could you fetch the details using content URI 'contact://details/alpha'?", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://details/alpha"}}, "unique_idx": "get_contact_info_from_uri-11089"}
{"query": "Show me the contact data present at contact://email/jane.doe@example.com.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://email/jane.doe@example.com"}}, "unique_idx": "get_contact_info_from_uri-11090"}
{"query": "Retrieve the contact information from the resource at 'contact://linkedin/in-john'.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://linkedin/in-john"}}, "unique_idx": "get_contact_info_from_uri-11091"}
{"query": "Please get the info linked to this URI: 'contact://info/phone_number'.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://info/phone_number"}}, "unique_idx": "get_contact_info_from_uri-11092"}
{"query": "Using the given URI contact://office/extension-155, retrieve the contact extension number.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://office/extension-155"}}, "unique_idx": "get_contact_info_from_uri-11093"}
{"query": "I want to see the email info from URI contact://contact/email/support@samsung.com. Can you do that?", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://contact/email/support@samsung.com"}}, "unique_idx": "get_contact_info_from_uri-11094"}
{"query": "Extract the phone data from the set content URI: contact://phone/1122334455.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://phone/1122334455"}}, "unique_idx": "get_contact_info_from_uri-11095"}
{"query": "Help me pull contact information from: contact://misc/anyinfo. I'm curious!", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://misc/anyinfo"}}, "unique_idx": "get_contact_info_from_uri-11096"}
{"query": "Retrieve the fax number from the URI contact://fax/001.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://fax/001"}}, "unique_idx": "get_contact_info_from_uri-11097", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Obtain phone data available at contact://phone/1122334455.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://phone/1122334455"}}, "unique_idx": "get_contact_info_from_uri-11098", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Can you extract email contact details found at contact://email/john.doe@example.com?", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://email/john.doe@example.com"}}, "unique_idx": "get_contact_info_from_uri-11099", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Please fetch contact details using URI contact://info/office.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://info/office"}}, "unique_idx": "get_contact_info_from_uri-11100", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Show me the social media info at contact://social/facebook/@jane.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://social/facebook/@jane"}}, "unique_idx": "get_contact_info_from_uri-11101", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "I'd like to see the SMS number from contact://sms/5551234567.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://sms/5551234567"}}, "unique_idx": "get_contact_info_from_uri-11102", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Fetch the WhatsApp contact info at contact://whatsapp/9876543210.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://whatsapp/9876543210"}}, "unique_idx": "get_contact_info_from_uri-11103", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Kindly retrieve details from this URI: contact://work/email/employee@company.com.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://work/email/employee@company.com"}}, "unique_idx": "get_contact_info_from_uri-11104", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Can you get the personal phone number from contact://personal/phone/+1234567890?", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://personal/phone/+1234567890"}}, "unique_idx": "get_contact_info_from_uri-11105", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Extract contact information from URI 'contact://details/mia'.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://details/mia"}}, "unique_idx": "get_contact_info_from_uri-11106", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "I need the information linked with contact://chat/telegram/@user123.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://chat/telegram/@user123"}}, "unique_idx": "get_contact_info_from_uri-11107", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Please get the data from contact://contact/email/support@samsung.com.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://contact/email/support@samsung.com"}}, "unique_idx": "get_contact_info_from_uri-11108", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Retrieve the business fax details using URI contact://biz/fax/444.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://biz/fax/444"}}, "unique_idx": "get_contact_info_from_uri-11109", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Show me the LinkedIn info at contact://social/linkedin/john-doe.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://social/linkedin/john-doe"}}, "unique_idx": "get_contact_info_from_uri-11110", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Could I have the phone number stored at contact://tel/0011223344?", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://tel/0011223344"}}, "unique_idx": "get_contact_info_from_uri-11111", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Fetch the contact data from contact://mobile/9988776655.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://mobile/9988776655"}}, "unique_idx": "get_contact_info_from_uri-11112", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Please pull the email associated with URI contact://email/info@example.org.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://email/info@example.org"}}, "unique_idx": "get_contact_info_from_uri-11113", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Extract details from content URI contact://contact/line/@alice.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://contact/line/@alice"}}, "unique_idx": "get_contact_info_from_uri-11114", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Could you get the social profile linked at contact://social/instagram/@sarah_insta?", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://social/instagram/@sarah_insta"}}, "unique_idx": "get_contact_info_from_uri-11115", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "I require the phone info from contact://phone/office/321.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://phone/office/321"}}, "unique_idx": "get_contact_info_from_uri-11116", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Please check the contact record at contact://record/phone/+441234567890.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://record/phone/+441234567890"}}, "unique_idx": "get_contact_info_from_uri-11117", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Retrieve additional info from contact://info/emergency.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://info/emergency"}}, "unique_idx": "get_contact_info_from_uri-11118", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Obtain the fax contact via contact://fax/007.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://fax/007"}}, "unique_idx": "get_contact_info_from_uri-11119", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Could you provide contact details from URI contact://email/support@helpdesk.com?", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://email/support@helpdesk.com"}}, "unique_idx": "get_contact_info_from_uri-11120", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Show me the work mobile number at contact://work/mobile/112233.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://work/mobile/112233"}}, "unique_idx": "get_contact_info_from_uri-11121", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Fetch data from contact URI contact://data/extension_101.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://data/extension_101"}}, "unique_idx": "get_contact_info_from_uri-11122", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Kindly extract the info pointed by contact://info/employee.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://info/employee"}}, "unique_idx": "get_contact_info_from_uri-11123", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Retrieve the contact details using URI contact://contact/phone/+1987654321.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://contact/phone/+1987654321"}}, "unique_idx": "get_contact_info_from_uri-11124", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Get the social media account from contact://social/twitter/@tech_guru.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://social/twitter/@tech_guru"}}, "unique_idx": "get_contact_info_from_uri-11125", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Can you show the phone details referenced at contact://phone/home/555?", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://phone/home/555"}}, "unique_idx": "get_contact_info_from_uri-11126", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Please fetch the SMS details available at contact://sms/123456.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://sms/123456"}}, "unique_idx": "get_contact_info_from_uri-11127", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Retrieve the electronic mail info from contact://email/seth@domain.com.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://email/seth@domain.com"}}, "unique_idx": "get_contact_info_from_uri-11128", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Extract the contact number from the URI contact://numbers/3210.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://numbers/3210"}}, "unique_idx": "get_contact_info_from_uri-11129", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Kindly get the contact specification via contact://contact/info/jkl.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://contact/info/jkl"}}, "unique_idx": "get_contact_info_from_uri-11130", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Could you please retrieve the information detailed in contact://details/quincy?", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://details/quincy"}}, "unique_idx": "get_contact_info_from_uri-11131", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Fetch the email address stored at contact://mail/jane.smith@workmail.com.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://mail/jane.smith@workmail.com"}}, "unique_idx": "get_contact_info_from_uri-11132", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Please extract the contact details via content URI 'contact://customer_service/800'.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://customer_service/800"}}, "unique_idx": "get_contact_info_from_uri-11133", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "I need to review the phone data from contact://phone/cell/999888.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://phone/cell/999888"}}, "unique_idx": "get_contact_info_from_uri-11134", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Get contact data from the provided URI: contact://info/supplier.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://info/supplier"}}, "unique_idx": "get_contact_info_from_uri-11135", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Kindly pull the communication details from URI contact://comm/email/ceo@company.com.", "answer": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "contact://comm/email/ceo@company.com"}}, "unique_idx": "get_contact_info_from_uri-11136", "tools": [{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"]}]}
{"query": "Could you open my phone's settings?", "answer": {"plan": "open_settings", "arguments": {"setting_type": "general"}}, "unique_idx": "open_settings-11137"}
{"query": "I need access to my wireless network settings. Please open the wireless settings screen.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "wireless"}}, "unique_idx": "open_settings-11138"}
{"query": "Switch on airplane mode settings on my device.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "airplane_mode"}}, "unique_idx": "open_settings-11139"}
{"query": "Display the Wi-Fi settings so I can manage my connection.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "wifi"}}, "unique_idx": "open_settings-11140"}
{"query": "I want to update my mobile data settings, could you open the APN settings?", "answer": {"plan": "open_settings", "arguments": {"setting_type": "apn"}}, "unique_idx": "open_settings-11141"}
{"query": "Please open the Bluetooth settings so I can pair my new headphones.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "bluetooth"}}, "unique_idx": "open_settings-11142"}
{"query": "I need to adjust the clock on my device. Open the date and time settings, please.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "date"}}, "unique_idx": "open_settings-11143"}
{"query": "Can you take me to the input method settings? I need to change my keyboard layout.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "input_method"}}, "unique_idx": "open_settings-11144"}
{"query": "Show me the display settings so I can calibrate my screen brightness.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "display"}}, "unique_idx": "open_settings-11145"}
{"query": "I want to review my device's safety features; please open the security settings.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "security"}}, "unique_idx": "open_settings-11146"}
{"query": "Could you help me find the location settings on my phone?", "answer": {"plan": "open_settings", "arguments": {"setting_type": "location"}}, "unique_idx": "open_settings-11147"}
{"query": "Access the internal storage settings for my device, please.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "internal_storage"}}, "unique_idx": "open_settings-11148"}
{"query": "I'm having trouble with my SD card. Open the memory card settings for me.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "memory_card"}}, "unique_idx": "open_settings-11149"}
{"query": "I would like to change my language preferences. Could you open the language & input settings?", "answer": {"plan": "open_settings", "arguments": {"setting_type": "locale"}}, "unique_idx": "open_settings-11150"}
{"query": "Access general system settings for configuration purposes.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "general"}}, "unique_idx": "open_settings-11151"}
{"query": "Could you please take me to the general settings page?", "answer": {"plan": "open_settings", "arguments": {"setting_type": "general"}}, "unique_idx": "open_settings-11152", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Hey, open up the network settings for me. I'm trying to adjust my wireless preferences.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "wireless"}}, "unique_idx": "open_settings-11153", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I need to activate my airplane mode. Open the airplane mode settings.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "airplane_mode"}}, "unique_idx": "open_settings-11154", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Show me my Wi-Fi settings to check my connection status.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "wifi"}}, "unique_idx": "open_settings-11155", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I am experiencing issues with my internet connection. Can you open the APN settings?", "answer": {"plan": "open_settings", "arguments": {"setting_type": "apn"}}, "unique_idx": "open_settings-11156", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I want to connect a new pair of headphones. Please open the Bluetooth configuration.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "bluetooth"}}, "unique_idx": "open_settings-11157", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Could you open my phone's date & time settings? I need to adjust my timezone.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "date"}}, "unique_idx": "open_settings-11158", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I'm considering installing a new keyboard app, show me the input method configuration options.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "input_method"}}, "unique_idx": "open_settings-11159", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I want to change my display settings because the brightness is too harsh.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "display"}}, "unique_idx": "open_settings-11160", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Please open the security options so I can update my lock screen settings.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "security"}}, "unique_idx": "open_settings-11161", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Can you take me to the location settings page? I need to update my GPS preferences.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "location"}}, "unique_idx": "open_settings-11162", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I want to review the internal storage details; please open the corresponding settings screen.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "internal_storage"}}, "unique_idx": "open_settings-11163", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Show me the memory card settings page as I have a new microSD card inserted.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "memory_card"}}, "unique_idx": "open_settings-11164", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I’m having trouble with my email sync over wireless; open the wireless settings section.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "wireless"}}, "unique_idx": "open_settings-11165", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I'd like to see my general settings so I can tweak a few things.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "general"}}, "unique_idx": "open_settings-11166", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I need to check on my airplane mode options. Kindly open the page for me.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "airplane_mode"}}, "unique_idx": "open_settings-11167", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Open Wi-Fi settings now, please!", "answer": {"plan": "open_settings", "arguments": {"setting_type": "wifi"}}, "unique_idx": "open_settings-11168", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I want to update APN details. Could you direct me to the APN settings?", "answer": {"plan": "open_settings", "arguments": {"setting_type": "apn"}}, "unique_idx": "open_settings-11169", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Help me configure Bluetooth connections by opening the appropriate settings.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "bluetooth"}}, "unique_idx": "open_settings-11170", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Access the date and time settings so I can adjust my clock.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "date"}}, "unique_idx": "open_settings-11171", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Activate the input method settings; I need to add a new language input.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "input_method"}}, "unique_idx": "open_settings-11172", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Navigate to the display configuration page for screen adjustments.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "display"}}, "unique_idx": "open_settings-11173", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Show security settings. I want to improve my phone's protection.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "security"}}, "unique_idx": "open_settings-11174", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Look up the location settings for me because my GPS isn't working properly.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "location"}}, "unique_idx": "open_settings-11175", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Open the settings for internal storage so I can check available space.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "internal_storage"}}, "unique_idx": "open_settings-11176", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I need to manage my SD card storage. Please show the memory card settings.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "memory_card"}}, "unique_idx": "open_settings-11177", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Let's go to the general settings section for a quick look at my device options.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "general"}}, "unique_idx": "open_settings-11178", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Access the wireless and network options; my connection seems unstable.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "wireless"}}, "unique_idx": "open_settings-11179", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I require the airplane mode configuration panel—kindly open that setting.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "airplane_mode"}}, "unique_idx": "open_settings-11180", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Could you lead me to the Wi-Fi management settings?", "answer": {"plan": "open_settings", "arguments": {"setting_type": "wifi"}}, "unique_idx": "open_settings-11181", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I need to tweak the APN settings for data connection adjustments.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "apn"}}, "unique_idx": "open_settings-11182", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Show the Bluetooth panel because I'd like to set up my new device connection.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "bluetooth"}}, "unique_idx": "open_settings-11183", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I wish to modify the date and time on my phone. Open date settings now!", "answer": {"plan": "open_settings", "arguments": {"setting_type": "date"}}, "unique_idx": "open_settings-11184", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I want to change my typing preferences. Navigate to the input method settings screen.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "input_method"}}, "unique_idx": "open_settings-11185", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Please display the brightness and contrast options by opening the display settings.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "display"}}, "unique_idx": "open_settings-11186", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "For enhancing my phone security, show me the security settings panel.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "security"}}, "unique_idx": "open_settings-11187", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I need to calibrate my GPS. Get me to the location settings immediately.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "location"}}, "unique_idx": "open_settings-11188", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I want to see my device's storage usage details; please open the internal storage settings.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "internal_storage"}}, "unique_idx": "open_settings-11189", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "I got a new SD card; kindly open the settings for memory card management.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "memory_card"}}, "unique_idx": "open_settings-11190", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Can you help me adjust some settings? I just need to access my general device settings.", "answer": {"plan": "open_settings", "arguments": {"setting_type": "general"}}, "unique_idx": "open_settings-11191", "tools": [{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"]}]}
{"query": "Locate 1600 Amphitheatre Parkway, Mountain View, CA.", "answer": {"plan": "search_location", "arguments": {"query": "1600 Amphitheatre Parkway, Mountain View, CA"}}, "unique_idx": "search_location-11192"}
{"query": "Find the Eiffel Tower's location for me.", "answer": {"plan": "search_location", "arguments": {"query": "Eiffel Tower"}}, "unique_idx": "search_location-11193"}
{"query": "Could you search for the address of the Statue of Liberty?", "answer": {"plan": "search_location", "arguments": {"query": "Statue of Liberty"}}, "unique_idx": "search_location-11194"}
{"query": "I need the location details of 10 Downing Street.", "answer": {"plan": "search_location", "arguments": {"query": "10 Downing Street"}}, "unique_idx": "search_location-11195"}
{"query": "Show me where Central Park is on the map.", "answer": {"plan": "search_location", "arguments": {"query": "Central Park"}}, "unique_idx": "search_location-11196"}
{"query": "Search for the Sydney Opera House.", "answer": {"plan": "search_location", "arguments": {"query": "Sydney Opera House"}}, "unique_idx": "search_location-11197"}
{"query": "Can you locate 221B Baker Street for me?", "answer": {"plan": "search_location", "arguments": {"query": "221B Baker Street"}}, "unique_idx": "search_location-11198"}
{"query": "Please search for 'Times Square, New York' on the map.", "answer": {"plan": "search_location", "arguments": {"query": "Times Square, New York"}}, "unique_idx": "search_location-11199"}
{"query": "Locate Buckingham Palace for me.", "answer": {"plan": "search_location", "arguments": {"query": "Buckingham Palace"}}, "unique_idx": "search_location-11200"}
{"query": "Search the address of Plaza Mayor in Madrid.", "answer": {"plan": "search_location", "arguments": {"query": "Plaza Mayor, Madrid"}}, "unique_idx": "search_location-11201"}
{"query": "Find the location for the Golden Gate Bridge.", "answer": {"plan": "search_location", "arguments": {"query": "Golden Gate Bridge"}}, "unique_idx": "search_location-11202"}
{"query": "Can you pull up the Colosseum in Rome?", "answer": {"plan": "search_location", "arguments": {"query": "Colosseum, Rome"}}, "unique_idx": "search_location-11203"}
{"query": "I'm trying to find Champs-Élysées in Paris. Please locate it.", "answer": {"plan": "search_location", "arguments": {"query": "Champs-Élysées, Paris"}}, "unique_idx": "search_location-11204"}
{"query": "Search for the position of 1600 Pennsylvania Ave in Washington, DC.", "answer": {"plan": "search_location", "arguments": {"query": "1600 Pennsylvania Ave, Washington, DC"}}, "unique_idx": "search_location-11205"}
{"query": "Could you find the map location for Central Station in Berlin?", "answer": {"plan": "search_location", "arguments": {"query": "Central Station, Berlin"}}, "unique_idx": "search_location-11206"}
{"query": "Could you help me locate the Louvre Museum in Paris?", "answer": {"plan": "search_location", "arguments": {"query": "Louvre Museum, Paris"}}, "unique_idx": "search_location-11207", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I'm looking for the address of the Taj Mahal in India.", "answer": {"plan": "search_location", "arguments": {"query": "Taj Mahal, Agra, India"}}, "unique_idx": "search_location-11208", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Locate 221B Baker Street in London for me.", "answer": {"plan": "search_location", "arguments": {"query": "221B Baker Street, London"}}, "unique_idx": "search_location-11209", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Show me the location of the Space Needle in Seattle.", "answer": {"plan": "search_location", "arguments": {"query": "Space Needle, Seattle"}}, "unique_idx": "search_location-11210", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I need the location of the Kremlin in Moscow.", "answer": {"plan": "search_location", "arguments": {"query": "Kremlin, Moscow"}}, "unique_idx": "search_location-11211", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Search for the Roman Colosseum.", "answer": {"plan": "search_location", "arguments": {"query": "Colosseum, Rome"}}, "unique_idx": "search_location-11212", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Could you navigate me to the Golden Gate Bridge?", "answer": {"plan": "search_location", "arguments": {"query": "Golden Gate Bridge, San Francisco"}}, "unique_idx": "search_location-11213", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Please find Mehrangarh Fort in Jodhpur.", "answer": {"plan": "search_location", "arguments": {"query": "Mehrangarh Fort, Jodhpur"}}, "unique_idx": "search_location-11214", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I want to see the Blue Mosque in Istanbul.", "answer": {"plan": "search_location", "arguments": {"query": "Blue Mosque, Istanbul"}}, "unique_idx": "search_location-11215", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Can you look up Buckingham Palace location?", "answer": {"plan": "search_location", "arguments": {"query": "Buckingham Palace"}}, "unique_idx": "search_location-11216", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Find the Sydney Harbour Bridge on the map.", "answer": {"plan": "search_location", "arguments": {"query": "Sydney Harbour Bridge, Sydney"}}, "unique_idx": "search_location-11217", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I need directions to the Mall of America.", "answer": {"plan": "search_location", "arguments": {"query": "Mall of America, Bloomington, MN"}}, "unique_idx": "search_location-11218", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Locate Himeji Castle in Japan, please.", "answer": {"plan": "search_location", "arguments": {"query": "Himeji Castle, Himeji, Japan"}}, "unique_idx": "search_location-11219", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Search for the Madrid Royal Palace.", "answer": {"plan": "search_location", "arguments": {"query": "Madrid Royal Palace, Spain"}}, "unique_idx": "search_location-11220", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I want to know the coordinates for the Acropolis in Athens.", "answer": {"plan": "search_location", "arguments": {"query": "Acropolis, Athens, Greece"}}, "unique_idx": "search_location-11221", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Discover the Forbidden City location in Beijing.", "answer": {"plan": "search_location", "arguments": {"query": "Forbidden City, Beijing, China"}}, "unique_idx": "search_location-11222", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Can you search for the Alps?", "answer": {"plan": "search_location", "arguments": {"query": "Alps, Europe"}}, "unique_idx": "search_location-11223", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Where can I find Niagara Falls?", "answer": {"plan": "search_location", "arguments": {"query": "Niagara Falls"}}, "unique_idx": "search_location-11224", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Locate the Burj Khalifa in Dubai.", "answer": {"plan": "search_location", "arguments": {"query": "Burj Khalifa, Dubai"}}, "unique_idx": "search_location-11225", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Direct me to the CN Tower in Toronto, please.", "answer": {"plan": "search_location", "arguments": {"query": "CN Tower, Toronto"}}, "unique_idx": "search_location-11226", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Can you search for the Parliament Buildings in Ottawa?", "answer": {"plan": "search_location", "arguments": {"query": "Parliament Buildings, Ottawa"}}, "unique_idx": "search_location-11227", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I would like to see Red Square in Moscow.", "answer": {"plan": "search_location", "arguments": {"query": "Red Square, Moscow"}}, "unique_idx": "search_location-11228", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Show me the location of Sydney Tower.", "answer": {"plan": "search_location", "arguments": {"query": "Sydney Tower, Sydney"}}, "unique_idx": "search_location-11229", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Pin Times Square on the map in New York.", "answer": {"plan": "search_location", "arguments": {"query": "Times Square, New York"}}, "unique_idx": "search_location-11230", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Help me locate the Louvre in Paris.", "answer": {"plan": "search_location", "arguments": {"query": "Louvre Museum, Paris"}}, "unique_idx": "search_location-11231", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Could you check the placement of the Great Wall of China?", "answer": {"plan": "search_location", "arguments": {"query": "Great Wall of China, Beijing"}}, "unique_idx": "search_location-11232", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Please search for the Palace of Versailles.", "answer": {"plan": "search_location", "arguments": {"query": "Palace of Versailles, France"}}, "unique_idx": "search_location-11233", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I'm interested in finding where the Statue of David is located in Florence.", "answer": {"plan": "search_location", "arguments": {"query": "Statue of David, Florence"}}, "unique_idx": "search_location-11234", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Find me the address for the Pyramids of Giza.", "answer": {"plan": "search_location", "arguments": {"query": "Pyramids of Giza, Egypt"}}, "unique_idx": "search_location-11235", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Locate the Lisbon Cathedral, please.", "answer": {"plan": "search_location", "arguments": {"query": "Lisbon Cathedral, Lisbon"}}, "unique_idx": "search_location-11236", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I need directions to the Sagrada Família in Barcelona.", "answer": {"plan": "search_location", "arguments": {"query": "Sagrada Família, Barcelona"}}, "unique_idx": "search_location-11237", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Could you track down the Anne Frank House in Amsterdam for me?", "answer": {"plan": "search_location", "arguments": {"query": "Anne Frank House, Amsterdam"}}, "unique_idx": "search_location-11238", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Please locate Chichen Itza near Yucatan.", "answer": {"plan": "search_location", "arguments": {"query": "Chichen Itza, Yucatan, Mexico"}}, "unique_idx": "search_location-11239", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Find the address for the Arc de Triomphe in Paris.", "answer": {"plan": "search_location", "arguments": {"query": "Arc de Triomphe, Paris"}}, "unique_idx": "search_location-11240", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Show me the location of Mount Everest Base Camp in Nepal.", "answer": {"plan": "search_location", "arguments": {"query": "Mount Everest Base Camp, Nepal"}}, "unique_idx": "search_location-11241", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Locate Iguazu Falls in South America.", "answer": {"plan": "search_location", "arguments": {"query": "Iguazu Falls"}}, "unique_idx": "search_location-11242", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I need to find Victoria Falls. Can you help?", "answer": {"plan": "search_location", "arguments": {"query": "Victoria Falls"}}, "unique_idx": "search_location-11243", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Help me locate a viewpoint at the Grand Canyon.", "answer": {"plan": "search_location", "arguments": {"query": "Grand Canyon, Arizona"}}, "unique_idx": "search_location-11244", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Find the map location of Red Rocks Amphitheatre near Denver.", "answer": {"plan": "search_location", "arguments": {"query": "Red Rocks Amphitheatre, Morrison, CO"}}, "unique_idx": "search_location-11245", "tools": [{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Please send an email to alice@example.com with the subject 'Meeting Reminder' and the message body 'Don't forget our meeting at 3 PM.'", "answer": {"plan": "send_email", "arguments": {"to": "alice@example.com", "subject": "Meeting Reminder", "body": "Don't forget our meeting at 3 PM."}}, "unique_idx": "send_email-11246"}
{"query": "Send an email to bob@example.com.", "answer": {"plan": "send_email", "arguments": {"to": "bob@example.com"}}, "unique_idx": "send_email-11247"}
{"query": "Could you send an email to charlie@work.org and attach the file located at file:///path/to/document.pdf?", "answer": {"plan": "send_email", "arguments": {"to": "charlie@work.org", "attachments": ["file:///path/to/document.pdf"]}}, "unique_idx": "send_email-11248"}
{"query": "I need you to email dana@example.net. Please use the subject 'Greetings' and include 'Hello, how are you?' as the email body.", "answer": {"plan": "send_email", "arguments": {"to": "dana@example.net", "subject": "Greetings", "body": "Hello, how are you?"}}, "unique_idx": "send_email-11249"}
{"query": "Email eric@example.com a quick note that says, 'Lunch at noon?'", "answer": {"plan": "send_email", "arguments": {"to": "eric@example.com", "body": "Lunch at noon?"}}, "unique_idx": "send_email-11250"}
{"query": "Could you launch an email to frank@example.com with the subject 'Party' and attach both file:///files/invite.docx and file:///files/venue.jpg?", "answer": {"plan": "send_email", "arguments": {"to": "frank@example.com", "subject": "Party", "attachments": ["file:///files/invite.docx", "file:///files/venue.jpg"]}}, "unique_idx": "send_email-11251"}
{"query": "Please start an email addressed to gina@example.org.", "answer": {"plan": "send_email", "arguments": {"to": "gina@example.org"}}, "unique_idx": "send_email-11252"}
{"query": "Write an email to hunter@example.com regarding the project update with the text 'The project is on track and completed milestones are 5/6.'", "answer": {"plan": "send_email", "arguments": {"to": "hunter@example.com", "body": "The project is on track and completed milestones are 5/6."}}, "unique_idx": "send_email-11253"}
{"query": "Compose an email to iris@example.com with the subject 'Important Announcement' and the body 'Please check your inbox for details'.", "answer": {"plan": "send_email", "arguments": {"to": "iris@example.com", "subject": "Important Announcement", "body": "Please check your inbox for details"}}, "unique_idx": "send_email-11254"}
{"query": "Send an email to jackie@example.com and attach the file located at file:///docs/report.pdf.", "answer": {"plan": "send_email", "arguments": {"to": "jackie@example.com", "attachments": ["file:///docs/report.pdf"]}}, "unique_idx": "send_email-11255"}
{"query": "Draft an email for karen@example.io with the subject 'Monthly Report' and a note that says 'Attached is the report for this month', also include the attachment file:///docs/monthly_report.pdf.", "answer": {"plan": "send_email", "arguments": {"to": "karen@example.io", "subject": "Monthly Report", "body": "Attached is the report for this month", "attachments": ["file:///docs/monthly_report.pdf"]}}, "unique_idx": "send_email-11256"}
{"query": "Dispatch an email to leo@example.com without any subject or content.", "answer": {"plan": "send_email", "arguments": {"to": "leo@example.com"}}, "unique_idx": "send_email-11257"}
{"query": "Can you set up an email to mia@example.com that contains a brief note saying 'See attached findings' and includes an attachment at file:///analysis/results.csv?", "answer": {"plan": "send_email", "arguments": {"to": "mia@example.com", "body": "See attached findings", "attachments": ["file:///analysis/results.csv"]}}, "unique_idx": "send_email-11258"}
{"query": "Initiate an email conversation with nathan@example.org, using the subject 'Follow Up' and adding the message 'Let's discuss further details soon.'", "answer": {"plan": "send_email", "arguments": {"to": "nathan@example.org", "subject": "Follow Up", "body": "Let's discuss further details soon."}}, "unique_idx": "send_email-11259"}
{"query": "Please email oliver@example.net and attach the files file:///images/photo.png and file:///docs/summary.doc so that he can review the report.", "answer": {"plan": "send_email", "arguments": {"to": "oliver@example.net", "attachments": ["file:///images/photo.png", "file:///docs/summary.doc"]}}, "unique_idx": "send_email-11260"}
{"query": "Please email brian@example.com with the subject 'Meeting update'.", "answer": {"plan": "send_email", "arguments": {"to": "brian@example.com", "subject": "Meeting update"}}, "unique_idx": "send_email-11261", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Dispatch an email to carol@example.org with the subject 'Reminder' and the body 'Don't forget to attend the meeting'.", "answer": {"plan": "send_email", "arguments": {"to": "carol@example.org", "subject": "Reminder", "body": "Don't forget to attend the meeting"}}, "unique_idx": "send_email-11262", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Email david@example.com saying 'I'll be late for today's meeting'.", "answer": {"plan": "send_email", "arguments": {"to": "david@example.com", "body": "I'll be late for today's meeting"}}, "unique_idx": "send_email-11263", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Send an email to eva@example.net attaching the file located at file:///files/agenda.pdf.", "answer": {"plan": "send_email", "arguments": {"to": "eva@example.net", "attachments": ["file:///files/agenda.pdf"]}}, "unique_idx": "send_email-11264", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Email frank@example.com with subject 'Invoice' and attach file:///invoices/invoice123.pdf.", "answer": {"plan": "send_email", "arguments": {"to": "frank@example.com", "subject": "Invoice", "attachments": ["file:///invoices/invoice123.pdf"]}}, "unique_idx": "send_email-11265", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Compose a message for grace@example.com that states 'Check out the attached image' and attach file:///images/diagram.png.", "answer": {"plan": "send_email", "arguments": {"to": "grace@example.com", "body": "Check out the attached image", "attachments": ["file:///images/diagram.png"]}}, "unique_idx": "send_email-11266", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Email helen@example.org with the subject 'Project Update', body 'The project is coming along', and attach file:///docs/update.docx.", "answer": {"plan": "send_email", "arguments": {"to": "helen@example.org", "subject": "Project Update", "body": "The project is coming along", "attachments": ["file:///docs/update.docx"]}}, "unique_idx": "send_email-11267", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Draft an email to ian@example.com attaching both file:///files/file1.txt and file:///files/file2.txt.", "answer": {"plan": "send_email", "arguments": {"to": "ian@example.com", "attachments": ["file:///files/file1.txt", "file:///files/file2.txt"]}}, "unique_idx": "send_email-11268", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Could you send an email to jack@example.com with the subject 'Holiday Notice' and message 'Office will be closed next Friday'?", "answer": {"plan": "send_email", "arguments": {"to": "jack@example.com", "subject": "Holiday Notice", "body": "Office will be closed next Friday"}}, "unique_idx": "send_email-11269", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "I want to email kate@example.net with the content 'Please review the attached file' and include the attachment file:///attachments/review.pdf.", "answer": {"plan": "send_email", "arguments": {"to": "kate@example.net", "body": "Please review the attached file", "attachments": ["file:///attachments/review.pdf"]}}, "unique_idx": "send_email-11270", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Write an email to luke@example.org attaching file:///docs/resume.pdf.", "answer": {"plan": "send_email", "arguments": {"to": "luke@example.org", "attachments": ["file:///docs/resume.pdf"]}}, "unique_idx": "send_email-11271", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Send an email to mary@example.com with the title 'Weekly Earnings' and state 'The figures are in.'", "answer": {"plan": "send_email", "arguments": {"to": "mary@example.com", "subject": "Weekly Earnings", "body": "The figures are in."}}, "unique_idx": "send_email-11272", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Mail to nancy@example.net about 'Schedule' with the message 'Meeting at 3pm'.", "answer": {"plan": "send_email", "arguments": {"to": "nancy@example.net", "subject": "Schedule", "body": "Meeting at 3pm"}}, "unique_idx": "send_email-11273", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Please send an email to oliver@example.com letting him know it's urgent.", "answer": {"plan": "send_email", "arguments": {"to": "oliver@example.com", "body": "it's urgent"}}, "unique_idx": "send_email-11274", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Create an email to pam@example.org with the subject 'Follow-up', the body 'Please check the attached report', and attach file:///reports/followup.report.", "answer": {"plan": "send_email", "arguments": {"to": "pam@example.org", "subject": "Follow-up", "body": "Please check the attached report", "attachments": ["file:///reports/followup.report"]}}, "unique_idx": "send_email-11275", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Send an email to quincy@example.com to inform 'Lunch meeting is rescheduled'.", "answer": {"plan": "send_email", "arguments": {"to": "quincy@example.com", "body": "Lunch meeting is rescheduled"}}, "unique_idx": "send_email-11276", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Contact rachel@example.com via email with the subject 'Invitation' and include the text 'You're invited to my birthday party'.", "answer": {"plan": "send_email", "arguments": {"to": "rachel@example.com", "subject": "Invitation", "body": "You're invited to my birthday party"}}, "unique_idx": "send_email-11277", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Draft an email to steve@example.com with the message 'Can we meet tomorrow?'.", "answer": {"plan": "send_email", "arguments": {"to": "steve@example.com", "body": "Can we meet tomorrow?"}}, "unique_idx": "send_email-11278", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Email timothy@example.org including the attachment file:///docs/contract.pdf.", "answer": {"plan": "send_email", "arguments": {"to": "timothy@example.org", "attachments": ["file:///docs/contract.pdf"]}}, "unique_idx": "send_email-11279", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Fire off an email to ursula@example.net with attachments file:///files/photo1.jpg and file:///files/photo2.jpg.", "answer": {"plan": "send_email", "arguments": {"to": "ursula@example.net", "attachments": ["file:///files/photo1.jpg", "file:///files/photo2.jpg"]}}, "unique_idx": "send_email-11280", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Compose a message for victor@example.com with subject 'FYI', and add 'Please read the attached guidelines' along with attaching file:///guidelines.pdf.", "answer": {"plan": "send_email", "arguments": {"to": "victor@example.com", "subject": "FYI", "body": "Please read the attached guidelines", "attachments": ["file:///guidelines.pdf"]}}, "unique_idx": "send_email-11281", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Send an email to wendy@example.com with the message 'Hi!'.", "answer": {"plan": "send_email", "arguments": {"to": "wendy@example.com", "body": "Hi!"}}, "unique_idx": "send_email-11282", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Draft an email addressed to xavier@example.org without any additional content.", "answer": {"plan": "send_email", "arguments": {"to": "xavier@example.org"}}, "unique_idx": "send_email-11283", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Email yvonne@example.com with a headline 'Notice' and a reminder 'The deadline is approaching'.", "answer": {"plan": "send_email", "arguments": {"to": "yvonne@example.com", "subject": "Notice", "body": "The deadline is approaching"}}, "unique_idx": "send_email-11284", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "I want to send an email to zack@example.com with subject 'Report', body 'See the attached sheet', and attach file:///sheets/report.xlsx.", "answer": {"plan": "send_email", "arguments": {"to": "zack@example.com", "subject": "Report", "body": "See the attached sheet", "attachments": ["file:///sheets/report.xlsx"]}}, "unique_idx": "send_email-11285", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Kindly email alan@example.com with a quick note saying 'Thanks for your time'.", "answer": {"plan": "send_email", "arguments": {"to": "alan@example.com", "body": "Thanks for your time"}}, "unique_idx": "send_email-11286", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Start an email to betty@example.net with the subject 'Re: Meeting'.", "answer": {"plan": "send_email", "arguments": {"to": "betty@example.net", "subject": "Re: Meeting"}}, "unique_idx": "send_email-11287", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Send a quick note to calvin@example.org saying 'Let's catch up soon!'", "answer": {"plan": "send_email", "arguments": {"to": "calvin@example.org", "body": "Let's catch up soon!"}}, "unique_idx": "send_email-11288", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Forward an email to donna@example.com with subject 'Fwd: Important' and message 'Please check this out'.", "answer": {"plan": "send_email", "arguments": {"to": "donna@example.com", "subject": "Fwd: Important", "body": "Please check this out"}}, "unique_idx": "send_email-11289", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Compose an email to elena@example.net with the document attached from file:///docs/instructions.pdf.", "answer": {"plan": "send_email", "arguments": {"to": "elena@example.net", "attachments": ["file:///docs/instructions.pdf"]}}, "unique_idx": "send_email-11290", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Dispatch a message to fred@example.com mentioning 'Congrats on your achievement' with the subject 'Congratulations'.", "answer": {"plan": "send_email", "arguments": {"to": "fred@example.com", "subject": "Congratulations", "body": "Congrats on your achievement"}}, "unique_idx": "send_email-11291", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Email gary@example.org to inform him that 'Your order has been shipped'.", "answer": {"plan": "send_email", "arguments": {"to": "gary@example.org", "body": "Your order has been shipped"}}, "unique_idx": "send_email-11292", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Please send an email to hannah@example.io with the subject 'Reminder' and include a note saying 'Our meeting is scheduled at 2pm'.", "answer": {"plan": "send_email", "arguments": {"to": "hannah@example.io", "subject": "Reminder", "body": "Our meeting is scheduled at 2pm"}}, "unique_idx": "send_email-11293", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "I need an email sent to ian@example.net stating 'Reboot required'.", "answer": {"plan": "send_email", "arguments": {"to": "ian@example.net", "body": "Reboot required"}}, "unique_idx": "send_email-11294", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Send an email to jill@example.org including the attachment file:///pics/sunset.jpg.", "answer": {"plan": "send_email", "arguments": {"to": "jill@example.org", "attachments": ["file:///pics/sunset.jpg"]}}, "unique_idx": "send_email-11295", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Draft an email to kim@example.com with the subject 'Follow Up' and the content 'Waiting for your response'.", "answer": {"plan": "send_email", "arguments": {"to": "kim@example.com", "subject": "Follow Up", "body": "Waiting for your response"}}, "unique_idx": "send_email-11296", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Compose an email to leon@example.net with the message 'Team meeting at 10am'.", "answer": {"plan": "send_email", "arguments": {"to": "leon@example.net", "body": "Team meeting at 10am"}}, "unique_idx": "send_email-11297", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Email monica@example.gov with the subject 'Budget Review' and attach the file file:///reports/budget.pdf.", "answer": {"plan": "send_email", "arguments": {"to": "monica@example.gov", "subject": "Budget Review", "attachments": ["file:///reports/budget.pdf"]}}, "unique_idx": "send_email-11298", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Could you help me send an email to nick@example.com with the subject 'Next Steps' and the body 'Let's discuss our strategy'?", "answer": {"plan": "send_email", "arguments": {"to": "nick@example.com", "subject": "Next Steps", "body": "Let's discuss our strategy"}}, "unique_idx": "send_email-11299", "tools": [{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments": {"to": {"description": "Email address of the recipient.", "type": "str", "required": true}, "subject": {"description": "Subject of the email.", "type": "str", "required": false, "default": ""}, "body": {"description": "Body text of the email.", "type": "str", "required": false, "default": ""}, "attachments": {"description": "List of file URIs to attach to the email.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example": ["Email successfully sent to alice@example.com"]}, "examples": ["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"]}]}
{"query": "Can you send an SMS to +11234567890 saying 'Meeting rescheduled to 3 PM'?", "answer": {"plan": "send_message", "arguments": {"to": "+11234567890", "message": "Meeting rescheduled to 3 PM"}}, "unique_idx": "send_message-11300"}
{"query": "Text Lisa: 'Dinner at my place tonight?'", "answer": {"plan": "send_message", "arguments": {"to": "Lisa", "message": "Dinner at my place tonight?"}}, "unique_idx": "send_message-11301"}
{"query": "Send a quick message to Bob reminding him about the project deadline.", "answer": {"plan": "send_message", "arguments": {"to": "Bob", "message": "reminding him about the project deadline"}}, "unique_idx": "send_message-11302"}
{"query": "Please message my friend Sam with the text 'Happy Birthday!'", "answer": {"plan": "send_message", "arguments": {"to": "Sam", "message": "Happy Birthday!"}}, "unique_idx": "send_message-11303"}
{"query": "I need to send an SMS to +19876543210: please check your schedule for tomorrow's meeting.", "answer": {"plan": "send_message", "arguments": {"to": "+19876543210", "message": "please check your schedule for tomorrow's meeting"}}, "unique_idx": "send_message-11304"}
{"query": "Forward this text to Carol: 'Let's catch up this weekend'.", "answer": {"plan": "send_message", "arguments": {"to": "Carol", "message": "Let's catch up this weekend"}}, "unique_idx": "send_message-11305"}
{"query": "Deliver a note to Mike saying 'Your package has been shipped.'", "answer": {"plan": "send_message", "arguments": {"to": "Mike", "message": "Your package has been shipped."}}, "unique_idx": "send_message-11306"}
{"query": "Could you send an SMS to John that says 'I'll arrive in 10 minutes'?", "answer": {"plan": "send_message", "arguments": {"to": "John", "message": "I'll arrive in 10 minutes"}}, "unique_idx": "send_message-11307"}
{"query": "Hit send on a message to Emily with the content 'Call me when you get this'.", "answer": {"plan": "send_message", "arguments": {"to": "Emily", "message": "Call me when you get this"}}, "unique_idx": "send_message-11308"}
{"query": "Text Mark with a message saying 'Check out these photos' and include the images available at http://example.com/photo1.jpg and http://example.com/photo2.jpg.", "answer": {"plan": "send_message", "arguments": {"to": "Mark", "message": "Check out these photos", "attachments": ["http://example.com/photo1.jpg", "http://example.com/photo2.jpg"]}}, "unique_idx": "send_message-11309"}
{"query": "Dispatch a text to customer support at +13135557890 with the content 'I need help with my order'.", "answer": {"plan": "send_message", "arguments": {"to": "+13135557890", "message": "I need help with my order"}}, "unique_idx": "send_message-11310"}
{"query": "Please send an SMS to Doctor Smith stating 'Your appointment is confirmed for tomorrow.'", "answer": {"plan": "send_message", "arguments": {"to": "Doctor Smith", "message": "Your appointment is confirmed for tomorrow."}}, "unique_idx": "send_message-11311"}
{"query": "Remind Alex via text: 'Don't forget to submit your timesheet.'", "answer": {"plan": "send_message", "arguments": {"to": "Alex", "message": "Don't forget to submit your timesheet."}}, "unique_idx": "send_message-11312"}
{"query": "Send an urgent SMS to 911 saying 'I require emergency assistance'.", "answer": {"plan": "send_message", "arguments": {"to": "911", "message": "I require emergency assistance"}}, "unique_idx": "send_message-11313"}
{"query": "Bombard my colleague with a text that reads 'Meeting canceled - see you at the new time'.", "answer": {"plan": "send_message", "arguments": {"to": "my colleague", "message": "Meeting canceled - see you at the new time"}}, "unique_idx": "send_message-11314"}
{"query": "Send a quick SMS to John saying 'Are you coming to the meeting?'", "answer": {"plan": "send_message", "arguments": {"to": "John", "message": "Are you coming to the meeting?"}}, "unique_idx": "send_message-11315", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Could you text the number +14155552671 with the message 'Please check your email for details'?", "answer": {"plan": "send_message", "arguments": {"to": "+14155552671", "message": "Please check your email for details"}}, "unique_idx": "send_message-11316", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Message Mom: 'Happy birthday! Hope you enjoy the cake!'", "answer": {"plan": "send_message", "arguments": {"to": "Mom", "message": "Happy birthday! Hope you enjoy the cake!"}}, "unique_idx": "send_message-11317", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Dispatch an urgent SMS to 911 with the words 'We have a fire at the warehouse' immediately.", "answer": {"plan": "send_message", "arguments": {"to": "911", "message": "We have a fire at the warehouse"}}, "unique_idx": "send_message-11318", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Wire a note to Emily saying 'Lunch at noon?'", "answer": {"plan": "send_message", "arguments": {"to": "Emily", "message": "Lunch at noon?"}}, "unique_idx": "send_message-11319", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Please send a text to Dr. Smith with the content 'Your appointment is scheduled for next Tuesday'.", "answer": {"plan": "send_message", "arguments": {"to": "Dr. Smith", "message": "Your appointment is scheduled for next Tuesday"}}, "unique_idx": "send_message-11320", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Send a friendly message to Alex stating 'Long time no see!'", "answer": {"plan": "send_message", "arguments": {"to": "Alex", "message": "Long time no see!"}}, "unique_idx": "send_message-11321", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Text the contact Office with 'Meeting postponed to 3 PM'.", "answer": {"plan": "send_message", "arguments": {"to": "Office", "message": "Meeting postponed to 3 PM"}}, "unique_idx": "send_message-11322", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Convey a text message to 13125551234 that says 'The meeting has been canceled'.", "answer": {"plan": "send_message", "arguments": {"to": "13125551234", "message": "The meeting has been canceled"}}, "unique_idx": "send_message-11323", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Text Nicole a brief uplifting note: 'Brighten up your day with a smile'.", "answer": {"plan": "send_message", "arguments": {"to": "Nicole", "message": "Brighten up your day with a smile"}}, "unique_idx": "send_message-11324", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Message Jake: 'Don't forget to bring the documents for review.'", "answer": {"plan": "send_message", "arguments": {"to": "Jake", "message": "Don't forget to bring the documents for review."}}, "unique_idx": "send_message-11325", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Send a note with attachments to Team saying 'Here are the latest graphs', attaching http://example.com/graph1.png and http://example.com/graph2.png.", "answer": {"plan": "send_message", "arguments": {"to": "Team", "message": "Here are the latest graphs", "attachments": ["http://example.com/graph1.png", "http://example.com/graph2.png"]}}, "unique_idx": "send_message-11326", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Forward pictures to Susan with the message 'Check these out' and include the image link http://example.com/img1.jpg.", "answer": {"plan": "send_message", "arguments": {"to": "Susan", "message": "Check these out", "attachments": ["http://example.com/img1.jpg"]}}, "unique_idx": "send_message-11327", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Send a text to Mom that states 'I'll call you later, when I'm free'.", "answer": {"plan": "send_message", "arguments": {"to": "Mom", "message": "I'll call you later, when I'm free"}}, "unique_idx": "send_message-11328", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Text the clinic at +18005550100: 'Confirm my appointment for tomorrow'.", "answer": {"plan": "send_message", "arguments": {"to": "+18005550100", "message": "Confirm my appointment for tomorrow"}}, "unique_idx": "send_message-11329", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Report to the IT department with a message: 'Server is down'.", "answer": {"plan": "send_message", "arguments": {"to": "IT department", "message": "Server is down"}}, "unique_idx": "send_message-11330", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Remind Charlie via SMS with the note 'Don't forget your meeting at 10 AM'.", "answer": {"plan": "send_message", "arguments": {"to": "Charlie", "message": "Don't forget your meeting at 10 AM"}}, "unique_idx": "send_message-11331", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Fire off an urgent message to 911 that reads 'Emergency at Maple Street'.", "answer": {"plan": "send_message", "arguments": {"to": "911", "message": "Emergency at Maple Street"}}, "unique_idx": "send_message-11332", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Get in touch with Grandma by texting 'I miss you and send my love'.", "answer": {"plan": "send_message", "arguments": {"to": "Grandma", "message": "I miss you and send my love"}}, "unique_idx": "send_message-11333", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Send a text to Michelle: 'Please read the attached document', and attach the document using http://docs.example.com/manual.pdf.", "answer": {"plan": "send_message", "arguments": {"to": "Michelle", "message": "Please read the attached document", "attachments": ["http://docs.example.com/manual.pdf"]}}, "unique_idx": "send_message-11334", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Dispatch a message to Dad stating 'I'm arriving late tonight'.", "answer": {"plan": "send_message", "arguments": {"to": "Dad", "message": "I'm arriving late tonight"}}, "unique_idx": "send_message-11335", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Text the marketing team at +12125551234: 'New campaign launch next week'.", "answer": {"plan": "send_message", "arguments": {"to": "+12125551234", "message": "New campaign launch next week"}}, "unique_idx": "send_message-11336", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Send out a chat to HR with the message 'Please submit your timesheets by Friday'.", "answer": {"plan": "send_message", "arguments": {"to": "HR", "message": "Please submit your timesheets by Friday"}}, "unique_idx": "send_message-11337", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Text the number +4445556666 with the message 'Your package has been shipped'.", "answer": {"plan": "send_message", "arguments": {"to": "+4445556666", "message": "Your package has been shipped"}}, "unique_idx": "send_message-11338", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Send a message to Bob stating 'Meeting rescheduled to 2 PM'.", "answer": {"plan": "send_message", "arguments": {"to": "Bob", "message": "Meeting rescheduled to 2 PM"}}, "unique_idx": "send_message-11339", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Transmit a reminder SMS to Lisa: 'Don't forget the finance report due tomorrow!'", "answer": {"plan": "send_message", "arguments": {"to": "Lisa", "message": "Don't forget the finance report due tomorrow!"}}, "unique_idx": "send_message-11340", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Message the ambulance service with 'We have a medical emergency at 456 Elm St'.", "answer": {"plan": "send_message", "arguments": {"to": "ambulance service", "message": "We have a medical emergency at 456 Elm St"}}, "unique_idx": "send_message-11341", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Send a quick SMS to my friend Sarah reading 'Let's meet up for coffee!'", "answer": {"plan": "send_message", "arguments": {"to": "Sarah", "message": "Let's meet up for coffee!"}}, "unique_idx": "send_message-11342", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Text the contact Hotel with 'Reservation confirmed for Friday'.", "answer": {"plan": "send_message", "arguments": {"to": "Hotel", "message": "Reservation confirmed for Friday"}}, "unique_idx": "send_message-11343", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Dispatch a note to Security stating 'Please check the back door'.", "answer": {"plan": "send_message", "arguments": {"to": "Security", "message": "Please check the back door"}}, "unique_idx": "send_message-11344", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Send a text to the police at 100: 'Suspicious activity reported in the neighborhood'.", "answer": {"plan": "send_message", "arguments": {"to": "100", "message": "Suspicious activity reported in the neighborhood"}}, "unique_idx": "send_message-11345", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Text partner Alex with the message 'Don't forget our dinner booking at 8 PM'.", "answer": {"plan": "send_message", "arguments": {"to": "Alex", "message": "Don't forget our dinner booking at 8 PM"}}, "unique_idx": "send_message-11346", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Message Professor Miller saying 'I will be late to class due to a delay'.", "answer": {"plan": "send_message", "arguments": {"to": "Professor Miller", "message": "I will be late to class due to a delay"}}, "unique_idx": "send_message-11347", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Text travel agent at +442012345678: 'Please confirm my flight booking'.", "answer": {"plan": "send_message", "arguments": {"to": "+442012345678", "message": "Please confirm my flight booking"}}, "unique_idx": "send_message-11348", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Send a quick message to Bestie saying 'Can't wait to see you!'", "answer": {"plan": "send_message", "arguments": {"to": "Bestie", "message": "Can't wait to see you!"}}, "unique_idx": "send_message-11349", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Text the courier service, DHL, with: 'Package pickup required tomorrow'.", "answer": {"plan": "send_message", "arguments": {"to": "DHL", "message": "Package pickup required tomorrow"}}, "unique_idx": "send_message-11350", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Send a message to Marketing with attachments. The text should be 'See attached charts for our Q3 performance', and attach http://charts.example.com/chart1.png and http://charts.example.com/chart2.png.", "answer": {"plan": "send_message", "arguments": {"to": "Marketing", "message": "See attached charts for our Q3 performance", "attachments": ["http://charts.example.com/chart1.png", "http://charts.example.com/chart2.png"]}}, "unique_idx": "send_message-11351", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Dispatch a message to 101 with the content 'Help needed urgently at the construction site'.", "answer": {"plan": "send_message", "arguments": {"to": "101", "message": "Help needed urgently at the construction site"}}, "unique_idx": "send_message-11352", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Text my manager: 'Requesting leave for next Monday'.", "answer": {"plan": "send_message", "arguments": {"to": "manager", "message": "Requesting leave for next Monday"}}, "unique_idx": "send_message-11353", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Forward a detailed text to my friend Tom stating 'Remember to bring your hiking gear for the trip on Saturday'.", "answer": {"plan": "send_message", "arguments": {"to": "Tom", "message": "Remember to bring your hiking gear for the trip on Saturday"}}, "unique_idx": "send_message-11354", "tools": [{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"]}]}
{"query": "Could you please initiate a search for the latest smartphone tech news?", "answer": {"plan": "web_search", "arguments": {"query": "latest smartphone tech news"}}, "unique_idx": "web_search-11355"}
{"query": "I'm looking for Python programming tutorials. Can you perform a search for that?", "answer": {"plan": "web_search", "arguments": {"query": "Python programming tutorials"}}, "unique_idx": "web_search-11356"}
{"query": "Please search for \"to be or not to be quotes\" online.", "answer": {"plan": "web_search", "arguments": {"query": "\"to be or not to be quotes\""}}, "unique_idx": "web_search-11357"}
{"query": "Find the most recent movie releases, please.", "answer": {"plan": "web_search", "arguments": {"query": "recent movie releases"}}, "unique_idx": "web_search-11358"}
{"query": "I need healthy eating recipes; start a web search for some options.", "answer": {"plan": "web_search", "arguments": {"query": "healthy eating recipes"}}, "unique_idx": "web_search-11359"}
{"query": "Could you look up the history of ancient Egypt on the web?", "answer": {"plan": "web_search", "arguments": {"query": "history of ancient Egypt"}}, "unique_idx": "web_search-11360"}
{"query": "Search for the best travel destinations for a summer vacation.", "answer": {"plan": "web_search", "arguments": {"query": "best travel destinations summer vacation"}}, "unique_idx": "web_search-11361"}
{"query": "I'm researching breakthroughs in renewable energy. Can you search for related articles?", "answer": {"plan": "web_search", "arguments": {"query": "renewable energy breakthroughs"}}, "unique_idx": "web_search-11362"}
{"query": "Look up the current trends in the stock market, please.", "answer": {"plan": "web_search", "arguments": {"query": "current stock market trends"}}, "unique_idx": "web_search-11363"}
{"query": "Please initiate a search for effective meditation techniques.", "answer": {"plan": "web_search", "arguments": {"query": "effective meditation techniques"}}, "unique_idx": "web_search-11364"}
{"query": "I need information on upcoming music concerts. Can you search it online?", "answer": {"plan": "web_search", "arguments": {"query": "upcoming music concerts"}}, "unique_idx": "web_search-11365"}
{"query": "Could you search for information regarding space exploration missions in 2021?", "answer": {"plan": "web_search", "arguments": {"query": "space exploration missions 2021"}}, "unique_idx": "web_search-11366"}
{"query": "Please fetch the latest updates on COVID-19 vaccine research from the web.", "answer": {"plan": "web_search", "arguments": {"query": "COVID-19 vaccine research updates"}}, "unique_idx": "web_search-11367"}
{"query": "Search the internet for the latest sports scores in various leagues.", "answer": {"plan": "web_search", "arguments": {"query": "latest sports scores"}}, "unique_idx": "web_search-11368"}
{"query": "I'm curious about the benefits of practicing yoga. Could you look that up?", "answer": {"plan": "web_search", "arguments": {"query": "benefits of practicing yoga"}}, "unique_idx": "web_search-11369"}
{"query": "Can you search for deep learning research papers online?", "answer": {"plan": "web_search", "arguments": {"query": "deep learning research papers"}}, "unique_idx": "web_search-11370", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Find the current top movies playing this weekend.", "answer": {"plan": "web_search", "arguments": {"query": "top movies this weekend"}}, "unique_idx": "web_search-11371", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "I'd like to know the trending fashion styles of 2023. Can you look that up?", "answer": {"plan": "web_search", "arguments": {"query": "trending fashion styles 2023"}}, "unique_idx": "web_search-11372", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "I'm interested in the latest virtual reality news; please search for it on the web.", "answer": {"plan": "web_search", "arguments": {"query": "latest virtual reality news"}}, "unique_idx": "web_search-11373", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Could you find some information on sustainable agriculture practices?", "answer": {"plan": "web_search", "arguments": {"query": "sustainable agriculture practices"}}, "unique_idx": "web_search-11374", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Look up recent Mars exploration missions on the internet, please.", "answer": {"plan": "web_search", "arguments": {"query": "recent Mars exploration missions"}}, "unique_idx": "web_search-11375", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Can you get me the latest updates on artificial intelligence advancements?", "answer": {"plan": "web_search", "arguments": {"query": "artificial intelligence advancements updates"}}, "unique_idx": "web_search-11376", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "I'd like to know what's new in cryptocurrency trends, could you search that?", "answer": {"plan": "web_search", "arguments": {"query": "new cryptocurrency trends"}}, "unique_idx": "web_search-11377", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Search the web for articles on global climate change.", "answer": {"plan": "web_search", "arguments": {"query": "global climate change articles"}}, "unique_idx": "web_search-11378", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "I'm researching recent breakthroughs in biotechnology. Please look that up.", "answer": {"plan": "web_search", "arguments": {"query": "recent breakthroughs in biotechnology"}}, "unique_idx": "web_search-11379", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Could you fetch some info on traditional Japanese cuisine?", "answer": {"plan": "web_search", "arguments": {"query": "traditional Japanese cuisine information"}}, "unique_idx": "web_search-11380", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Look up online resources for learning how to play guitar.", "answer": {"plan": "web_search", "arguments": {"query": "online guitar learning resources"}}, "unique_idx": "web_search-11381", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Initiate a web search for today's stock market analysis.", "answer": {"plan": "web_search", "arguments": {"query": "stock market analysis today"}}, "unique_idx": "web_search-11382", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "I want results on mid-century modern design trends; can you search for them?", "answer": {"plan": "web_search", "arguments": {"query": "mid-century modern design trends"}}, "unique_idx": "web_search-11383", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Fetch the latest updates on the electric car industry from online sources.", "answer": {"plan": "web_search", "arguments": {"query": "latest electric car industry updates"}}, "unique_idx": "web_search-11384", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Search for the historical events of the Roman Empire online.", "answer": {"plan": "web_search", "arguments": {"query": "historical events of the Roman Empire"}}, "unique_idx": "web_search-11385", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Please run a search for educational science podcasts on the internet.", "answer": {"plan": "web_search", "arguments": {"query": "educational science podcasts"}}, "unique_idx": "web_search-11386", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Look up effective remote work strategies available online.", "answer": {"plan": "web_search", "arguments": {"query": "effective remote work strategies"}}, "unique_idx": "web_search-11387", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "I need a list of the best hiking trails in the Alps; can you search for that?", "answer": {"plan": "web_search", "arguments": {"query": "best hiking trails in the Alps"}}, "unique_idx": "web_search-11388", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Could you find current reviews of the latest smartphones?", "answer": {"plan": "web_search", "arguments": {"query": "current smartphone reviews"}}, "unique_idx": "web_search-11389", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "I'm looking for detailed reports on the impact of social media on society.", "answer": {"plan": "web_search", "arguments": {"query": "impact of social media on society reports"}}, "unique_idx": "web_search-11390", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Can you search for global political events happening this week?", "answer": {"plan": "web_search", "arguments": {"query": "global political events this week"}}, "unique_idx": "web_search-11391", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Look up articles on future renewable energy innovations.", "answer": {"plan": "web_search", "arguments": {"query": "future renewable energy innovations"}}, "unique_idx": "web_search-11392", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Search for a list showing the highest-grossing video games.", "answer": {"plan": "web_search", "arguments": {"query": "highest-grossing video games list"}}, "unique_idx": "web_search-11393", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Find recent studies on the advantages of meditation.", "answer": {"plan": "web_search", "arguments": {"query": "advantages of meditation recent studies"}}, "unique_idx": "web_search-11394", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Please look up information regarding COVID-19 recovery timelines.", "answer": {"plan": "web_search", "arguments": {"query": "COVID-19 recovery timelines"}}, "unique_idx": "web_search-11395", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Could you search for the latest trends in sustainable architecture?", "answer": {"plan": "web_search", "arguments": {"query": "latest sustainable architecture trends"}}, "unique_idx": "web_search-11396", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "I'm curious about breakthroughs in nanotechnology; please initiate a search.", "answer": {"plan": "web_search", "arguments": {"query": "breakthroughs in nanotechnology"}}, "unique_idx": "web_search-11397", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Search online for practical dieting tips for maintaining a healthy lifestyle.", "answer": {"plan": "web_search", "arguments": {"query": "practical dieting tips healthy lifestyle"}}, "unique_idx": "web_search-11398", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Could you fetch online details on major archaeological discoveries in the last decade?", "answer": {"plan": "web_search", "arguments": {"query": "major archaeological discoveries past decade"}}, "unique_idx": "web_search-11399", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "I need information on the benefits of mindfulness meditation.", "answer": {"plan": "web_search", "arguments": {"query": "benefits of mindfulness meditation"}}, "unique_idx": "web_search-11400", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Look up recent developments in smart home technology for me.", "answer": {"plan": "web_search", "arguments": {"query": "recent smart home technology developments"}}, "unique_idx": "web_search-11401", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "I'm interested in the advancements in 3D printing; can you check that online?", "answer": {"plan": "web_search", "arguments": {"query": "advancements in 3D printing"}}, "unique_idx": "web_search-11402", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Fetch web results regarding the current best practices in cybersecurity.", "answer": {"plan": "web_search", "arguments": {"query": "current best cybersecurity practices"}}, "unique_idx": "web_search-11403", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Please initiate a search for updates on new sustainable fashion collections.", "answer": {"plan": "web_search", "arguments": {"query": "new sustainable fashion collections updates"}}, "unique_idx": "web_search-11404", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "I'm looking for reviews of the top fitness trackers right now; can you search that for me?", "answer": {"plan": "web_search", "arguments": {"query": "reviews of top fitness trackers"}}, "unique_idx": "web_search-11405", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Could you look for reliable sources that discuss the causes of urban pollution?", "answer": {"plan": "web_search", "arguments": {"query": "causes of urban pollution sources"}}, "unique_idx": "web_search-11406", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Check the internet for discoveries of exoplanets reported in the last year.", "answer": {"plan": "web_search", "arguments": {"query": "exoplanets discovery last year"}}, "unique_idx": "web_search-11407", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "I'm curious about recent advances in quantum computing; can you look it up?", "answer": {"plan": "web_search", "arguments": {"query": "recent advances in quantum computing"}}, "unique_idx": "web_search-11408", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Can you perform a web search on how to start an online business successfully?", "answer": {"plan": "web_search", "arguments": {"query": "how to start an online business successfully"}}, "unique_idx": "web_search-11409", "tools": [{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"]}]}
{"query": "Play the track 'Bohemian Rhapsody'.", "answer": {"plan": "play_music", "arguments": {"track": "Bohemian Rhapsody"}}, "unique_idx": "play_music-11410"}
{"query": "Can you play some music?", "answer": {"plan": "play_music", "arguments": {}}, "unique_idx": "play_music-11411"}
{"query": "Start playing 'Thriller' using Spotify.", "answer": {"plan": "play_music", "arguments": {"track": "Thriller", "app": "Spotify"}}, "unique_idx": "play_music-11412"}
{"query": "Could you use the default music player to play 'Stairway to Heaven' for me?", "answer": {"plan": "play_music", "arguments": {"track": "Stairway to Heaven"}}, "unique_idx": "play_music-11413"}
{"query": "I want to listen to 'Shape of You' on Apple Music.", "answer": {"plan": "play_music", "arguments": {"track": "Shape of You", "app": "Apple Music"}}, "unique_idx": "play_music-11414"}
{"query": "Play some tunes.", "answer": {"plan": "play_music", "arguments": {}}, "unique_idx": "play_music-11415"}
{"query": "Activate music playback for 'Hotel California'.", "answer": {"plan": "play_music", "arguments": {"track": "Hotel California"}}, "unique_idx": "play_music-11416"}
{"query": "I would like to use Pandora to play my favorite track, 'Rolling in the Deep'.", "answer": {"plan": "play_music", "arguments": {"track": "Rolling in the Deep", "app": "Pandora"}}, "unique_idx": "play_music-11417"}
{"query": "Can you play a song for me? Just start the default music player.", "answer": {"plan": "play_music", "arguments": {}}, "unique_idx": "play_music-11418"}
{"query": "Please launch Apple Music and start playing 'Uptown Funk'.", "answer": {"plan": "play_music", "arguments": {"track": "Uptown Funk", "app": "Apple Music"}}, "unique_idx": "play_music-11419"}
{"query": "Queue up 'Yesterday'.", "answer": {"plan": "play_music", "arguments": {"track": "Yesterday"}}, "unique_idx": "play_music-11420"}
{"query": "Fire up Spotify and play some music, even if there's no specific song.", "answer": {"plan": "play_music", "arguments": {"app": "Spotify"}}, "unique_idx": "play_music-11421"}
{"query": "Fire up the music player and put on 'Billie Jean'.", "answer": {"plan": "play_music", "arguments": {"track": "Billie Jean"}}, "unique_idx": "play_music-11422"}
{"query": "I want to check out a song; play 'Imagine - John Lennon'.", "answer": {"plan": "play_music", "arguments": {"track": "Imagine - John Lennon"}}, "unique_idx": "play_music-11423"}
{"query": "Play tracks using the default application.", "answer": {"plan": "play_music", "arguments": {}}, "unique_idx": "play_music-11424"}
{"query": "Could you please play 'Bohemian Rhapsody' using Spotify for me?", "answer": {"plan": "play_music", "arguments": {"track": "Bohemian Rhapsody", "app": "Spotify"}}, "unique_idx": "play_music-11425", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Start the music player and put on 'Wonderwall'.", "answer": {"plan": "play_music", "arguments": {"track": "Wonderwall"}}, "unique_idx": "play_music-11426", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "I feel like hearing some tunes; just open the default music app.", "answer": {"plan": "play_music", "arguments": {}}, "unique_idx": "play_music-11427", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Play 'Lose Yourself' using the Android Music app.", "answer": {"plan": "play_music", "arguments": {"track": "Lose Yourself", "app": "Android Music"}}, "unique_idx": "play_music-11428", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Kick off my tunes by playing the song 'Despacito'.", "answer": {"plan": "play_music", "arguments": {"track": "Despacito"}}, "unique_idx": "play_music-11429", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Ignite the audio player and start 'Smooth Criminal'.", "answer": {"plan": "play_music", "arguments": {"track": "Smooth Criminal"}}, "unique_idx": "play_music-11430", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "I'd love to listen to 'Stairway to Heaven' on my default player.", "answer": {"plan": "play_music", "arguments": {"track": "Stairway to Heaven"}}, "unique_idx": "play_music-11431", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Please launch the music application without specifying any particular track.", "answer": {"plan": "play_music", "arguments": {}}, "unique_idx": "play_music-11432", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Activate Pandora and stream my top hit 'Rolling in the Deep'.", "answer": {"plan": "play_music", "arguments": {"track": "Rolling in the Deep", "app": "Pandora"}}, "unique_idx": "play_music-11433", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Play 'Bad Guy' using Tidal.", "answer": {"plan": "play_music", "arguments": {"track": "Bad Guy", "app": "Tidal"}}, "unique_idx": "play_music-11434", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Hit the play button on the default music player.", "answer": {"plan": "play_music", "arguments": {}}, "unique_idx": "play_music-11435", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "On Deezer, please start the song 'Hey Jude'.", "answer": {"plan": "play_music", "arguments": {"track": "Hey Jude", "app": "Deezer"}}, "unique_idx": "play_music-11436", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Fire up your player and run the track 'Enter Sandman' using SoundCloud.", "answer": {"plan": "play_music", "arguments": {"track": "Enter Sandman", "app": "SoundCloud"}}, "unique_idx": "play_music-11437", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Put on some tunes, but no need to specify any song.", "answer": {"plan": "play_music", "arguments": {}}, "unique_idx": "play_music-11438", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "I'd like to hear 'Thunderstruck' on the default music app.", "answer": {"plan": "play_music", "arguments": {"track": "Thunderstruck"}}, "unique_idx": "play_music-11439", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Play the song 'Hey Ya' using the standard music player.", "answer": {"plan": "play_music", "arguments": {"track": "Hey Ya"}}, "unique_idx": "play_music-11440", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Can you fire up Apple Music and play 'Blank Space'?", "answer": {"plan": "play_music", "arguments": {"track": "Blank Space", "app": "Apple Music"}}, "unique_idx": "play_music-11441", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Please play a random track; just launch the music app.", "answer": {"plan": "play_music", "arguments": {}}, "unique_idx": "play_music-11442", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Start my radio and music channel without specifying any song.", "answer": {"plan": "play_music", "arguments": {}}, "unique_idx": "play_music-11443", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Can you make the default music player play 'Rolling in the Deep'?", "answer": {"plan": "play_music", "arguments": {"track": "Rolling in the Deep"}}, "unique_idx": "play_music-11444", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Switch on the melody machine and start with 'Happy'.", "answer": {"plan": "play_music", "arguments": {"track": "Happy"}}, "unique_idx": "play_music-11445", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Open the music player and set it to play 'Viva La Vida'.", "answer": {"plan": "play_music", "arguments": {"track": "Viva La Vida"}}, "unique_idx": "play_music-11446", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Could you cue up 'Thriller' on the default player?", "answer": {"plan": "play_music", "arguments": {"track": "Thriller"}}, "unique_idx": "play_music-11447", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "I want to use Google Play Music to listen to 'I Will Survive'.", "answer": {"plan": "play_music", "arguments": {"track": "I Will Survive", "app": "Google Play Music"}}, "unique_idx": "play_music-11448", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Play music by starting with 'My Heart Will Go On' on the default app.", "answer": {"plan": "play_music", "arguments": {"track": "My Heart Will Go On"}}, "unique_idx": "play_music-11449", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Begin playing music on Spotify; I'd like to hear 'Sultans of Swing'.", "answer": {"plan": "play_music", "arguments": {"track": "Sultans of Swing", "app": "Spotify"}}, "unique_idx": "play_music-11450", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "I feel nostalgic – please play 'September' on the default player.", "answer": {"plan": "play_music", "arguments": {"track": "September"}}, "unique_idx": "play_music-11451", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Kindly switch on Deezer and start playing 'Radioactive'.", "answer": {"plan": "play_music", "arguments": {"track": "Radioactive", "app": "Deezer"}}, "unique_idx": "play_music-11452", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Engage the default music player to stream some tracks for me.", "answer": {"plan": "play_music", "arguments": {}}, "unique_idx": "play_music-11453", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Play the fan-favorite track \"Sweet Child O' Mine\" on the default app.", "answer": {"plan": "play_music", "arguments": {"track": "Sweet Child O' Mine"}}, "unique_idx": "play_music-11454", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Would you please run the song 'Clocks' on Apple Music?", "answer": {"plan": "play_music", "arguments": {"track": "Clocks", "app": "Apple Music"}}, "unique_idx": "play_music-11455", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Initiate playback by playing 'Lose Yourself'.", "answer": {"plan": "play_music", "arguments": {"track": "Lose Yourself"}}, "unique_idx": "play_music-11456", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Set the mood by playing 'Counting Stars' via Pandora.", "answer": {"plan": "play_music", "arguments": {"track": "Counting Stars", "app": "Pandora"}}, "unique_idx": "play_music-11457", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "I need some background music, so just open the default player.", "answer": {"plan": "play_music", "arguments": {}}, "unique_idx": "play_music-11458", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Activate music playback on Spotify and play 'Nothing Else Matters'.", "answer": {"plan": "play_music", "arguments": {"track": "Nothing Else Matters", "app": "Spotify"}}, "unique_idx": "play_music-11459", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Would you mind playing the song 'Hurt' for me?", "answer": {"plan": "play_music", "arguments": {"track": "Hurt"}}, "unique_idx": "play_music-11460", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Trigger the music engine without selecting a specific track.", "answer": {"plan": "play_music", "arguments": {}}, "unique_idx": "play_music-11461", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Use Tidal to play the song 'Smooth'.", "answer": {"plan": "play_music", "arguments": {"track": "Smooth", "app": "Tidal"}}, "unique_idx": "play_music-11462", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Launch the default music app and shuffle some tracks for me.", "answer": {"plan": "play_music", "arguments": {}}, "unique_idx": "play_music-11463", "tools": [{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"]}]}
{"query": "Can you open the default video player for me?", "answer": {"plan": "play_video", "arguments": {}}, "unique_idx": "play_video-11464"}
{"query": "Please play the video available at https://example.com/video1.mp4 using the default player.", "answer": {"plan": "play_video", "arguments": {"video_uri": "https://example.com/video1.mp4"}}, "unique_idx": "play_video-11465"}
{"query": "Launch the VLC media player to play the video located at file:///home/user/mov.mp4.", "answer": {"plan": "play_video", "arguments": {"video_uri": "file:///home/user/mov.mp4", "app": "VLC media player"}}, "unique_idx": "play_video-11466"}
{"query": "I want to watch a video on YouTube with the link https://youtube.com/watch?v=abcdef. Can you play it using the YouTube app?", "answer": {"plan": "play_video", "arguments": {"video_uri": "https://youtube.com/watch?v=abcdef", "app": "YouTube"}}, "unique_idx": "play_video-11467"}
{"query": "Could you please launch a video from this URL: https://cdn.example.com/sample.mp4? Thanks!", "answer": {"plan": "play_video", "arguments": {"video_uri": "https://cdn.example.com/sample.mp4"}}, "unique_idx": "play_video-11468"}
{"query": "Play the video file located at C:\\Videos\\holiday.mp4 using the default media player.", "answer": {"plan": "play_video", "arguments": {"video_uri": "C:\\Videos\\holiday.mp4"}}, "unique_idx": "play_video-11469"}
{"query": "I need to view a clip from http://videos.example/net/video.mp4 on MX Player. Please start the playback.", "answer": {"plan": "play_video", "arguments": {"video_uri": "http://videos.example/net/video.mp4", "app": "MX Player"}}, "unique_idx": "play_video-11470"}
{"query": "Please start playing a film. I don't have a specific file, so just open the default video player.", "answer": {"plan": "play_video", "arguments": {}}, "unique_idx": "play_video-11471"}
{"query": "Initiate video streaming using the URL ftp://example.com/stream.mov and use the QuickTime player to play it.", "answer": {"plan": "play_video", "arguments": {"video_uri": "ftp://example.com/stream.mov", "app": "QuickTime player"}}, "unique_idx": "play_video-11472"}
{"query": "Open a video for me from this URI: https://media.site.com/movie.mp4.", "answer": {"plan": "play_video", "arguments": {"video_uri": "https://media.site.com/movie.mp4"}}, "unique_idx": "play_video-11473"}
{"query": "I'd like to watch a video now. Please play the file located at file:///D:/Movies/movie.mp4.", "answer": {"plan": "play_video", "arguments": {"video_uri": "file:///D:/Movies/movie.mp4"}}, "unique_idx": "play_video-11474"}
{"query": "Please play this video for me: https://sample.com/clip.mp4 using Windows Media Player.", "answer": {"plan": "play_video", "arguments": {"video_uri": "https://sample.com/clip.mp4", "app": "Windows Media Player"}}, "unique_idx": "play_video-11475"}
{"query": "Allow me to see a video by playing it from the link http://www.videoserver.com/vid. Use the default player if possible.", "answer": {"plan": "play_video", "arguments": {"video_uri": "http://www.videoserver.com/vid"}}, "unique_idx": "play_video-11476"}
{"query": "I want to watch a recorded session. Please use the video at https://recorded.example/session.mp4 and open it with the default video player.", "answer": {"plan": "play_video", "arguments": {"video_uri": "https://recorded.example/session.mp4"}}, "unique_idx": "play_video-11477"}
{"query": "Could you start my favorite movie on Plex? I'm referring to the video at https://plexmedia.example/movie.mp4.", "answer": {"plan": "play_video", "arguments": {"video_uri": "https://plexmedia.example/movie.mp4", "app": "Plex"}}, "unique_idx": "play_video-11478"}
{"query": "Start the VLC media player with the file located at file:///C:/Movies/action.mp4.", "answer": {"plan": "play_video", "arguments": {"video_uri": "file:///C:/Movies/action.mp4", "app": "VLC media player"}}, "unique_idx": "play_video-11479", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Please stream the video from ftp://server.net/video.mpg using QuickTime player.", "answer": {"plan": "play_video", "arguments": {"video_uri": "ftp://server.net/video.mpg", "app": "QuickTime player"}}, "unique_idx": "play_video-11480", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Open the video at http://media.net/clip.mp4 using the default player.", "answer": {"plan": "play_video", "arguments": {"video_uri": "http://media.net/clip.mp4"}}, "unique_idx": "play_video-11481", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "I would like to watch a video; just launch the default media player, please.", "answer": {"plan": "play_video", "arguments": {}}, "unique_idx": "play_video-11482", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Play the clip at https://www.videos.com/sample.mp4 with Windows Media Player.", "answer": {"plan": "play_video", "arguments": {"video_uri": "https://www.videos.com/sample.mp4", "app": "Windows Media Player"}}, "unique_idx": "play_video-11483", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Could you open the default player and play the video from https://streaming.site.com/live.mp4?", "answer": {"plan": "play_video", "arguments": {"video_uri": "https://streaming.site.com/live.mp4"}}, "unique_idx": "play_video-11484", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "I have a file at file:///Users/John/Movies/family.mov that I'd like to watch. Please play it.", "answer": {"plan": "play_video", "arguments": {"video_uri": "file:///Users/John/Movies/family.mov"}}, "unique_idx": "play_video-11485", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Use MX Player to open the video from http://cdn.example.org/vid.", "answer": {"plan": "play_video", "arguments": {"video_uri": "http://cdn.example.org/vid", "app": "MX Player"}}, "unique_idx": "play_video-11486", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "I need to watch something. Kindly open the default video player since no file is specified.", "answer": {"plan": "play_video", "arguments": {}}, "unique_idx": "play_video-11487", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Play the video stream from rtsp://live.example.com/stream using QuickTime player.", "answer": {"plan": "play_video", "arguments": {"video_uri": "rtsp://live.example.com/stream", "app": "QuickTime player"}}, "unique_idx": "play_video-11488", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Launch my video stored at file:///mnt/videos/holiday.avi with VLC media player.", "answer": {"plan": "play_video", "arguments": {"video_uri": "file:///mnt/videos/holiday.avi", "app": "VLC media player"}}, "unique_idx": "play_video-11489", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Please open the video at http://media.com/trailer.mp4 using the default player.", "answer": {"plan": "play_video", "arguments": {"video_uri": "http://media.com/trailer.mp4"}}, "unique_idx": "play_video-11490", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "I want to watch something now. Simply start the default media player for me.", "answer": {"plan": "play_video", "arguments": {}}, "unique_idx": "play_video-11491", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Could you use Windows Media Player to open the video at https://stream.site.com/episode.mp4?", "answer": {"plan": "play_video", "arguments": {"video_uri": "https://stream.site.com/episode.mp4", "app": "Windows Media Player"}}, "unique_idx": "play_video-11492", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Let's watch a movie from ftp://videos.com/movie.wmv on QuickTime player.", "answer": {"plan": "play_video", "arguments": {"video_uri": "ftp://videos.com/movie.wmv", "app": "QuickTime player"}}, "unique_idx": "play_video-11493", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Kindly play the video from https://sample.org/video.mp4; no specific app is needed.", "answer": {"plan": "play_video", "arguments": {"video_uri": "https://sample.org/video.mp4"}}, "unique_idx": "play_video-11494", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "I need to watch a movie. Please use MPV player to launch the video at file:///home/movies/drama.mp4.", "answer": {"plan": "play_video", "arguments": {"video_uri": "file:///home/movies/drama.mp4", "app": "MPV player"}}, "unique_idx": "play_video-11495", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Show me a video now; just open the default video player.", "answer": {"plan": "play_video", "arguments": {}}, "unique_idx": "play_video-11496", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Please play the file at file:///var/videos/documentary.mp4 using VLC media player.", "answer": {"plan": "play_video", "arguments": {"video_uri": "file:///var/videos/documentary.mp4", "app": "VLC media player"}}, "unique_idx": "play_video-11497", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Open the video from this URI: https://mediaresource.com/clip.mov.", "answer": {"plan": "play_video", "arguments": {"video_uri": "https://mediaresource.com/clip.mov"}}, "unique_idx": "play_video-11498", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Can you launch the default video application to play a video for me?", "answer": {"plan": "play_video", "arguments": {}}, "unique_idx": "play_video-11499", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "I have the video URL https://streaming.live/video; please play it using MX Player.", "answer": {"plan": "play_video", "arguments": {"video_uri": "https://streaming.live/video", "app": "MX Player"}}, "unique_idx": "play_video-11500", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Please execute playback of the movie at file:///D:/Movies/comedy.mp4.", "answer": {"plan": "play_video", "arguments": {"video_uri": "file:///D:/Movies/comedy.mp4"}}, "unique_idx": "play_video-11501", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Could you play the video from ftp://downloads/video.mov using QuickTime player?", "answer": {"plan": "play_video", "arguments": {"video_uri": "ftp://downloads/video.mov", "app": "QuickTime player"}}, "unique_idx": "play_video-11502", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "I’d like to watch a video. Please simply open the default video player without a specific file.", "answer": {"plan": "play_video", "arguments": {}}, "unique_idx": "play_video-11503", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Kindly use Windows Media Player to play this video: https://example.co.uk/video.wmv.", "answer": {"plan": "play_video", "arguments": {"video_uri": "https://example.co.uk/video.wmv", "app": "Windows Media Player"}}, "unique_idx": "play_video-11504", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Please initiate the video at file:///home/guest/Videos/clip.avi using VLC media player if available.", "answer": {"plan": "play_video", "arguments": {"video_uri": "file:///home/guest/Videos/clip.avi", "app": "VLC media player"}}, "unique_idx": "play_video-11505", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Can you play the movie from http://mediahub.com/feature.mp4?", "answer": {"plan": "play_video", "arguments": {"video_uri": "http://mediahub.com/feature.mp4"}}, "unique_idx": "play_video-11506", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Jump into a film session! Please launch the default player right away.", "answer": {"plan": "play_video", "arguments": {}}, "unique_idx": "play_video-11507", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Please stream the video from rtsp://192.168.1.100/live using QuickTime player.", "answer": {"plan": "play_video", "arguments": {"video_uri": "rtsp://192.168.1.100/live", "app": "QuickTime player"}}, "unique_idx": "play_video-11508", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "I want to watch the video from https://vcdn.net/sample.mkv using Windows Media Player.", "answer": {"plan": "play_video", "arguments": {"video_uri": "https://vcdn.net/sample.mkv", "app": "Windows Media Player"}}, "unique_idx": "play_video-11509", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Help me see the video at file:///Volumes/Videos/music_video.mp4; the default player is fine.", "answer": {"plan": "play_video", "arguments": {"video_uri": "file:///Volumes/Videos/music_video.mp4"}}, "unique_idx": "play_video-11510", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Play a video using MPV player from the URL http://stream.mpvplayer.com/live.mp4.", "answer": {"plan": "play_video", "arguments": {"video_uri": "http://stream.mpvplayer.com/live.mp4", "app": "MPV player"}}, "unique_idx": "play_video-11511", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Open the video from ftp://data.example.com/archive.mov in the default video player.", "answer": {"plan": "play_video", "arguments": {"video_uri": "ftp://data.example.com/archive.mov"}}, "unique_idx": "play_video-11512", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Start a video session without a specified file; simply open the video player.", "answer": {"plan": "play_video", "arguments": {}}, "unique_idx": "play_video-11513", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Please use VLC media player to play this video clip: https://clips.com/short.mp4.", "answer": {"plan": "play_video", "arguments": {"video_uri": "https://clips.com/short.mp4", "app": "VLC media player"}}, "unique_idx": "play_video-11514", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Initiate video playback from the link http://vids.net/preview.mp4 using QuickTime player.", "answer": {"plan": "play_video", "arguments": {"video_uri": "http://vids.net/preview.mp4", "app": "QuickTime player"}}, "unique_idx": "play_video-11515", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Would you mind playing the video located at file:///Users/guest/Desktop/trailer.mov?", "answer": {"plan": "play_video", "arguments": {"video_uri": "file:///Users/guest/Desktop/trailer.mov"}}, "unique_idx": "play_video-11516", "tools": [{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"]}]}
{"query": "Please open the YouTube app for me.", "answer": {"plan": "launch_application", "arguments": {"application_name": "YouTube"}}, "unique_idx": "launch_application-11517"}
{"query": "Could you launch my email application now?", "answer": {"plan": "launch_application", "arguments": {"application_name": "Email"}}, "unique_idx": "launch_application-11518"}
{"query": "I need to check the weather forecast; start the weather app.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Weather"}}, "unique_idx": "launch_application-11519"}
{"query": "Start the Notes application on my device.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Notes"}}, "unique_idx": "launch_application-11520"}
{"query": "Launch the calculator so I can do some quick math.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Calculator"}}, "unique_idx": "launch_application-11521"}
{"query": "Run my messaging app right away.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Messaging"}}, "unique_idx": "launch_application-11522"}
{"query": "Open Safari on my device.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Safari"}}, "unique_idx": "launch_application-11523"}
{"query": "Boot up Slack so I can start my work discussion.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Slack"}}, "unique_idx": "launch_application-11524"}
{"query": "I would like to see the latest headlines; please open the news app.", "answer": {"plan": "launch_application", "arguments": {"application_name": "News"}}, "unique_idx": "launch_application-11525"}
{"query": "Execute the Music Player so I can listen to some tunes.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Music Player"}}, "unique_idx": "launch_application-11526"}
{"query": "Start your Calendar application to check my meetings.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Calendar"}}, "unique_idx": "launch_application-11527"}
{"query": "Could you initiate the Maps application now?", "answer": {"plan": "launch_application", "arguments": {"application_name": "Maps"}}, "unique_idx": "launch_application-11528"}
{"query": "Fire up Instagram so I can check my feed.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Instagram"}}, "unique_idx": "launch_application-11529"}
{"query": "Please run the Task Manager app.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Task Manager"}}, "unique_idx": "launch_application-11530"}
{"query": "Could you open the Settings on my phone?", "answer": {"plan": "launch_application", "arguments": {"application_name": "Settings"}}, "unique_idx": "launch_application-11531"}
{"query": "Please open the Facebook app on my device.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Facebook"}}, "unique_idx": "launch_application-11532", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Could you launch Gmail for me?", "answer": {"plan": "launch_application", "arguments": {"application_name": "Gmail"}}, "unique_idx": "launch_application-11533", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Kindly open Reddit so I can see the latest posts.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Reddit"}}, "unique_idx": "launch_application-11534", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "I want to capture a moment, please open the Camera app.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Camera"}}, "unique_idx": "launch_application-11535", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Start the Email application immediately.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Email"}}, "unique_idx": "launch_application-11536", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Could you start the Calculator so I can do some quick math?", "answer": {"plan": "launch_application", "arguments": {"application_name": "Calculator"}}, "unique_idx": "launch_application-11537", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "I need to check real-time figures, please launch the Stock Market app.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Stock Market"}}, "unique_idx": "launch_application-11538", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Bring up the Weather app so I can see the forecast.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Weather"}}, "unique_idx": "launch_application-11539", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Switch on the Podcast player; I want to listen to my favorite shows.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Podcast"}}, "unique_idx": "launch_application-11540", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Would you kindly open the Clock app? I need to set an alarm.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Clock"}}, "unique_idx": "launch_application-11541", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Run the Messaging app so I can reply to my friend.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Messaging"}}, "unique_idx": "launch_application-11542", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Activate the File Manager to browse through my documents.", "answer": {"plan": "launch_application", "arguments": {"application_name": "File Manager"}}, "unique_idx": "launch_application-11543", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Launch the Notes app as I need to jot down some ideas right away.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Notes"}}, "unique_idx": "launch_application-11544", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Can you open the Contacts application for me?", "answer": {"plan": "launch_application", "arguments": {"application_name": "Contacts"}}, "unique_idx": "launch_application-11545", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Please open the Books app so I can read an eBook.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Books"}}, "unique_idx": "launch_application-11546", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Make the Photos app appear; I want to view my gallery.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Photos"}}, "unique_idx": "launch_application-11547", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Could you start the Shopping application so I can browse for deals?", "answer": {"plan": "launch_application", "arguments": {"application_name": "Shopping"}}, "unique_idx": "launch_application-11548", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Fire up the Calendar so I can review my upcoming events.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Calendar"}}, "unique_idx": "launch_application-11549", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Initiate the Music Player so I can enjoy some tunes.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Music Player"}}, "unique_idx": "launch_application-11550", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "I want to browse the internet quickly; please open the Opera browser.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Opera"}}, "unique_idx": "launch_application-11551", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Get Chrome up and running; I need to check something online.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Chrome"}}, "unique_idx": "launch_application-11552", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Please launch LinkedIn so I can update my professional profile.", "answer": {"plan": "launch_application", "arguments": {"application_name": "LinkedIn"}}, "unique_idx": "launch_application-11553", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Can you start Snapchat? I want to see the latest stories.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Snapchat"}}, "unique_idx": "launch_application-11554", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Open Messenger so I can chat with my colleague.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Messenger"}}, "unique_idx": "launch_application-11555", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Activate Spotify and get the music streaming for me.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Spotify"}}, "unique_idx": "launch_application-11556", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Could you open the News app? I'm curious about today’s headlines.", "answer": {"plan": "launch_application", "arguments": {"application_name": "News"}}, "unique_idx": "launch_application-11557", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Please start the Alarm app so I can set my wake-up time.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Alarm"}}, "unique_idx": "launch_application-11558", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Launch the File Explorer to help me organize my folders.", "answer": {"plan": "launch_application", "arguments": {"application_name": "File Explorer"}}, "unique_idx": "launch_application-11559", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Open the Voice Recorder so I can capture a quick memo.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Voice Recorder"}}, "unique_idx": "launch_application-11560", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Start the Fitness app; I want to track my workout statistics.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Fitness"}}, "unique_idx": "launch_application-11561", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Could you open the Banking app? I need to check my account balance.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Banking"}}, "unique_idx": "launch_application-11562", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Activate the ToDo List app to manage my daily tasks.", "answer": {"plan": "launch_application", "arguments": {"application_name": "ToDo List"}}, "unique_idx": "launch_application-11563", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Please launch the Voice Assistant so I can use voice commands.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Voice Assistant"}}, "unique_idx": "launch_application-11564", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Open WhatsApp so I can send a quick message to my friend.", "answer": {"plan": "launch_application", "arguments": {"application_name": "WhatsApp"}}, "unique_idx": "launch_application-11565", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Start Notepad for writing a quick memo.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Notepad"}}, "unique_idx": "launch_application-11566", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Fire up the Game Center so I can check out my installed games.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Game Center"}}, "unique_idx": "launch_application-11567", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Could you initiate the Navigation app? I need directions.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Navigation"}}, "unique_idx": "launch_application-11568", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "I have a travel booking to review; please open the Travel app.", "answer": {"plan": "launch_application", "arguments": {"application_name": "Travel"}}, "unique_idx": "launch_application-11569", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Would you kindly open the Meditation app so I can relax?", "answer": {"plan": "launch_application", "arguments": {"application_name": "Meditation"}}, "unique_idx": "launch_application-11570", "tools": [{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments": {"application_name": {"description": "The name of the application to launch.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example": ["YouTube app opened successfully."]}, "examples": ["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"]}]}
{"query": "Can you edit the document at content://docs/abc for me?", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/abc"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11571"}
{"query": "I want to update my existing document located at content://docs/report. Please insert the text 'Budget update is needed.' before opening it for editing.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/report", "content": "Budget update is needed."}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11572"}
{"query": "Please open my document at content://documents/meeting so I can make some changes.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://documents/meeting"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11573"}
{"query": "I need to modify the file available at content://files/notes. Could you pre-fill it with 'Meeting notes updated after 3pm.'?", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://files/notes", "content": "Meeting notes updated after 3pm."}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11574"}
{"query": "Could you edit this document? Its URI is content://docs/draft.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/draft"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11575"}
{"query": "Modify the document at content://documents/project and set the initial text as 'Project basics started here'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://documents/project", "content": "Project basics started here"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11576"}
{"query": "Give me the editing interface for the file with the URI content://files/summary.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://files/summary"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11577"}
{"query": "Please let me edit the document at content://docs/manual. I need to add some instructions at the top.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/manual"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11578"}
{"query": "I have a document at content://reports/annual and I want to open it for editing. Also, please pre-populate it with 'Final review included.' as my update.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://reports/annual", "content": "Final review included."}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11579"}
{"query": "Open the document found at content://homework/assignment for editing.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://homework/assignment"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11580"}
{"query": "I need to change some details in the document at content://study/notes. Insert the text 'Revised notes: Chapter 4 added' and let me edit it.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://study/notes", "content": "Revised notes: Chapter 4 added"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11581"}
{"query": "I'm interested in updating the document at content://docs/guide. Just open it for modification without any pre-filled content.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/guide"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11582"}
{"query": "Please edit the document from the following URI: content://books/summary so that I can make further corrections.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://books/summary"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11583"}
{"query": "I want to make corrections to my document located at content://articles/tech. Please insert 'Updated tech trends for 2023.' as the new content.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://articles/tech", "content": "Updated tech trends for 2023."}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11584"}
{"query": "Access the document for editing at content://docs/valid; I would like to insert the text 'Check updated table of contents.' before I proceed.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/valid", "content": "Check updated table of contents."}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11585"}
{"query": "Please open the document at content://project/plan in edit mode.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://project/plan"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11586", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "I need to modify the document at content://reports/annual; please insert 'Annual report update' into it before editing.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://reports/annual", "content": "Annual report update"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11587", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Access the document at content://docs/memo so I can start editing it.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/memo"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11588", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Kindly open the document located at content://files/note for editing, and pre-fill it with 'Meeting notes captured'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://files/note", "content": "Meeting notes captured"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11589", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "I'd like to update my document at content://documents/letter. Please add 'Dear Sir/Madam' as the initial text.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://documents/letter", "content": "Dear Sir/Madam"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11590", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Can you bring up the editor for the document found at content://docs/instructions?", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/instructions"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11591", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Open the document at content://homework/assignment for editing and let me add 'Solve problem 3'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://homework/assignment", "content": "Solve problem 3"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11592", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "I wish to change the document located at content://articles/news. Begin the edit session with 'Breaking news update'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://articles/news", "content": "Breaking news update"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11593", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Bring up my document for editing at content://docs/guide.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/guide"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11594", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Modify the document at content://reports/summary by inserting 'Quarterly summary updated' before making changes.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://reports/summary", "content": "Quarterly summary updated"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11595", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Edit the file at content://files/manual and add 'Updated safety instructions' to it.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://files/manual", "content": "Updated safety instructions"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11596", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "I want to revise the file located at content://docs/manual.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/manual"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11597", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Could you launch the editor for the document at content://documents/resume and pre-load it with 'Latest work experience'?", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://documents/resume", "content": "Latest work experience"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11598", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Open content://notes/personal for editing, please.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://notes/personal"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11599", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "I need to adjust the document at content://docs/log. Please pre-fill it with 'Corrections needed'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/log", "content": "Corrections needed"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11600", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Start editing my document at content://articles/opinion and insert 'Readers are encouraged to comment' at the beginning.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://articles/opinion", "content": "Readers are encouraged to comment"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11601", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Please load the document at content://docs/plan in the editor and fill it with 'Initial draft available.'", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/plan", "content": "Initial draft available."}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11602", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Edit the file at content://project/outline without adding any extra text.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://project/outline"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11603", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "I need to revise my document at content://documents/notes. Insert 'Added recent meeting details' as the new content.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://documents/notes", "content": "Added recent meeting details"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11604", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Open the document at content://reports/financial for revision; please insert 'Financial forecast adjustments' into it.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://reports/financial", "content": "Financial forecast adjustments"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11605", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Could you bring up the editor for content://files/draft and pre-populate it with 'Draft updated for review'?", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://files/draft", "content": "Draft updated for review"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11606", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Access the document located at content://docs/article for editing; no additional text is needed.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/article"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11607", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "I wish to change my document with URI content://documents/plan. Please pre-fill it with 'Outline revision'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://documents/plan", "content": "Outline revision"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11608", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Make modifications to the file at content://files/guide, and add 'New guidelines added' as content.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://files/guide", "content": "New guidelines added"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11609", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "I require editing of the document at content://homework/research; pre-fill it with 'Please review new data findings'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://homework/research", "content": "Please review new data findings"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11610", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Can you initialize the editing interface for the document at content://docs/feedback?", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/feedback"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11611", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Launch the editor for the document at content://reports/summary and pre-fill it with 'Summary corrections noted'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://reports/summary", "content": "Summary corrections noted"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11612", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "I need to update a document located at content://letters/invitation; please add 'Invitation revised for clarity' as the introduction.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://letters/invitation", "content": "Invitation revised for clarity"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11613", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Please edit the document from content://docs/analysis and insert 'Statistical report verified' as its new content.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/analysis", "content": "Statistical report verified"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11614", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Access and edit my document at content://files/todo without adding any extra information.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://files/todo"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11615", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Open the document at content://projects/design for modifications.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://projects/design"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11616", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Initiate editing for the content at content://docs/plan, and prefill it with 'Add milestone markers'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/plan", "content": "Add milestone markers"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11617", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "I would like to update the document at content://manuals/instructions; please pre-fill it with 'Ensure compliance updates'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://manuals/instructions", "content": "Ensure compliance updates"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11618", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Edit my draft at content://documents/draft and include 'Revised draft version 2' as part of the text.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://documents/draft", "content": "Revised draft version 2"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11619", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Please open the document at content://notes/meeting for editing and insert 'Action items updated'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://notes/meeting", "content": "Action items updated"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11620", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Could you open content://reports/monthly to edit it? I want to add 'Update for March' before starting.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://reports/monthly", "content": "Update for March"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11621", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "I need to modify the document at content://texts/story; no additional content is required.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://texts/story"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11622", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Edit the file at content://files/essay and load it with 'Thesis revision in progress'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://files/essay", "content": "Thesis revision in progress"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11623", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Show the editing view for the document at content://docs/schedule; please prefill it using 'Meeting schedule updated'.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://docs/schedule", "content": "Meeting schedule updated"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11624", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "I want to access and update the document at content://letter/form.", "answer": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://letter/form"}}, "unique_idx": "ACTION_EDIT_DOCUMENT-11625", "tools": [{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"]}]}
{"query": "Could you change my ringtone to content://media/ringtone01?", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone01"}}, "unique_idx": "ACTION_SET_RINGTONE-11626"}
{"query": "I want my phone to have a new ringtone. Please set it to content://media/ringtone_classic.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ringtone_classic"}}, "unique_idx": "ACTION_SET_RINGTONE-11627"}
{"query": "Set the ringtone using the location content://media/funringtone on my device.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/funringtone"}}, "unique_idx": "ACTION_SET_RINGTONE-11628"}
{"query": "Please update my default call tone to content://media/rock.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/rock"}}, "unique_idx": "ACTION_SET_RINGTONE-11629"}
{"query": "Switch my ringtone to content://media/pop_hit.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/pop_hit"}}, "unique_idx": "ACTION_SET_RINGTONE-11630"}
{"query": "Change my phone's incoming call sound to content://media/soothing_tone.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/soothing_tone"}}, "unique_idx": "ACTION_SET_RINGTONE-11631"}
{"query": "I would like the ringtone updated to content://media/high_energy, please set it.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/high_energy"}}, "unique_idx": "ACTION_SET_RINGTONE-11632"}
{"query": "Replace the current ringtone with content://media/electronic_beats.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/electronic_beats"}}, "unique_idx": "ACTION_SET_RINGTONE-11633"}
{"query": "Update the device ringtone to content://media/calm_melody.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/calm_melody"}}, "unique_idx": "ACTION_SET_RINGTONE-11634"}
{"query": "I need to change my ringtone; please set it to content://media/newwave.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/newwave"}}, "unique_idx": "ACTION_SET_RINGTONE-11635"}
{"query": "Set my incoming call's ringtone using the URI content://media/classical_ringtone.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/classical_ringtone"}}, "unique_idx": "ACTION_SET_RINGTONE-11636"}
{"query": "Could you set my phone’s ringtone to content://media/summer_vibes?", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/summer_vibes"}}, "unique_idx": "ACTION_SET_RINGTONE-11637"}
{"query": "Please install the ringtone located at content://media/modern_tune on my phone.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/modern_tune"}}, "unique_idx": "ACTION_SET_RINGTONE-11638"}
{"query": "Assign content://media/vintage_ringtone as my device's new ringtone.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/vintage_ringtone"}}, "unique_idx": "ACTION_SET_RINGTONE-11639"}
{"query": "I want my default notification sound changed to content://media/chillout. Please update my ringtone.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/chillout"}}, "unique_idx": "ACTION_SET_RINGTONE-11640"}
{"query": "Set my ringtone to content://media/bell_chime.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/bell_chime"}}, "unique_idx": "ACTION_SET_RINGTONE-11641", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Please change my ringtone to content://media/sonorous_ring.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/sonorous_ring"}}, "unique_idx": "ACTION_SET_RINGTONE-11642", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "My incoming call sound should be updated to content://media/elegant_ringtone.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/elegant_ringtone"}}, "unique_idx": "ACTION_SET_RINGTONE-11643", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Update the default ringtone on my phone to content://media/melody_dynamic.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/melody_dynamic"}}, "unique_idx": "ACTION_SET_RINGTONE-11644", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "I want my ringtone to be set to content://media/jazzy_tune.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/jazzy_tune"}}, "unique_idx": "ACTION_SET_RINGTONE-11645", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Change my phone's ringtone to content://media/dreamy_song.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/dreamy_song"}}, "unique_idx": "ACTION_SET_RINGTONE-11646", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Configure my ringtone to use the audio at content://media/relaxing_ringtones.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/relaxing_ringtones"}}, "unique_idx": "ACTION_SET_RINGTONE-11647", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Assign content://media/party_beats as my new ringtone.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/party_beats"}}, "unique_idx": "ACTION_SET_RINGTONE-11648", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Please set my ringtone to content://media/mellow_groove.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/mellow_groove"}}, "unique_idx": "ACTION_SET_RINGTONE-11649", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Could you swap my current ringtone for content://media/night_owl?", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/night_owl"}}, "unique_idx": "ACTION_SET_RINGTONE-11650", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Switch my incoming call tone to content://media/morning_melody.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/morning_melody"}}, "unique_idx": "ACTION_SET_RINGTONE-11651", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Please update my call alert sound with content://media/aurora_sound.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/aurora_sound"}}, "unique_idx": "ACTION_SET_RINGTONE-11652", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Apply content://media/smooth_chime as the new ringtone for my phone.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/smooth_chime"}}, "unique_idx": "ACTION_SET_RINGTONE-11653", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Set my phone's ringtone using the file at content://media/zen_tune.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/zen_tune"}}, "unique_idx": "ACTION_SET_RINGTONE-11654", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "I want my device to ring with content://media/blue_note as the ringtone.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/blue_note"}}, "unique_idx": "ACTION_SET_RINGTONE-11655", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Reset my ringtone to a new sound found at content://media/warm_vibes.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/warm_vibes"}}, "unique_idx": "ACTION_SET_RINGTONE-11656", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Set the default ringtone to content://media/sunrise_sound.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/sunrise_sound"}}, "unique_idx": "ACTION_SET_RINGTONE-11657", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Please replace my caller tune with content://media/echo_rhythm.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/echo_rhythm"}}, "unique_idx": "ACTION_SET_RINGTONE-11658", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Kindly set content://media/urban_beat as my ringtone.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/urban_beat"}}, "unique_idx": "ACTION_SET_RINGTONE-11659", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Alter my incoming call sound to content://media/cosmic_ring.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/cosmic_ring"}}, "unique_idx": "ACTION_SET_RINGTONE-11660", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "I want to update my phone sound; please use content://media/silky_notes as my ringtone.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/silky_notes"}}, "unique_idx": "ACTION_SET_RINGTONE-11661", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Please reassign my device ringtone to the track at content://media/neon_melody.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/neon_melody"}}, "unique_idx": "ACTION_SET_RINGTONE-11662", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Change my notification tone to content://media/floral_chime.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/floral_chime"}}, "unique_idx": "ACTION_SET_RINGTONE-11663", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Apply the ringtone using content://media/sharp_ring on my phone.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/sharp_ring"}}, "unique_idx": "ACTION_SET_RINGTONE-11664", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Please set up my ringtone from content://media/high_fidelity for incoming calls.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/high_fidelity"}}, "unique_idx": "ACTION_SET_RINGTONE-11665", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "I'd like my phone to ring with content://media/woodland_whisper - please update the ringtone.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/woodland_whisper"}}, "unique_idx": "ACTION_SET_RINGTONE-11666", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Reconfigure my ringtone to use the sound at content://media/ocean_wave.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ocean_wave"}}, "unique_idx": "ACTION_SET_RINGTONE-11667", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Transform my call sound into content://media/tranquil_tune.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/tranquil_tune"}}, "unique_idx": "ACTION_SET_RINGTONE-11668", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Can you set my phone's ringtone to content://media/serene_song?", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/serene_song"}}, "unique_idx": "ACTION_SET_RINGTONE-11669", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "I need a new ringtone; change it to content://media/tech_vibe, please.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/tech_vibe"}}, "unique_idx": "ACTION_SET_RINGTONE-11670", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Assign my ringtone as content://media/ethereal_sound.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/ethereal_sound"}}, "unique_idx": "ACTION_SET_RINGTONE-11671", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Please select content://media/glittering_tone as the ringtone for my device.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/glittering_tone"}}, "unique_idx": "ACTION_SET_RINGTONE-11672", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Switch my phone's ringtone over to content://media/fantasy_rhythm.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/fantasy_rhythm"}}, "unique_idx": "ACTION_SET_RINGTONE-11673", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "I prefer the ringtone content://media/gentle_breeze; please change my phone sound.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/gentle_breeze"}}, "unique_idx": "ACTION_SET_RINGTONE-11674", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Set up the ringtone with URI content://media/pulse_tune for my incoming calls.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/pulse_tune"}}, "unique_idx": "ACTION_SET_RINGTONE-11675", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "I fancy the sound at content://media/chic_harmony as my ringtone. Could you update it?", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/chic_harmony"}}, "unique_idx": "ACTION_SET_RINGTONE-11676", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Establish content://media/cool_jingle as the new default ringtone on my device.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/cool_jingle"}}, "unique_idx": "ACTION_SET_RINGTONE-11677", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Please update my incoming ringtone using the audio file at content://media/first_note.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/first_note"}}, "unique_idx": "ACTION_SET_RINGTONE-11678", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Kindly adjust my phone's ringtone to content://media/vivid_beep.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/vivid_beep"}}, "unique_idx": "ACTION_SET_RINGTONE-11679", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Change the ringtone on my device to content://media/echo_chime.", "answer": {"plan": "ACTION_SET_RINGTONE", "arguments": {"ringtone_uri": "content://media/echo_chime"}}, "unique_idx": "ACTION_SET_RINGTONE-11680", "tools": [{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"]}]}
{"query": "Change my alarm at index 3 to 6:45 AM with the label 'Morning Workout'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 3, "EXTRA_HOUR": 6, "EXTRA_MINUTES": 45, "EXTRA_MESSAGE": "Morning Workout"}}, "unique_idx": "ACTION_EDIT_ALARM-11681"}
{"query": "Can you update alarm #1 to ring at 9:00 and add the title 'Meeting Reminder'?", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 1, "EXTRA_HOUR": 9, "EXTRA_MINUTES": 0, "EXTRA_MESSAGE": "Meeting Reminder"}}, "unique_idx": "ACTION_EDIT_ALARM-11682"}
{"query": "I need to set alarm 5 to wake me up at 07:30, and please do it without showing the UI.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 5, "EXTRA_HOUR": 7, "EXTRA_MINUTES": 30, "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_EDIT_ALARM-11683"}
{"query": "Please modify alarm number 2 to a later time: set it to 10:15 AM and turn off vibration.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 2, "EXTRA_HOUR": 10, "EXTRA_MINUTES": 15, "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_EDIT_ALARM-11684"}
{"query": "Alter my alarm 4 so that it rings at 18:00 with the label 'Gym Time'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 4, "EXTRA_HOUR": 18, "EXTRA_MINUTES": 0, "EXTRA_MESSAGE": "Gym Time"}}, "unique_idx": "ACTION_EDIT_ALARM-11685"}
{"query": "Could you update my alarm number 3 to go off at 5:05 AM on Monday and Friday?", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 3, "EXTRA_HOUR": 5, "EXTRA_MINUTES": 5, "EXTRA_DAYS": ["Monday", "Friday"]}}, "unique_idx": "ACTION_EDIT_ALARM-11686"}
{"query": "Please update the alarm with ID 7 to 22:45, and change its label to 'Night Reading'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 7, "EXTRA_HOUR": 22, "EXTRA_MINUTES": 45, "EXTRA_MESSAGE": "Night Reading"}}, "unique_idx": "ACTION_EDIT_ALARM-11687"}
{"query": "Reschedule alarm 8 to 12:30 PM and set it to play a custom ringtone 'ringtone://morning_song.mp3'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 8, "EXTRA_HOUR": 12, "EXTRA_MINUTES": 30, "EXTRA_RINGTONE": "ringtone://morning_song.mp3"}}, "unique_idx": "ACTION_EDIT_ALARM-11688"}
{"query": "Could you change alarm number 9 to 3:10 AM and disable the vibrate function?", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 9, "EXTRA_HOUR": 3, "EXTRA_MINUTES": 10, "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_EDIT_ALARM-11689"}
{"query": "I want to adjust alarm 10 to ring at 20:20 with the label 'Dinner Time' and ensure it vibrates.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 10, "EXTRA_HOUR": 20, "EXTRA_MINUTES": 20, "EXTRA_MESSAGE": "Dinner Time", "EXTRA_VIBRATE": true}}, "unique_idx": "ACTION_EDIT_ALARM-11690"}
{"query": "Update alarm 11 to 07:00 and have it repeat on Tuesday, Thursday, and Saturday.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 11, "EXTRA_HOUR": 7, "EXTRA_MINUTES": 0, "EXTRA_DAYS": ["Tuesday", "Thursday", "Saturday"]}}, "unique_idx": "ACTION_EDIT_ALARM-11691"}
{"query": "I'm tired of the current settings on alarm 12. Can you change its time to 23:59 and add the note 'Last Minute Wakeup'?", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 12, "EXTRA_HOUR": 23, "EXTRA_MINUTES": 59, "EXTRA_MESSAGE": "Last Minute Wakeup"}}, "unique_idx": "ACTION_EDIT_ALARM-11692"}
{"query": "Switch my alarm 13 to 16:40 and make sure that the vibration is turned off.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 13, "EXTRA_HOUR": 16, "EXTRA_MINUTES": 40, "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_EDIT_ALARM-11693"}
{"query": "Adjust alarm number 14 so that it rings at 11:25 in the morning without any additional settings.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 14, "EXTRA_HOUR": 11, "EXTRA_MINUTES": 25}}, "unique_idx": "ACTION_EDIT_ALARM-11694"}
{"query": "Please change alarm 15's time to 4:50 AM, update its label to 'Afternoon Nap', and ensure that the alarm does not display the UI.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 15, "EXTRA_HOUR": 4, "EXTRA_MINUTES": 50, "EXTRA_MESSAGE": "Afternoon Nap", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_EDIT_ALARM-11695"}
{"query": "Revise alarm number 10 to ring at 7:05 AM and add the note 'Breakfast'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 10, "EXTRA_HOUR": 7, "EXTRA_MINUTES": 5, "EXTRA_MESSAGE": "Breakfast"}}, "unique_idx": "ACTION_EDIT_ALARM-11696", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Please update alarm 12: set it for 22:15 with the label 'Night Reading', repeating on Saturday and Sunday.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 12, "EXTRA_HOUR": 22, "EXTRA_MINUTES": 15, "EXTRA_MESSAGE": "Night Reading", "EXTRA_DAYS": ["Saturday", "Sunday"]}}, "unique_idx": "ACTION_EDIT_ALARM-11697", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Switch my alarm 1 to 1:30 PM and disable vibration.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 1, "EXTRA_HOUR": 13, "EXTRA_MINUTES": 30, "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_EDIT_ALARM-11698", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Reprogram alarm no. 6 to sound at 5:55 AM with my morning tune ringtone 'ringtone://morning_tune.mp3'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 6, "EXTRA_HOUR": 5, "EXTRA_MINUTES": 55, "EXTRA_RINGTONE": "ringtone://morning_tune.mp3"}}, "unique_idx": "ACTION_EDIT_ALARM-11699", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "I want to modify alarm 15: reset it to 11:00 AM and ensure vibrations are off.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 15, "EXTRA_HOUR": 11, "EXTRA_MINUTES": 0, "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_EDIT_ALARM-11700", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Alter alarm index 8 to display 'Lunch Break' and ring at 12:00 PM.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 8, "EXTRA_HOUR": 12, "EXTRA_MINUTES": 0, "EXTRA_MESSAGE": "Lunch Break"}}, "unique_idx": "ACTION_EDIT_ALARM-11701", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Set alarm 20 to go off at 23:45 without any additional labels.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 20, "EXTRA_HOUR": 23, "EXTRA_MINUTES": 45}}, "unique_idx": "ACTION_EDIT_ALARM-11702", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Change alarm 7 so that it rings at 9:08 AM and repeats on Monday, Wednesday, and Friday.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 7, "EXTRA_HOUR": 9, "EXTRA_MINUTES": 8, "EXTRA_DAYS": ["Monday", "Wednesday", "Friday"]}}, "unique_idx": "ACTION_EDIT_ALARM-11703", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Please change alarm number 5 to 8:00 AM with vibration turned off and label it 'No Sound Alarm'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 5, "EXTRA_HOUR": 8, "EXTRA_MINUTES": 0, "EXTRA_VIBRATE": false, "EXTRA_MESSAGE": "No Sound Alarm"}}, "unique_idx": "ACTION_EDIT_ALARM-11704", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Update alarm number 11 so that it rings at 7:30 PM and uses the tone 'ringtone://party_time.mp3'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 11, "EXTRA_HOUR": 19, "EXTRA_MINUTES": 30, "EXTRA_RINGTONE": "ringtone://party_time.mp3"}}, "unique_idx": "ACTION_EDIT_ALARM-11705", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Modify alarm number 2 to a wakeup call at 06:00 AM, and please do it without showing the clock UI.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 2, "EXTRA_HOUR": 6, "EXTRA_MINUTES": 0, "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_EDIT_ALARM-11706", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Reschedule alarm 9 to 2:20 PM with the reminder 'Afternoon Power Nap'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 9, "EXTRA_HOUR": 14, "EXTRA_MINUTES": 20, "EXTRA_MESSAGE": "Afternoon Power Nap"}}, "unique_idx": "ACTION_EDIT_ALARM-11707", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Set alarm 4 to ring at 4:45 PM and mark it for weekend repeat (Saturday and Sunday).", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 4, "EXTRA_HOUR": 16, "EXTRA_MINUTES": 45, "EXTRA_DAYS": ["Saturday", "Sunday"]}}, "unique_idx": "ACTION_EDIT_ALARM-11708", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Update my alarm at index 13 to fire at 10:30 AM.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 13, "EXTRA_HOUR": 10, "EXTRA_MINUTES": 30}}, "unique_idx": "ACTION_EDIT_ALARM-11709", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Can you set alarm 3 to 9:50 AM with the label 'Evening Study' and turn off vibration?", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 3, "EXTRA_HOUR": 9, "EXTRA_MINUTES": 50, "EXTRA_MESSAGE": "Evening Study", "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_EDIT_ALARM-11710", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "I need to adjust alarm number 17 to sound at 4:15 PM with a custom ringtone 'ringtone://afternoon_alarm.mp3'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 17, "EXTRA_HOUR": 16, "EXTRA_MINUTES": 15, "EXTRA_RINGTONE": "ringtone://afternoon_alarm.mp3"}}, "unique_idx": "ACTION_EDIT_ALARM-11711", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Modify alarm 19 to ring at 2:05 PM and disable the vibration.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 19, "EXTRA_HOUR": 14, "EXTRA_MINUTES": 5, "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_EDIT_ALARM-11712", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Edit alarm number 22 so that it rings at midnight (00:00) and shows the label 'Midnight Snack'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 22, "EXTRA_HOUR": 0, "EXTRA_MINUTES": 0, "EXTRA_MESSAGE": "Midnight Snack"}}, "unique_idx": "ACTION_EDIT_ALARM-11713", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Please update alarm #23 to 11:55 with no repeat days.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 23, "EXTRA_HOUR": 11, "EXTRA_MINUTES": 55}}, "unique_idx": "ACTION_EDIT_ALARM-11714", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Reschedule alarm 25 to 3:35 PM with the note 'Meeting in progress' and skip the UI.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 25, "EXTRA_HOUR": 15, "EXTRA_MINUTES": 35, "EXTRA_MESSAGE": "Meeting in progress", "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_EDIT_ALARM-11715", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Set alarm #30 for 6:20 AM with a reminder 'Jog time' and turn off vibration.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 30, "EXTRA_HOUR": 6, "EXTRA_MINUTES": 20, "EXTRA_MESSAGE": "Jog time", "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_EDIT_ALARM-11716", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Reassign alarm id 33 to 8:10 PM, add the label 'Dinner Alert' and set it to repeat on Friday.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 33, "EXTRA_HOUR": 20, "EXTRA_MINUTES": 10, "EXTRA_MESSAGE": "Dinner Alert", "EXTRA_DAYS": ["Friday"]}}, "unique_idx": "ACTION_EDIT_ALARM-11717", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Undo the previous settings of alarm 40 and change it to 12:00 noon.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 40, "EXTRA_HOUR": 12, "EXTRA_MINUTES": 0}}, "unique_idx": "ACTION_EDIT_ALARM-11718", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Edit alarm 27 to ring at 7:25 AM and use 'ringtone://classic_tune.mp3' as its sound.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 27, "EXTRA_HOUR": 7, "EXTRA_MINUTES": 25, "EXTRA_RINGTONE": "ringtone://classic_tune.mp3"}}, "unique_idx": "ACTION_EDIT_ALARM-11719", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Could you revise my alarm at index 45 to 3:30 PM (15:30) with the description 'Afternoon Meeting'?", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 45, "EXTRA_HOUR": 15, "EXTRA_MINUTES": 30, "EXTRA_MESSAGE": "Afternoon Meeting"}}, "unique_idx": "ACTION_EDIT_ALARM-11720", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Update the alarm numbered 50 to 8:40 AM, disable vibration and repeat on Monday and Friday.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 50, "EXTRA_HOUR": 8, "EXTRA_MINUTES": 40, "EXTRA_VIBRATE": false, "EXTRA_DAYS": ["Monday", "Friday"]}}, "unique_idx": "ACTION_EDIT_ALARM-11721", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Alter alarm 55 so that it goes off at 5:00 PM with the label 'Evening Workout'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 55, "EXTRA_HOUR": 17, "EXTRA_MINUTES": 0, "EXTRA_MESSAGE": "Evening Workout"}}, "unique_idx": "ACTION_EDIT_ALARM-11722", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "I'd like to reset my alarm number 60 to 6:55 AM with the label 'Morning Run'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 60, "EXTRA_HOUR": 6, "EXTRA_MINUTES": 55, "EXTRA_MESSAGE": "Morning Run"}}, "unique_idx": "ACTION_EDIT_ALARM-11723", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Change alarm 65 to ring at 10:30 PM with ringtone 'ringtone://late_night.mp3' and display 'Late Night Alarm'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 65, "EXTRA_HOUR": 22, "EXTRA_MINUTES": 30, "EXTRA_RINGTONE": "ringtone://late_night.mp3", "EXTRA_MESSAGE": "Late Night Alarm"}}, "unique_idx": "ACTION_EDIT_ALARM-11724", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Please modify alarm 70; set it for 10:11 AM with the note 'Brunch'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 70, "EXTRA_HOUR": 10, "EXTRA_MINUTES": 11, "EXTRA_MESSAGE": "Brunch"}}, "unique_idx": "ACTION_EDIT_ALARM-11725", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Switch alarm number 75 to 1:15 PM with repeat days on Tuesday and Thursday.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 75, "EXTRA_HOUR": 13, "EXTRA_MINUTES": 15, "EXTRA_DAYS": ["Tuesday", "Thursday"]}}, "unique_idx": "ACTION_EDIT_ALARM-11726", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Could you set alarm 80 to begin at 5:05 AM and disable vibration?", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 80, "EXTRA_HOUR": 5, "EXTRA_MINUTES": 5, "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_EDIT_ALARM-11727", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Please update alarm number 85 to 7:22 PM with the message 'TV Time'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 85, "EXTRA_HOUR": 19, "EXTRA_MINUTES": 22, "EXTRA_MESSAGE": "TV Time"}}, "unique_idx": "ACTION_EDIT_ALARM-11728", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "I need to adjust alarm number 90 to ring at 11:11 AM and skip the interface popup.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 90, "EXTRA_HOUR": 11, "EXTRA_MINUTES": 11, "EXTRA_SKIP_UI": true}}, "unique_idx": "ACTION_EDIT_ALARM-11729", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Change alarm id 95 to 4:45 PM with a custom ringtone 'ringtone://smooth_jazz.mp3'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 95, "EXTRA_HOUR": 16, "EXTRA_MINUTES": 45, "EXTRA_RINGTONE": "ringtone://smooth_jazz.mp3"}}, "unique_idx": "ACTION_EDIT_ALARM-11730", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Modify alarm 100 to 9:15 AM; let it vibrate as normal.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 100, "EXTRA_HOUR": 9, "EXTRA_MINUTES": 15}}, "unique_idx": "ACTION_EDIT_ALARM-11731", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Could you edit alarm 105 and set it to ring at 8:03 PM with the label 'Evening News'?", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 105, "EXTRA_HOUR": 20, "EXTRA_MINUTES": 3, "EXTRA_MESSAGE": "Evening News"}}, "unique_idx": "ACTION_EDIT_ALARM-11732", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Rewrite alarm 110 to alert me at 1:30 AM with vibration turned off.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 110, "EXTRA_HOUR": 1, "EXTRA_MINUTES": 30, "EXTRA_VIBRATE": false}}, "unique_idx": "ACTION_EDIT_ALARM-11733", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Adjust alarm number 115 so that it rings at 4:40 AM with the reminder 'Pre-dawn alarm'.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 115, "EXTRA_HOUR": 4, "EXTRA_MINUTES": 40, "EXTRA_MESSAGE": "Pre-dawn alarm"}}, "unique_idx": "ACTION_EDIT_ALARM-11734", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Please update alarm 120 to 2:55 PM and include repeat days on Wednesday and Saturday.", "answer": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": 120, "EXTRA_HOUR": 14, "EXTRA_MINUTES": 55, "EXTRA_DAYS": ["Wednesday", "Saturday"]}}, "unique_idx": "ACTION_EDIT_ALARM-11735", "tools": [{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"]}]}
{"query": "Please open video file at content://videos/my_movie.mp4 for editing.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/my_movie.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-11736"}
{"query": "I need to trim the video at content://videos/trailer.mp4 to the first 60 seconds. Can you do it?", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/trailer.mp4", "edit_options": {"start_time": 0, "end_time": 60000}}}, "unique_idx": "ACTION_EDIT_VIDEO-11737"}
{"query": "Edit the video located at content://videos/interview.mp4 by muting the audio.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/interview.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-11738"}
{"query": "Can you open content://videos/holiday.mp4 for adjustments?", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/holiday.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-11739"}
{"query": "I want to slice the clip at content://videos/clip.mp4 from 15000ms to 45000ms.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/clip.mp4", "edit_options": {"start_time": 15000, "end_time": 45000}}}, "unique_idx": "ACTION_EDIT_VIDEO-11740"}
{"query": "Load content://videos/music_video.mp4 for editing and remove its sound.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/music_video.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-11741"}
{"query": "Open the presentation video at content://videos/presentation.mp4 for manual editing.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/presentation.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-11742"}
{"query": "Could you please trim content://videos/sports.mp4 to highlight the moment between 20000ms and 50000ms?", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/sports.mp4", "edit_options": {"start_time": 20000, "end_time": 50000}}}, "unique_idx": "ACTION_EDIT_VIDEO-11743"}
{"query": "I need editing: mute the audio in content://videos/documentary.mp4.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/documentary.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-11744"}
{"query": "Assist me in editing content://videos/interview_part1.mp4, trimming it from the beginning up to 30 seconds.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/interview_part1.mp4", "edit_options": {"start_time": 0, "end_time": 30000}}}, "unique_idx": "ACTION_EDIT_VIDEO-11745"}
{"query": "I'd like to open the file hosted at content://videos/cooking.mp4, no automatic editing please.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/cooking.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-11746"}
{"query": "Edit my home video at content://videos/home.mp4 by cutting the segment from 5000ms until 25000ms.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/home.mp4", "edit_options": {"start_time": 5000, "end_time": 25000}}}, "unique_idx": "ACTION_EDIT_VIDEO-11747"}
{"query": "Can you remove the audio track from content://videos/family_get_together.mp4?", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/family_get_together.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-11748"}
{"query": "Load and prepare content://videos/art_exhibition.mp4 for editing, but don't apply any automatic changes.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/art_exhibition.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-11749"}
{"query": "I want to automatically trim content://videos/event.mp4 between 10000ms and 40000ms while keeping the audio intact.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/event.mp4", "edit_options": {"start_time": 10000, "end_time": 40000}}}, "unique_idx": "ACTION_EDIT_VIDEO-11750"}
{"query": "Can you open video at content://videos/news.mp4 for modifications?", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/news.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-11751", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Please edit content://videos/party.mp4 by trimming the view from the 10s mark (10000ms) to 45s (45000ms).", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/party.mp4", "edit_options": {"start_time": 10000, "end_time": 45000}}}, "unique_idx": "ACTION_EDIT_VIDEO-11752", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "I want to remove the sound from my video: content://videos/tutorial.mp4.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/tutorial.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-11753", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Open content://videos/interview.mp4 in editing mode.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/interview.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-11754", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Trim down content://videos/weather.mp4 from 5000ms to 15000ms.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/weather.mp4", "edit_options": {"start_time": 5000, "end_time": 15000}}}, "unique_idx": "ACTION_EDIT_VIDEO-11755", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Load video 'content://videos/experiment.mp4' and mute all audio.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/experiment.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-11756", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Would you kindly open content://videos/workshop.mp4 so I can edit it manually?", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/workshop.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-11757", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "I need to shorten content://videos/art.mp4 to the duration between 0ms and 30000ms.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/art.mp4", "edit_options": {"start_time": 0, "end_time": 30000}}}, "unique_idx": "ACTION_EDIT_VIDEO-11758", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Could you please remove the background track from content://videos/lecture.mp4?", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/lecture.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-11759", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Initiate editing on content://videos/interview_clip.mp4.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/interview_clip.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-11760", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Please open the film content://videos/shortfilm.mp4 for trimming from 2000ms to 22000ms.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/shortfilm.mp4", "edit_options": {"start_time": 2000, "end_time": 22000}}}, "unique_idx": "ACTION_EDIT_VIDEO-11761", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Can someone help me to load the video located at content://videos/holiday_special.mp4 for editing?", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/holiday_special.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-11762", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "I want to modify content://videos/love_story.mp4 by cutting it from the beginning until 60000ms.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/love_story.mp4", "edit_options": {"start_time": 0, "end_time": 60000}}}, "unique_idx": "ACTION_EDIT_VIDEO-11763", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Would you mute the audio in content://videos/meetup.mp4?", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/meetup.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-11764", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Edit content://videos/vacation.mp4 such that only the segment from 10000ms to 30000ms remains.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/vacation.mp4", "edit_options": {"start_time": 10000, "end_time": 30000}}}, "unique_idx": "ACTION_EDIT_VIDEO-11765", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Open my video at content://videos/music_concert.mp4, but please remove its sound.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/music_concert.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-11766", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "I need manual adjustments on content://videos/fashion_show.mp4.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/fashion_show.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-11767", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Please trim the clip at content://videos/clip_final.mp4 from 7000ms till 27000ms.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/clip_final.mp4", "edit_options": {"start_time": 7000, "end_time": 27000}}}, "unique_idx": "ACTION_EDIT_VIDEO-11768", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Could you open content://videos/sports_highlight.mp4 for easy editing?", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/sports_highlight.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-11769", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "I require the video at content://videos/journey.mp4 be edited to only include footage between 0ms and 45000ms.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/journey.mp4", "edit_options": {"start_time": 0, "end_time": 45000}}}, "unique_idx": "ACTION_EDIT_VIDEO-11770", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Edit my video content://videos/wedding.mp4 by muting its audio track.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/wedding.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-11771", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Please prepare content://videos/recipe.mp4 for trimming: start from 500ms and end at 10000ms.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/recipe.mp4", "edit_options": {"start_time": 500, "end_time": 10000}}}, "unique_idx": "ACTION_EDIT_VIDEO-11772", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "I want to use the editor on content://videos/technology.mp4.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/technology.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-11773", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Can you load content://videos/gaming.mp4 and remove its sound?", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/gaming.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-11774", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Need to trim content://videos/underwater.mp4 from 3000ms until 18000ms.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/underwater.mp4", "edit_options": {"start_time": 3000, "end_time": 18000}}}, "unique_idx": "ACTION_EDIT_VIDEO-11775", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "I have content://videos/birthday.mp4; open it for manual tweaking.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/birthday.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-11776", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Cut content://videos/roadtrip.mp4 such that it starts at 0 and stops at 35000ms.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/roadtrip.mp4", "edit_options": {"start_time": 0, "end_time": 35000}}}, "unique_idx": "ACTION_EDIT_VIDEO-11777", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "I wish to open content://videos/concert.mp4 for editing, with the audio turned off too.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/concert.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-11778", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Load up content://videos/sunset.mp4 for editing.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/sunset.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-11779", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Trim my travel video at content://videos/travelogue.mp4 from 10000ms to 50000ms, please.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/travelogue.mp4", "edit_options": {"start_time": 10000, "end_time": 50000}}}, "unique_idx": "ACTION_EDIT_VIDEO-11780", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Please open the media file content://videos/guide.mp4 for revision.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/guide.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-11781", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Can you apply a mute effect on content://videos/animal.mp4?", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/animal.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-11782", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "I want to see an edited version of content://videos/sci_fi.mp4 trimmed to the first 30000ms.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/sci_fi.mp4", "edit_options": {"start_time": 0, "end_time": 30000}}}, "unique_idx": "ACTION_EDIT_VIDEO-11783", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Load video content://videos/festival.mp4 and remove its audio track.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/festival.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-11784", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Help me edit content://videos/desert.mp4 by cutting out everything after 40000ms.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/desert.mp4", "edit_options": {"start_time": 0, "end_time": 40000}}}, "unique_idx": "ACTION_EDIT_VIDEO-11785", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Please open content://videos/business_meeting.mp4 for a quick review.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/business_meeting.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-11786", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "I need content://videos/poetry.mp4 muted as its background noise is too distracting.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/poetry.mp4", "edit_options": {"mute": true}}}, "unique_idx": "ACTION_EDIT_VIDEO-11787", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Kindly edit content://videos/kids_show.mp4 to only include the segment from 5000ms to 25000ms.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/kids_show.mp4", "edit_options": {"start_time": 5000, "end_time": 25000}}}, "unique_idx": "ACTION_EDIT_VIDEO-11788", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Please process content://videos/marathon.mp4 by opening it in the editor.", "answer": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://videos/marathon.mp4"}}, "unique_idx": "ACTION_EDIT_VIDEO-11789", "tools": [{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"]}]}
{"query": "Please start navigation to Statue of Liberty, New York, NY 10004, USA.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Statue of Liberty, New York, NY 10004, USA"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11790"}
{"query": "Can you guide me to Eiffel Tower in Paris?", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Eiffel Tower, Paris"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11791"}
{"query": "I need to get directions to 221B Baker Street, London.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "221B Baker Street, London"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11792"}
{"query": "Start navigation to the coordinates 48.858370,2.294481.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "48.858370,2.294481"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11793"}
{"query": "Take me to Disneyland Anaheim, CA, as soon as possible.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Disneyland Anaheim, CA"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11794"}
{"query": "I would like to visit Central Park, NYC. Please initiate navigation there.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Central Park, NYC"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11795"}
{"query": "Navigate me to 1 Infinite Loop, Cupertino, CA.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "1 Infinite Loop, Cupertino, CA"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11796"}
{"query": "Direct me to Buckingham Palace in London.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Buckingham Palace, London"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11797"}
{"query": "Begin navigation to the Sydney Opera House, Australia.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Sydney Opera House, Australia"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11798"}
{"query": "I require directions to the Colosseum, Rome, Italy.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Colosseum, Rome, Italy"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11799"}
{"query": "Please launch the maps and navigate to the Golden Gate Bridge, San Francisco, CA.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Golden Gate Bridge, San Francisco, CA"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11800"}
{"query": "Map app, set the destination to Tokyo Tower in Tokyo, Japan.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Tokyo Tower, Tokyo, Japan"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11801"}
{"query": "I need to go to the Empire State Building, New York. Can you start the navigation?", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Empire State Building, New York"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11802"}
{"query": "Launch the navigation app for me and set my destination to the Louvre Museum, Paris.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Louvre Museum, Paris"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11803"}
{"query": "Find me directions to Central Park, New York, please.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Central Park, New York"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11804", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Start navigation to the coordinates 51.500729,-0.124625.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "51.500729,-0.124625"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11805", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Take me to the Space Needle in Seattle.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Space Needle, Seattle"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11806", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Launch route guidance to the Sydney Opera House in Sydney.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Sydney Opera House, Sydney"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11807", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Navigate me to the Taj Mahal in India.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Taj Mahal, India"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11808", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Help me get directions to the Dancing House in Prague.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Dancing House, Prague"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11809", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Please direct me to 1600 Pennsylvania Avenue NW, Washington, DC.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "1600 Pennsylvania Avenue NW, Washington, DC"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11810", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Plot a course for the Colosseum in Rome, Italy.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Colosseum, Rome, Italy"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11811", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I need to drive to Big Ben in London.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Big Ben, London"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11812", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Could you set my destination to Disneyland, Anaheim, CA?", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Disneyland, Anaheim, CA"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11813", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I am leaving now, navigate me to Shibuya Crossing in Tokyo.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Shibuya Crossing, Tokyo"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11814", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Show me a route to the CN Tower in Toronto.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "CN Tower, Toronto"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11815", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Guide me to the Red Square in Moscow.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Red Square, Moscow"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11816", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Set navigation to the Berlin Brandenburg Airport, Germany.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Berlin Brandenburg Airport, Germany"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11817", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Commence navigation to the Prado Museum in Madrid.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Prado Museum, Madrid"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11818", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I require directions to the Burj Khalifa in Dubai.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Burj Khalifa, Dubai"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11819", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Open the map and head over to the Sagrada Familia in Barcelona.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Sagrada Familia, Barcelona"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11820", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Please begin navigation to the Christ the Redeemer statue in Rio de Janeiro.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Christ the Redeemer, Rio de Janeiro"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11821", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Take me via road to Mount Rushmore National Memorial, South Dakota.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Mount Rushmore National Memorial, South Dakota"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11822", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Could you direct my navigation to Neuschwanstein Castle in Germany?", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Neuschwanstein Castle, Germany"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11823", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I need driving directions to the Forbidden City in Beijing.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Forbidden City, Beijing"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11824", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Help me navigate to the Hollywood Sign in Los Angeles.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Hollywood Sign, Los Angeles"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11825", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Set my navigation to 10 Downing Street in London.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "10 Downing Street, London"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11826", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Plot a course for the Uffizi Gallery in Florence, Italy.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Uffizi Gallery, Florence, Italy"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11827", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I need directions to the Biltmore Estate in Asheville, NC.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Biltmore Estate, Asheville, NC"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11828", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Direct me to Puerta del Sol in Madrid, Spain.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Puerta del Sol, Madrid, Spain"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11829", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Start navigation to Place de la Concorde in Paris.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Place de la Concorde, Paris"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11830", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Map out a route for me to Millennium Park in Chicago, IL.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Millennium Park, Chicago, IL"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11831", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I want to head to the Burj Al Arab in Dubai.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Burj Al Arab, Dubai"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11832", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Can you find the best route to the Pyramids of Giza in Egypt?", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Pyramids of Giza, Egypt"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11833", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I would like to travel to the Anne Frank House in Amsterdam, Netherlands.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Anne Frank House, Amsterdam, Netherlands"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11834", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Help me get directions to the Great Wall at Badaling.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Great Wall at Badaling"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11835", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Begin navigation to the Roman Forum in Rome.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Roman Forum, Rome"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11836", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Please launch the maps app and guide me to the Acropolis of Athens.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Acropolis of Athens"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11837", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Can you start route guidance to the Palace of Versailles in France?", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Palace of Versailles, France"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11838", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Plot a course for the Moai statues on Easter Island.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Moai statues, Easter Island"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11839", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "I need to navigate to Chichen Itza in Mexico.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Chichen Itza, Mexico"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11840", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Apply navigation to the Gateway Arch in St. Louis, MO.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Gateway Arch, St. Louis, MO"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11841", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Find a route to the Helsinki Cathedral in Finland.", "answer": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Helsinki Cathedral, Finland"}}, "unique_idx": "ACTION_NAVIGATE_TO_LOCATION-11842", "tools": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"]}]}
{"query": "Show me the details for the calendar event at content://calender/event/1.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/1"}}, "unique_idx": "ACTION_VIEW_EVENT-11843"}
{"query": "I would like to view the event details from the calendar using the URI content://calender/event/42.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/42"}}, "unique_idx": "ACTION_VIEW_EVENT-11844"}
{"query": "Open the event with the URI content://calender/event/12 so I can check its meeting information.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/12"}}, "unique_idx": "ACTION_VIEW_EVENT-11845"}
{"query": "Could you display the details of the calendar event identified as content://calender/event/23?", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/23"}}, "unique_idx": "ACTION_VIEW_EVENT-11846"}
{"query": "Please fetch the meeting details from my calendar event at content://calender/event/88.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/88"}}, "unique_idx": "ACTION_VIEW_EVENT-11847"}
{"query": "Retrieve information for the calendar event with content URI content://calender/event/17.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/17"}}, "unique_idx": "ACTION_VIEW_EVENT-11848"}
{"query": "I need to see the specifics of my event; open the calendar entry using content://calender/event/105.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/105"}}, "unique_idx": "ACTION_VIEW_EVENT-11849"}
{"query": "Access the calendar event details for content://calender/event/3 so I can review the schedule.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/3"}}, "unique_idx": "ACTION_VIEW_EVENT-11850"}
{"query": "Can you access my event using the URI content://calender/event/33? I need to check the details.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/33"}}, "unique_idx": "ACTION_VIEW_EVENT-11851"}
{"query": "Please open the calendar event 'content://calender/event/77' so I can see its details.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/77"}}, "unique_idx": "ACTION_VIEW_EVENT-11852"}
{"query": "I require a look at the event detail for the calendar entry at content://calender/event/37.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/37"}}, "unique_idx": "ACTION_VIEW_EVENT-11853"}
{"query": "Find and show my event scheduled with URI content://calender/event/99.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/99"}}, "unique_idx": "ACTION_VIEW_EVENT-11854"}
{"query": "I want to inspect the calendar event details for content://calender/event/5.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/5"}}, "unique_idx": "ACTION_VIEW_EVENT-11855"}
{"query": "Please fetch and display all details of the event located at content://calender/event/67.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/67"}}, "unique_idx": "ACTION_VIEW_EVENT-11856"}
{"query": "Can you show me what’s scheduled for the event with content URI content://calender/event/11?", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/11"}}, "unique_idx": "ACTION_VIEW_EVENT-11857"}
{"query": "Can you show me the calendar event details for content://calender/event/101?", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/101"}}, "unique_idx": "ACTION_VIEW_EVENT-11858"}
{"query": "View details of the event on my calendar at content://calender/event/102.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/102"}}, "unique_idx": "ACTION_VIEW_EVENT-11859"}
{"query": "I need to see the event from content://calender/event/103.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/103"}}, "unique_idx": "ACTION_VIEW_EVENT-11860"}
{"query": "Please display the calendar event details for content://calender/event/104.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/104"}}, "unique_idx": "ACTION_VIEW_EVENT-11861"}
{"query": "Access the event details at content://calender/event/105 on my calendar.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/105"}}, "unique_idx": "ACTION_VIEW_EVENT-11862"}
{"query": "What's the schedule for the calendar event at content://calender/event/106?", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/106"}}, "unique_idx": "ACTION_VIEW_EVENT-11863"}
{"query": "Retrieve the meeting information from my calendar using content://calender/event/107.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/107"}}, "unique_idx": "ACTION_VIEW_EVENT-11864"}
{"query": "Show event details at content://calender/event/108 please.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/108"}}, "unique_idx": "ACTION_VIEW_EVENT-11865"}
{"query": "Display the information for event content://calender/event/112 in my calendar.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/112"}}, "unique_idx": "ACTION_VIEW_EVENT-11866"}
{"query": "Could you view the calendar event at content://calender/event/113 for me?", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/113"}}, "unique_idx": "ACTION_VIEW_EVENT-11867"}
{"query": "I need to review the event at content://calender/event/114, please open it.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/114"}}, "unique_idx": "ACTION_VIEW_EVENT-11868"}
{"query": "Access event details for the entry at content://calender/event/115.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/115"}}, "unique_idx": "ACTION_VIEW_EVENT-11869"}
{"query": "Fetch the schedule of the meeting with URI content://calender/event/116.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/116"}}, "unique_idx": "ACTION_VIEW_EVENT-11870"}
{"query": "I would like to check out event information from content://calender/event/118.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/118"}}, "unique_idx": "ACTION_VIEW_EVENT-11871"}
{"query": "Get me the details for event content://calender/event/120 on the calendar.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/120"}}, "unique_idx": "ACTION_VIEW_EVENT-11872"}
{"query": "Let me view the event summary available at content://calender/event/121.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/121"}}, "unique_idx": "ACTION_VIEW_EVENT-11873"}
{"query": "Please open up the details for the meeting at content://calender/event/122.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/122"}}, "unique_idx": "ACTION_VIEW_EVENT-11874"}
{"query": "Retrieve the event description at content://calender/event/123 from my calendar.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/123"}}, "unique_idx": "ACTION_VIEW_EVENT-11875"}
{"query": "Display the calendar entry's details corresponding to content://calender/event/124.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/124"}}, "unique_idx": "ACTION_VIEW_EVENT-11876"}
{"query": "I need to look at the details for the calendar event with ID at content://calender/event/125.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/125"}}, "unique_idx": "ACTION_VIEW_EVENT-11877"}
{"query": "Show the specifics for content://calender/event/126 from my calendar schedule.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/126"}}, "unique_idx": "ACTION_VIEW_EVENT-11878"}
{"query": "Can you fetch the details for my calendar event at content://calender/event/127?", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/127"}}, "unique_idx": "ACTION_VIEW_EVENT-11879"}
{"query": "I want to see the particulars of the event at content://calender/event/128.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/128"}}, "unique_idx": "ACTION_VIEW_EVENT-11880"}
{"query": "Get detailed info for the calendar event with event URI content://calender/event/129.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/129"}}, "unique_idx": "ACTION_VIEW_EVENT-11881"}
{"query": "Please reveal the information for content://calender/event/130 from my schedule.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/130"}}, "unique_idx": "ACTION_VIEW_EVENT-11882"}
{"query": "I require the details from the calendar event URI content://calender/event/131.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/131"}}, "unique_idx": "ACTION_VIEW_EVENT-11883"}
{"query": "Access the calendar meeting details located at content://calender/event/132.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/132"}}, "unique_idx": "ACTION_VIEW_EVENT-11884"}
{"query": "Open up the event summary for content://calender/event/133 for me.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/133"}}, "unique_idx": "ACTION_VIEW_EVENT-11885"}
{"query": "Please view the calendar event at content://calender/event/135 and provide the details.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/135"}}, "unique_idx": "ACTION_VIEW_EVENT-11886"}
{"query": "Show me what's scheduled in content://calender/event/136.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/136"}}, "unique_idx": "ACTION_VIEW_EVENT-11887"}
{"query": "Fetch the information for calendar entry content://calender/event/137.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/137"}}, "unique_idx": "ACTION_VIEW_EVENT-11888"}
{"query": "I want to review the calendar event using the URI content://calender/event/138.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/138"}}, "unique_idx": "ACTION_VIEW_EVENT-11889"}
{"query": "Can you open content://calender/event/140 for a quick review of the event details?", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/140"}}, "unique_idx": "ACTION_VIEW_EVENT-11890"}
{"query": "Open the calendar event at content://calender/event/20 so I can see its schedule.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/20"}}, "unique_idx": "ACTION_VIEW_EVENT-11891"}
{"query": "Retrieve event details from content://calender/event/30.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/30"}}, "unique_idx": "ACTION_VIEW_EVENT-11892"}
{"query": "I want to view the details of my meeting. The event URI is content://calender/event/40.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/40"}}, "unique_idx": "ACTION_VIEW_EVENT-11893"}
{"query": "Kindly fetch the meeting data for content://calender/event/60.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/60"}}, "unique_idx": "ACTION_VIEW_EVENT-11894"}
{"query": "I need info on the event recorded at content://calender/event/100.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/100"}}, "unique_idx": "ACTION_VIEW_EVENT-11895"}
{"query": "Fetch the specifics for the appointment at content://calender/event/110.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/110"}}, "unique_idx": "ACTION_VIEW_EVENT-11896"}
{"query": "Can you let me see what's scheduled in content://calender/event/130?", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/130"}}, "unique_idx": "ACTION_VIEW_EVENT-11897"}
{"query": "I would appreciate it if you could reveal the details of content://calender/event/140.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/140"}}, "unique_idx": "ACTION_VIEW_EVENT-11898"}
{"query": "Please show me my scheduled event data from content://calender/event/180.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/180"}}, "unique_idx": "ACTION_VIEW_EVENT-11899"}
{"query": "I want to inspect the details of the meeting on content://calender/event/190.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/190"}}, "unique_idx": "ACTION_VIEW_EVENT-11900"}
{"query": "Can you open and display the scheduled event's information from content://calender/event/200?", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/200"}}, "unique_idx": "ACTION_VIEW_EVENT-11901"}
{"query": "I require the full details of my calendar event at content://calender/event/210.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/210"}}, "unique_idx": "ACTION_VIEW_EVENT-11902"}
{"query": "Show me what is on display for the event at content://calender/event/220.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/220"}}, "unique_idx": "ACTION_VIEW_EVENT-11903"}
{"query": "Please fetch the calendar entry details from content://calender/event/230.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/230"}}, "unique_idx": "ACTION_VIEW_EVENT-11904"}
{"query": "Can you open content://calender/event/240 to review the meeting specifics?", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/240"}}, "unique_idx": "ACTION_VIEW_EVENT-11905"}
{"query": "I need to access the calendar event summary at content://calender/event/250.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/250"}}, "unique_idx": "ACTION_VIEW_EVENT-11906"}
{"query": "Query the details for the event found at content://calender/event/260.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/260"}}, "unique_idx": "ACTION_VIEW_EVENT-11907"}
{"query": "Assist me by opening the calendar event details for content://calender/event/270.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/270"}}, "unique_idx": "ACTION_VIEW_EVENT-11908"}
{"query": "I want to view all calendar event information from content://calender/event/280.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/280"}}, "unique_idx": "ACTION_VIEW_EVENT-11909"}
{"query": "Expose the event particulars at content://calender/event/290.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/290"}}, "unique_idx": "ACTION_VIEW_EVENT-11910"}
{"query": "Could you show me the specifics for my event located at content://calender/event/300?", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/300"}}, "unique_idx": "ACTION_VIEW_EVENT-11911"}
{"query": "I would like to observe the details of the appointment at content://calender/event/310.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/310"}}, "unique_idx": "ACTION_VIEW_EVENT-11912"}
{"query": "Retrieve and display the content for the scheduled event at content://calender/event/320.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/320"}}, "unique_idx": "ACTION_VIEW_EVENT-11913"}
{"query": "See the meeting overview at content://calender/event/330, please.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/330"}}, "unique_idx": "ACTION_VIEW_EVENT-11914"}
{"query": "Present the details of content://calender/event/340.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/340"}}, "unique_idx": "ACTION_VIEW_EVENT-11915"}
{"query": "Kindly bring up the information of the event at content://calender/event/350 for review.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/350"}}, "unique_idx": "ACTION_VIEW_EVENT-11916"}
{"query": "Access the meeting details laid out in content://calender/event/360.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/360"}}, "unique_idx": "ACTION_VIEW_EVENT-11917"}
{"query": "Can you show the full information of the event at content://calender/event/370?", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/370"}}, "unique_idx": "ACTION_VIEW_EVENT-11918"}
{"query": "I wish to inspect the details of an event; the URI is content://calender/event/380.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/380"}}, "unique_idx": "ACTION_VIEW_EVENT-11919"}
{"query": "Open up the scheduled meeting details using content://calender/event/400.", "answer": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/400"}}, "unique_idx": "ACTION_VIEW_EVENT-11920"}
{"query": "Hey, can you show me the active timers right now?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11921"}
{"query": "I need a list of all timers that are currently running. Please display them.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11922"}
{"query": "Could you please reveal which timers are active at this moment?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11923"}
{"query": "Show all my active timers.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11924"}
{"query": "Display the currently active timer list for me.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11925"}
{"query": "Would you mind showing the active timers?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11926"}
{"query": "Fetch the list of timers that are still running.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11927"}
{"query": "List all the timers that are in progress.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11928"}
{"query": "I want to check which timers are active. Show me the current list.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11929"}
{"query": "Please display my active timers.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11930"}
{"query": "Could you present the list of running timers?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11931"}
{"query": "Let me see all the timers that are currently set off.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11932"}
{"query": "What are the active timers? I need to review them.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11933"}
{"query": "Display currently active timers so I can check my schedule.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11934"}
{"query": "Get me the list of active timers, please.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11935"}
{"query": "Fetch the current active timer list.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11936"}
{"query": "Display the timers that are running right now.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11937"}
{"query": "Show me the timers that haven't been stopped yet.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11938"}
{"query": "Give me an overview of timers that are active currently.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11939"}
{"query": "What timers are presently active?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11940"}
{"query": "Reveal the timers that are counting down right now.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11941"}
{"query": "I need to see all ongoing timers.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11942"}
{"query": "Can you list the timers that are currently in action?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11943"}
{"query": "Find all timers that are still in process.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11944"}
{"query": "Present the active timers on my device.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11945"}
{"query": "Which timers have been started and haven't finished?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11946"}
{"query": "Exhibit the timers that are currently set and running.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11947"}
{"query": "I require the display of all active countdown timers.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11948"}
{"query": "Kindly show me the timers that are active at this moment.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11949"}
{"query": "Could you print out the timers that are in operation?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11950"}
{"query": "Would you display my timers that are still ticking?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11951"}
{"query": "Fetch and show all timers that are active.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11952"}
{"query": "Hey, can you list the timers that are active now?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11953"}
{"query": "Display running timers right away.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11954"}
{"query": "Let me view the active timer schedule.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11955"}
{"query": "I want to monitor my current timers; show them.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11956"}
{"query": "Please provide me with the active timers set on my device.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11957"}
{"query": "Could you check for and display all ongoing timers?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11958"}
{"query": "Show me the timers that are counting down.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11959"}
{"query": "List the timers that haven't expired yet.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11960"}
{"query": "I'd like to see which timers are still operational.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11961"}
{"query": "Give me a rundown of all timers that are active.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11962"}
{"query": "Please list the timers that are currently engaged.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11963"}
{"query": "What active timers are on going?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11964"}
{"query": "I need a snapshot of all running timers.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11965"}
{"query": "Display the timers that are currently on schedule.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11966"}
{"query": "Let me know which timers are up and running.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11967"}
{"query": "Could you show me all the timers that are running right now?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11968"}
{"query": "I need to see the active timers currently set on my device.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11969"}
{"query": "Please list any timers that are currently in operation.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11970"}
{"query": "Display all currently active timers for me.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11971"}
{"query": "Show me which timers are still active right now.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11972"}
{"query": "What timers do I have running at the moment?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11973"}
{"query": "Find the timers that are still active in my schedule.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11974"}
{"query": "Can you provide a list of all active timers?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11975"}
{"query": "Retrieve the active timers that are currently set.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11976"}
{"query": "Please reveal the timers that are in progress now.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11977"}
{"query": "Which timers are currently ticking down?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11978"}
{"query": "I would like to see the timers that are active right now.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11979"}
{"query": "Give me a rundown of all timers running at this moment.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11980"}
{"query": "What are the current timers I have set up?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11981"}
{"query": "List the timers that have been activated and are still counting.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11982"}
{"query": "Please provide the list of timers that haven't finished yet.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11983"}
{"query": "Can you display the active countdown timers for me?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11984"}
{"query": "What timers are currently counting down on my device?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11985"}
{"query": "I need a list of all timers that are in progress right now.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11986"}
{"query": "Show active timers please.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11987"}
{"query": "Would it be possible to see which timers are still active?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11988"}
{"query": "Display a summary of my currently running timers.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11989"}
{"query": "I want to view all the timers that are active at this time.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11990"}
{"query": "Could you list my active timers?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11991"}
{"query": "Show me the currently operational timers.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11992"}
{"query": "Provide all timers that are active at the moment.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11993"}
{"query": "I need details on the timers that haven't finished yet.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11994"}
{"query": "Show me any timer that is still running at this moment.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11995"}
{"query": "Could you display an inventory of active timers?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11996"}
{"query": "What timers are counting down right now?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11997"}
{"query": "Show me the active timers list.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11998"}
{"query": "I am interested in seeing the timers that are currently on.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-11999"}
{"query": "Could you provide a snapshot of all the timers active right now?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-12000"}
{"query": "List out all timers that are presently set and running.", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-12001"}
{"query": "I need to check what timers are still ticking. Could you display them?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-12002"}
{"query": "Could you help me see which timers are operational right now?", "answer": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}, "unique_idx": "ACTION_SHOW_TIMERS-12003"}
{"query": "Could you show me the recent call log on my phone?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12004"}
{"query": "I need to check my call history. Please pull up the recent calls list.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12005"}
{"query": "Please display all the recent incoming, outgoing, and missed calls from my device.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12006"}
{"query": "Can you retrieve my phone's call log? I'm looking for the history of calls made and received.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12007"}
{"query": "Show me the calls I've had today, including missed and answered calls, using the call log.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12008"}
{"query": "I want to see a list of all my recent phone calls. Can you access the call history?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12009"}
{"query": "Fetch my call history details, please. I need to review my recent call logs.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12010"}
{"query": "Retrieve the log of recent calls on my device. I want to see who I've talked to recently.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12011"}
{"query": "Can you pull up a summary of my recent call activities, including missed and outgoing calls?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12012"}
{"query": "Please get my phone’s call log so that I can check the call times and callers.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12013"}
{"query": "I would like to view the recent call log on my smartphone. Could you help with that?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12014"}
{"query": "Show my recent call activities like missed, received, or dialed calls from the call log.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12015"}
{"query": "Could you please access the call history data to show who I have contacted in the last few days?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12016"}
{"query": "I'm curious to see my recent calls. Can you load the call log with all my call entries?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12017"}
{"query": "Access the call log on my phone to display the list of recent incoming and outgoing calls.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12018"}
{"query": "Could you pull up my call log so I can see all my recent calls?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12019"}
{"query": "I need to review my recent phone calls. Show me the call history, please.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12020"}
{"query": "Please display the list of all the calls I've made or received recently.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12021"}
{"query": "Show me the recent entries in my call log.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12022"}
{"query": "Access my phone call history so I can review the incoming, outgoing, and missed calls.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12023"}
{"query": "I want to see who I've talked to in the last few calls. Can you get the recent call history?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12024"}
{"query": "Retrieve the call log from my device to check my latest call records.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12025"}
{"query": "Could you access the phone's call history for me?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12026"}
{"query": "I'd like to get a rundown of my most recent calls. Please display the call log.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12027"}
{"query": "Show my call log so I can see details about my incoming, outgoing, and missed calls.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12028"}
{"query": "I want to inspect the recent call details on my phone. Can you display the call history?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12029"}
{"query": "Could you fetch my recent call records from the phone log?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12030"}
{"query": "Display all my recent calls including who called and when.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12031"}
{"query": "Can you list my recent phone call activities?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12032"}
{"query": "I would like to see a summary of my recent call activity. Please show me the call log.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12033"}
{"query": "Get me the recent call log with all incoming and outgoing call details.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12034"}
{"query": "Pull up my call history, so I can check who I've been in contact with.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12035"}
{"query": "Let me check my recent call history. Display the list of my recent calls.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12036"}
{"query": "I need to see who I missed calls from as well as who I called back. Access my call log.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12037"}
{"query": "Can you fetch and show my phone's call history?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12038"}
{"query": "Display my recent calls log including all contact details.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12039"}
{"query": "I wish to review my call history. Can you show a full list of recent calls?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12040"}
{"query": "Open my call log and show all calls made, received, or missed recently.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12041"}
{"query": "I need a list of phone calls of mine. Please bring up the recent call log.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12042"}
{"query": "Help me check the latest details from my call log.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12043"}
{"query": "Review my recent call activities by displaying my call log.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12044"}
{"query": "Could you provide access to my phone's recent call list?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12045"}
{"query": "I would like to see all the calls I've interacted with lately. Can you show my recent call history?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12046"}
{"query": "Bring up the history of my recent calls so I can check who called me.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12047"}
{"query": "I need to view the call log on my phone to review recent communications.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12048"}
{"query": "Show me a complete list of my recent telephone interactions from the call log.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12049"}
{"query": "Can you access the record of my recent phone calls?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12050"}
{"query": "I want to see the phone call records from the past days. Show my recent call log please.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12051"}
{"query": "Access my mobile's call history to provide me with details on recent incoming and outgoing calls.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12052"}
{"query": "I need to check who I've been in contact with recently. Show the recent call records on my phone.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12053"}
{"query": "Can you retrieve the call log that contains my last few calls?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12054"}
{"query": "Display the list of lost, answered, and missed calls from my recent call history.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12055"}
{"query": "Get the latest list of calls recorded on my device, including missed and dialed calls.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12056"}
{"query": "I desire to view my call records. Can you open and display my recent call log?", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12057"}
{"query": "Show my recent call details from the call log so that I can see who I've contacted.", "answer": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}, "unique_idx": "ACTION_VIEW_CALL_LOG-12058"}
{"query": "Could you display the recently sent emails from my sent folder?", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12059"}
{"query": "Show me the list of emails I have sent out lately.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12060"}
{"query": "I want to review all my sent emails along with the recipients and subjects. Can you do that?", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12061"}
{"query": "Retrieve my sent messages, please.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12062"}
{"query": "List the emails I've dispatched recently.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12063"}
{"query": "I need a quick view of my sent emails. Show me the details.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12064"}
{"query": "Display the sent emails folder so I can check which emails I sent out.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12065"}
{"query": "Please bring up the list of most recently sent emails from my account.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12066"}
{"query": "I would like to see my outgoing emails along with their subjects and recipients.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12067"}
{"query": "Can you show my sent email history?", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12068"}
{"query": "Get me a summary of the emails I've recently sent.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12069"}
{"query": "Open my sent mails folder and list all the emails that were sent recently.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12070"}
{"query": "I need to check the status of my sent emails, including the subject lines and recipients. Please show them.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12071"}
{"query": "Fetch the details of emails I've sent out, such as the recipient addresses and subjects.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12072"}
{"query": "Would you please list the emails I've dispatched recently from my sent folder?", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12073"}
{"query": "Could you display my recent sent emails?", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12074"}
{"query": "I want to see my latest sent messages. Open my sent folder.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12075"}
{"query": "Display the sent email folder so I can review my recent communications.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12076"}
{"query": "Retrieve a summary of the emails I have sent in the past few days.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12077"}
{"query": "List my outgoing emails from my sent items.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12078"}
{"query": "Please bring up the sent messages so I can check who I emailed.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12079"}
{"query": "I need to check my sent mails folder. Show me the recent emails I've sent out.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12080"}
{"query": "Please open my sent items and display all the emails I dispatched lately.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12081"}
{"query": "Show me the current list of emails I sent recently from my account.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12082"}
{"query": "Display my most recently sent messages, along with their recipients.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12083"}
{"query": "I would like to review my sent emails history. Can you display them?", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12084"}
{"query": "Access my sent folder and list out all recent emails.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12085"}
{"query": "Could you pull up my sent mail log to see the messages I've sent?", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12086"}
{"query": "Show my sent messages so I can check the subjects and recipients.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12087"}
{"query": "Open the folder that contains my outgoing emails.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12088"}
{"query": "I'm interested in viewing the emails I recently sent. Please list them.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12089"}
{"query": "Display the details of my sent emails so far.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12090"}
{"query": "Show me the emails from my sent folder that were dispatched recently.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12091"}
{"query": "Could you reveal my latest sent email chain?", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12092"}
{"query": "Kindly display my sent mails history for the recent days.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12093"}
{"query": "I want to audit my sent emails. Please bring up the recent ones.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12094"}
{"query": "Could you list down all the messages I’ve sent lately?", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12095"}
{"query": "Access my sent emails so I can double-check the messages that left my outbox.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12096"}
{"query": "I need to verify all emails sent out from my account. Please open my sent folder.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12097"}
{"query": "Can you show my outbox emails, particularly the ones sent recently?", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12098"}
{"query": "Reveal all recent communications that I have sent via email.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12099"}
{"query": "Display my sent mail items so I can check my outgoing messages.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12100"}
{"query": "I need to check which emails I have sent out recently, please show me the sent messages.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12101"}
{"query": "Present the recent emails from my sent folder for my review.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12102"}
{"query": "Could you open my sent emails and list the most recent ones?", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12103"}
{"query": "Please show a current list of emails that have been sent from my account.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12104"}
{"query": "Let me check my email history; display all emails I've sent recently.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12105"}
{"query": "I want to review the contents of my sent mail folder, please list the recent mails.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12106"}
{"query": "Show me my sent emails; I need to verify the subjects and recipients of the recent messages.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12107"}
{"query": "Get me a quick glance at my sent emails to ensure they were delivered.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12108"}
{"query": "Could you open the sent messages folder and show me my recent outbound emails?", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12109"}
{"query": "Please retrieve my list of dispatched emails from my sent folder.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12110"}
{"query": "I would like to quickly check the emails I've sent out. Open my sent emails please.", "answer": {"plan": "ACTION_VIEW_SENT_EMAILS", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_EMAILS-12111"}
{"query": "Can you show me a list of the text messages I've sent recently?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12112"}
{"query": "Please display my sent SMS and MMS messages with their recipients and snippets.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12113"}
{"query": "I need to view all my outgoing texts from the past few days. Could you do that?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12114"}
{"query": "Retrieve the list of messages I have sent out, including a preview of each one.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12115"}
{"query": "Show me my recent sent text logs, please.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12116"}
{"query": "I want to check my sent messages. Can you list them along with some details?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12117"}
{"query": "Display the sent message history that includes recipients and message snippets.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12118"}
{"query": "Could you fetch my recently sent texts along with the names and numbers of those I sent them to?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12119"}
{"query": "List all of my sent SMS and MMS messages, including a short snippet for each.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12120"}
{"query": "I would like to see a log of all the messages I've sent. Please show me the details.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12121"}
{"query": "Show my outgoing texts, I want to review their contents and recipients.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12122"}
{"query": "Could you retrieve and display the list of text messages I have sent recently?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12123"}
{"query": "I need to check the snippets of the messages I sent out. Can you provide the sent messages log?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12124"}
{"query": "Please pull up the record of all messages I sent, including recipient details and message previews.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12125"}
{"query": "Show me the sent text logs with all the details like the recipient and a part of the content.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12126"}
{"query": "Give me a rundown of my sent messages with bits of text from each one.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12127"}
{"query": "I would like to see the log of any texts I've sent out, with recipient info and a snippet of what I wrote.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12128"}
{"query": "Provide me with a history of the texts I've sent, including a summary of each message.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12129"}
{"query": "Can you retrieve the list of all messages I've recently sent populated with recipient names?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12130"}
{"query": "Retrieve my outgoing text message details, showing who I sent them to and some content preview.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12131"}
{"query": "I need to review the texts I've dispatched. Show me the list with snippets and contacts.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12132"}
{"query": "Show the recent log of text and multimedia messages I have sent, please.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12133"}
{"query": "I’d appreciate a view of the outgoing text messages including message excerpts.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12134"}
{"query": "Pull up the details of my sent messages with recipients and brief excerpts if possible.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12135"}
{"query": "Could you display the list of sent texts along with small previews of each message?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12136"}
{"query": "I want to check on all the SMS and MMS messages I’ve sent, including the recipients and message fragments.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12137"}
{"query": "List my outgoing text messages with a recipient and snippet summary.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12138"}
{"query": "Give me the details of my sent texts, just showing recipients and short message blurbs.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12139"}
{"query": "Please show the messages I've sent along with recipients and preview texts.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12140"}
{"query": "I'm interested in my sent message history; please display it with snippets and recipient info.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12141"}
{"query": "I need to see all the texts I've sent along with the names of those messages went to and message excerpts.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12142"}
{"query": "Retrieve my latest dispatched text messages, including SMS and MMS, with some message preview.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12143"}
{"query": "Display a quick log of what texts I sent recently, including a preview and recipient information.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12144"}
{"query": "Show my sent message list with recipient details and short content samples.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12145"}
{"query": "Can you bring up the record of texts I sent with recipient information and a few words from each?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12146"}
{"query": "I need a glimpse into the messages I've sent per SMS logs, with names and a snippet of each.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12147"}
{"query": "Present a log of my outbound texts, including who I contacted and a piece of each message.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12148"}
{"query": "Do you mind showing me the collection of sent messages with recipient details and text previews?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12149"}
{"query": "Can you display the recent outbound SMS and MMS messages along with a preview of each message?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12150"}
{"query": "I would like to review my sent texts list which includes recipient names and message snippets.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12151"}
{"query": "Please retrieve the list of messages I sent to verify their content previews and corresponding recipients.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12152"}
{"query": "Show the detailed log of my sent texts including contact details and the message snippet.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12153"}
{"query": "Fetch all the sent messages with the recipient's name and a short outline of each message.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12154"}
{"query": "Could you help me check my recent message activity by providing the sent message record?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12155"}
{"query": "I'd like to see recent outbound messages, please include who they were sent to and a message excerpt.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12156"}
{"query": "Display the history of SMS and MMS messages I sent, showing the recipient info and a snippet of each.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12157"}
{"query": "Would you please list my sent messages along with a hint of their content and recipient details?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12158"}
{"query": "Can you show me all the texts I've sent recently, including the recipient names and a snippet of each?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12159"}
{"query": "I would like to review my outgoing SMS and MMS messages along with a preview of each message.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12160"}
{"query": "Please display a list of sent messages with the names of the people I sent them to and a small excerpt.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12161"}
{"query": "Show me a rundown of my sent texts and multimedia messages, including who they were sent to and part of the message.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12162"}
{"query": "I need an overview of all sent SMS/MMS messages with recipient details and text previews.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12163"}
{"query": "List out the texts I have sent recently along with who got them and a brief message snippet.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12164"}
{"query": "Can you pull up my sent text log including recipient information and a snippet of content?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12165"}
{"query": "I want to see my list of sent messages with details of to whom they were sent, plus a teaser of the text.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12166"}
{"query": "Could you quickly show my SMS and MMS outbound history with recipient names and a snippet from each message?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12167"}
{"query": "Display my sent messages, including the recipient's name and a preview of what I wrote.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12168"}
{"query": "I need to check my outgoing texts. Please include both the names of the contacts and a short excerpt from each message.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12169"}
{"query": "Show me the details of the messages I've sent, such as who received them and a snippet of the text.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12170"}
{"query": "Need a summary of my last few sent SMS/MMS messages with recipient info and a brief piece of the text.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12171"}
{"query": "Kindly fetch my sent text records, including who they were addressed to and a little part of the contents.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12172"}
{"query": "Retrieve my sent message logs for SMS and MMS showing recipient names and short excerpts from each.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12173"}
{"query": "I want to review the texts I've sent, including recipient details and snippet previews. Please show them.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12174"}
{"query": "Get me the list of my recently sent messages along with who received them and a glimpse of the message text.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12175"}
{"query": "I would appreciate it if you could list out my sent texts, detailing recipients and portions of each message.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12176"}
{"query": "Could you provide a view of my outbound messages with recipient names and a snippet from the messages?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12177"}
{"query": "Please show my recent SMS and MMS that I sent, including a preview of the messages and contact details.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12178"}
{"query": "I need access to my text message history where the messages were sent out, along with who received them and a short text preview.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12179"}
{"query": "Show me all my dispatched texts with each recipient's name and an excerpt of the content.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12180"}
{"query": "I'm looking for details on the messages I've sent - include the contact names and a small snippet from each.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12181"}
{"query": "List my sent communication logs with numbers or names of recipients and a brief portion of each message.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12182"}
{"query": "Display the history of my outbound SMS/MMS messages along with a snippet of what I wrote and to whom it was sent.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12183"}
{"query": "Could you fetch my sent SMS messages and include details such as recipient contact and a preview of each text?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12184"}
{"query": "Retrieve my recently sent texts with a small preview of the message and the details of who got them.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12185"}
{"query": "I would like to inspect my list of sent messages, showing text snippets and the recipient's information.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12186"}
{"query": "Fetch all my sent messages, ensuring that I see who they were sent to along with a short excerpt of each.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12187"}
{"query": "Display the texts & multimedia messages I’ve sent out along with limited text previews and recipient details.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12188"}
{"query": "I need to see my outbound SMS records including a brief snippet of each message and to whom it was sent.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12189"}
{"query": "Please pull up a quick list of all my sent texts with contact names and short previews of what was written.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12190"}
{"query": "Could you list for me the messages I've sent recently, along with recipient names and a piece of the message?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12191"}
{"query": "I wish to review my sent SMS/MMS messages — please include the destination contacts and a snippet from each message.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12192"}
{"query": "Show me my history for sent texts. I want to see both who received them and a snippet from each message.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12193"}
{"query": "I need a list of my sent text logs with the names of the recipients and some part of the message content.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12194"}
{"query": "Could you provide an overview of the texts I have sent, including the recipients' details and a snippet of each?", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12195"}
{"query": "List out my recent outgoing messages, showing both who I sent them to and a fragment of the text.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12196"}
{"query": "I want to see a summary of my sent SMS and MMS messages, complete with recipient details and a short preview of each.", "answer": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}, "unique_idx": "ACTION_VIEW_SENT_MESSAGES-12197"}
{"query": "Show me my recent browsing history.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12198"}
{"query": "Could you display the list of webpages I've visited recently?", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12199"}
{"query": "I need to see my web history, can you pull up the pages I've visited?", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12200"}
{"query": "Retrieve my recent internet activity log.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12201"}
{"query": "Please show my recent browsing activity including visited page titles.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12202"}
{"query": "Get the record of my recent web page visits.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12203"}
{"query": "Display the list of websites that I have recently checked out.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12204"}
{"query": "I want to check the pages I've browsed lately. Could you show my web history?", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12205"}
{"query": "Bring up my browsing history from the last session.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12206"}
{"query": "List out my recent web usage, including URLs and titles.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12207"}
{"query": "What's my current web history? I need a recap of my recent online visits.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12208"}
{"query": "Afficher mon historique de navigation récent s'il vous plaît.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12209"}
{"query": "Muéstrame el historial de navegación que tuve recientemente.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12210"}
{"query": "Покажи, пожалуйста, список последних посещённых мною веб-страниц.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12211"}
{"query": "I want a breakdown of my internet browsing record from the past few hours, please.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12212"}
{"query": "Can you fetch my last visited websites from my browser?", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12213"}
{"query": "I need to check the websites I went to recently. Please retrieve my browsing activity.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12214"}
{"query": "What webpages have I visited in the last few hours? Please show my browsing history.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12215"}
{"query": "Please list all the pages I've recently accessed online.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12216"}
{"query": "I want to review my browsing record. Can you display my recent web session?", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12217"}
{"query": "Access my browsing record from this afternoon.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12218"}
{"query": "Could you show me all the pages I viewed just now?", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12219"}
{"query": "I'd like to see a summary of my recently visited websites. Please load my web history.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12220"}
{"query": "Can you reveal my history of online pages from today?", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12221"}
{"query": "I want a detailed list of my recent online activities. Show my browsing history.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12222"}
{"query": "Please open my web history record to check the recently visited pages.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12223"}
{"query": "Display my browser history so I can see what sites I visited a short while ago.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12224"}
{"query": "Review my latest internet activity, please. I need to know which websites I just looked at.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12225"}
{"query": "Could you bring up my recent browsing sessions?", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12226"}
{"query": "Kindly display the websites I have visited in the past few minutes.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12227"}
{"query": "I need to see the trace of my online navigation; please show my web history.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12228"}
{"query": "Show the sites I checked out on the internet recently.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12229"}
{"query": "Could you please reveal my browsing log?", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12230"}
{"query": "Dame mi historial de navegación reciente.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12231"}
{"query": "Zeig mir meinen kürzlichen Browserverlauf.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12232"}
{"query": "Per favore mostra la mia cronologia web recente.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12233"}
{"query": "最近のウェブ閲覧履歴を表示してください。", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12234"}
{"query": "Просмотр моей недавней истории браузера, пожалуйста.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12235"}
{"query": "请显示我最近浏览网页的历史记录。", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12236"}
{"query": "Bana son tarayıcı geçmişimi gösterin, lütfen.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12237"}
{"query": "فضلا أظهر سجل التصفح الأخير الخاص بي.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12238"}
{"query": "I would like to see my web visit history from this week.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12239"}
{"query": "Please open my recent browsing record.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12240"}
{"query": "Could you show me my surfing log?", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12241"}
{"query": "Retrieve the list of websites I visited today.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12242"}
{"query": "I want to see a list of my recent online explorations; please display my browsing history.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12243"}
{"query": "Please load my internet history summary.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12244"}
{"query": "Tell me which sites I accessed in the last few hours by showing my web history.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12245"}
{"query": "Could you bring up my online navigation records?", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12246"}
{"query": "I want to check my recent read web pages.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12247"}
{"query": "Let me see the trace of my recent online activity.", "answer": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}, "unique_idx": "ACTION_VIEW_WEB_HISTORY-12248"}
{"query": "Could you please open my 'Road Trip' playlist so I can see what's inside?", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Road Trip"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12249"}
{"query": "Show me the tracks on the playlist named 'Workout Mix'.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Workout Mix"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12250"}
{"query": "I want to check the song list in my 'Chill Vibes' playlist. Open it please.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Chill Vibes"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12251"}
{"query": "Display the playlist that goes by 'Party Hits'.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Party Hits"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12252"}
{"query": "Can you pull up the 'Classic Rock' playlist on my music app?", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Classic Rock"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12253"}
{"query": "I need to review my 'Sleep Sounds' playlist. Please open it for me.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Sleep Sounds"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12254"}
{"query": "Please show me the songs from my playlist 'Jazz Essentials'.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Jazz Essentials"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12255"}
{"query": "Open the 'Indie Favourites' playlist so I can see its song lineup.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Indie Favourites"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12256"}
{"query": "What songs are listed in the playlist dubbed 'Summer Beats'? I'd like to see its content.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Summer Beats"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12257"}
{"query": "Bring up my 'Hip-Hop Classics' playlist and display the tracks available.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Hip-Hop Classics"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12258"}
{"query": "I wish to inspect the 'Acoustic Moods' playlist. Can you load it on my app?", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Acoustic Moods"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12259"}
{"query": "Kindly present the playlist 'Morning Boost' so I can check out its tunes.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Morning Boost"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12260"}
{"query": "Review the track list for my 'Evening Chill' playlist, please.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Evening Chill"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12261"}
{"query": "I'd like to view the songs in my playlist 'Electronic Drive'.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Electronic Drive"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12262"}
{"query": "Open my 'Romantic Ballads' playlist so I can reminisce about the old tunes.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Romantic Ballads"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12263"}
{"query": "Please display my 'Summer Vibes' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Summer Vibes"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12264"}
{"query": "Can you show me the 'Workout Mix' playlist?", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Workout Mix"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12265"}
{"query": "Load the 'Chill Out' playlist for me.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Chill Out"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12266"}
{"query": "I need to view my 'Focus Beats' playlist, please.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Focus Beats"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12267"}
{"query": "Take me to the 'Top Hits' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Top Hits"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12268"}
{"query": "Can you open the '90s Hits' playlist so I can see my songs?", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "90s Hits"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12269"}
{"query": "I would like to check out the 'Jazz Essentials' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Jazz Essentials"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12270"}
{"query": "Present my 'Dance Party' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Dance Party"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12271"}
{"query": "Fetch the 'Soul Sessions' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Soul Sessions"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12272"}
{"query": "Show my 'Reggae Rhythms' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Reggae Rhythms"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12273"}
{"query": "Access my 'Rock Anthems' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Rock Anthems"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12274"}
{"query": "Would you display the 'Alternative Beats' playlist?", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Alternative Beats"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12275"}
{"query": "I want to review the details of the 'Indie Discoveries' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Indie Discoveries"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12276"}
{"query": "Can you pull up the 'Lo-Fi Chill' playlist?", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Lo-Fi Chill"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12277"}
{"query": "Please load up the 'Classical Calm' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Classical Calm"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12278"}
{"query": "Bring forward my 'Country Roads' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Country Roads"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12279"}
{"query": "Display the contents of 'Electro Hits' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Electro Hits"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12280"}
{"query": "I need to see the tracklist for the 'Metal Mayhem' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Metal Mayhem"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12281"}
{"query": "Kindly present my 'Pop Essentials' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Pop Essentials"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12282"}
{"query": "Retrieve my 'Folk Tunes' playlist for review.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Folk Tunes"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12283"}
{"query": "Open the 'Latin Grooves' playlist and show me the tracks.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Latin Grooves"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12284"}
{"query": "I want to inspect the 'Indie Pop' playlist; can you help?", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Indie Pop"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12285"}
{"query": "Take a look at the 'Ambient Sounds' playlist, please.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Ambient Sounds"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12286"}
{"query": "Can you view the playlist named 'K-Pop Stars' for me?", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "K-Pop Stars"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12287"}
{"query": "Switch to my 'Hip-Hop Vibes' playlist and display its songs.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Hip-Hop Vibes"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12288"}
{"query": "I need you to open the playlist called 'Blues Collection'.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Blues Collection"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12289"}
{"query": "Show my 'Electro Swing' playlist on screen.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Electro Swing"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12290"}
{"query": "Please access the 'R&B Classics' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "R&B Classics"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12291"}
{"query": "I’d like to check out the 'Funk Hits' playlist. Can you open it?", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Funk Hits"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12292"}
{"query": "Kindly load the 'Old School Rap' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Old School Rap"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12293"}
{"query": "Display the songs from the playlist labeled 'Piano Moods'.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Piano Moods"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12294"}
{"query": "I want to browse my 'Feel Good' playlist; please open it.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Feel Good"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12295"}
{"query": "Open the 'Guitar Legends' playlist and show its details.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Guitar Legends"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12296"}
{"query": "Please bring up the 'Vintage Pop' playlist for my listening pleasure.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Vintage Pop"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12297"}
{"query": "Could you show me the 'Electronic Essentials' playlist on my device?", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Electronic Essentials"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12298"}
{"query": "I need to review the 'Indie Folk' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Indie Folk"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12299"}
{"query": "Please display the 'Summer Roadtrip' playlist.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Summer Roadtrip"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12300"}
{"query": "I wish to view my 'Workout Energy' playlist; kindly load it.", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Workout Energy"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12301"}
{"query": "Could you fetch the details of the 'Bedtime Lullabies' playlist for me?", "answer": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Bedtime Lullabies"}}, "unique_idx": "ACTION_VIEW_PLAYLIST-12302"}
{"query": "Can you show me the list of apps I've used recently?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12303"}
{"query": "I would like to view my recent applications. Please display them.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12304"}
{"query": "Could you list the most recent apps that were accessed on my device?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12305"}
{"query": "Show my recent apps usage details.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12306"}
{"query": "Retrieve the list of apps I recently opened.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12307"}
{"query": "Display all the applications I used most recently.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12308"}
{"query": "I need to browse through my recent app history. Can you help?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12309"}
{"query": "How can I check which apps I accessed in the last few minutes?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12310"}
{"query": "Please provide the list of applications that have been used recently on this device.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12311"}
{"query": "I want to see a record of recently opened apps on my phone.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12312"}
{"query": "Requesting a view of the recent applications list from my device.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12313"}
{"query": "List my recently used apps please.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12314"}
{"query": "Can you fetch the recently accessed applications on my device?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12315"}
{"query": "Display the apps that were opened last on my device.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12316"}
{"query": "I need to check the applications I've recently interacted with; show them to me.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12317"}
{"query": "Show me the recent apps on my phone.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12318"}
{"query": "Can you list out the apps I used most recently on this device?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12319"}
{"query": "What are the last applications I opened on my smartphone?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12320"}
{"query": "Give me a record of apps that I accessed recently.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12321"}
{"query": "I need to see which apps I used recently.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12322"}
{"query": "Display the list of apps I opened just now.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12323"}
{"query": "Kindly pull up the apps that have been recently used on this device.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12324"}
{"query": "Access the list of my latest run apps, please.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12325"}
{"query": "Get my recently used applications for me.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12326"}
{"query": "Reveal the apps that I have interacted with most recently.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12327"}
{"query": "I would like to view the recent applications I've launched.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12328"}
{"query": "Can you provide details of the last apps I used?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12329"}
{"query": "What apps have I opened in the last few moments?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12330"}
{"query": "I want to check my usage history—what are the recent apps?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12331"}
{"query": "Please show the apps I last interacted with on this device.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12332"}
{"query": "Where can I view my recent app activity?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12333"}
{"query": "List the applications I have run recently, please.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12334"}
{"query": "Bring up a list of my recent Android apps.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12335"}
{"query": "What are the recently opened apps on my system?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12336"}
{"query": "I need a rundown of the apps I’ve used most recently.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12337"}
{"query": "Could you fetch the list of apps that I've recently launched?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12338"}
{"query": "Show all the apps I interacted with in the last session.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12339"}
{"query": "Display the recent app log from my phone.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12340"}
{"query": "Retrieve my list of recently activated apps.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12341"}
{"query": "Can you open up the list of my most recently used applications?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12342"}
{"query": "Please list the apps that were accessed in the near past.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12343"}
{"query": "What are the apps that have been running lately?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12344"}
{"query": "I want to see the record of my recent app usage.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12345"}
{"query": "Display the log of apps I recently launched.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12346"}
{"query": "Fetch the recent app usage details for me.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12347"}
{"query": "Show me a summary of apps I've been using recently.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12348"}
{"query": "I would like to see all the apps I opened recently.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12349"}
{"query": "Can you provide a list of applications I've used in the last bit?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12350"}
{"query": "Let me check what apps I just used.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12351"}
{"query": "Review my app history and show the most recent ones.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12352"}
{"query": "What are the names of the apps I've recently used?", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12353"}
{"query": "Launch the recent apps view to see which ones were used last.", "answer": {"plan": "ACTION_VIEW_RECENT_APPS", "arguments": {}}, "unique_idx": "ACTION_VIEW_RECENT_APPS-12354"}
