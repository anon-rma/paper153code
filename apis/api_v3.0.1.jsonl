{"plan": "ACTION_CREATE_DOCUMENT", "description": "Creates a new document that app can write to. And user can select where they'd like to create it.\n\nInstead of selecting from existing PDF documents, \nthe ACTION_CREATE_DOCUMENT lets users select where they'd like to create a new document, such as within another app that manages the document's storage. \nAnd then return the URI location of document that you can read from and write to.", "arguments": {"mime_type": {"description": "The MIME type of the document to be created (e.g., 'text/plain', 'application/pdf').", "type": "str", "required": true}, "initial_name": {"description": "The suggested name for the new document.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the newly created document. URI name can be inferred from user query", "type": "Optional[str]", "example": ["content://example/uri", "content://documents/Invoice.pdf", "content://documents/Notes.txt"]}, "examples": ["# Create a new text document\nnew_doc_uri = ACTION_CREATE_DOCUMENT(mime_type='text/plain', initial_name='New Document.txt')\n\n# Create a new PDF file\nnew_pdf_uri = ACTION_CREATE_DOCUMENT(mime_type='application/pdf', initial_name='Report.pdf')\n\n# Create a new image file\nnew_image_uri = ACTION_CREATE_DOCUMENT(mime_type='image/jpeg', initial_name='Photo.jpg')"], "next_turn_plans": [{"plan": "ACTION_OPEN_CONTENT", "reason": "Using the URI of the newly created document, the user can immediately open it to verify its contents or begin editing.", "example": {"query": "Create a new text file called Notes", "device_response": "Created a new document: content://documents/Notes.txt", "next_turn_query": "Open it now", "rewrited_query": "Open content://documents/Notes.txt now", "next_turn_plan": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://documents/Notes.txt"}}}}, {"plan": "send_email", "reason": "If the user wants to share the newly created document via email, they can attach the returned document URI and send an email.", "example": {"query": "Make a PDF named Report", "device_response": "New PDF document created at content://documents/Report.pdf", "next_turn_query": "Email that file to my boss", "rewrited_query": "Email content://documents/Report.pdf to my boss", "next_turn_plan": {"plan": "send_email", "arguments": {"to": "boss@example.com", "attachments": ["content://documents/Report.pdf"]}}}}, {"plan": "send_message", "reason": "If the user wants to share the newly created document via a text message, they can attach the returned document URI as an attachment and send a text message.", "example": {"query": "Generate an image file for the logo", "device_response": "Image file created: content://documents/Logo.jpg", "next_turn_query": "Text it to John saying 'Here is the logo image.'", "rewrited_query": "Text content://documents/Logo.jpg to John saying 'Here is the logo image.'", "next_turn_plan": {"plan": "send_message", "arguments": {"to": "John", "attachments": ["content://documents/Logo.jpg"], "message": "Here is the logo image."}}}}, {"plan": "ACTION_EDIT_DOCUMENT", "reason": "This scenario involves a user wanting to modify content immediately after creating a new document. For example, after creating a document with `ACTION_CREATE_DOCUMENT` (existing API), the user can immediately open that document with `ACTION_EDIT_DOCUMENT` (new API) to edit it. By doing so, the user can add or change content right after creation, which is a very natural continuation of the task.", "example": {"query": "Create a new text file called Notes", "device_response": "Created a new document: content://documents/Notes.txt", "next_turn_query": "Edit that document to add the meeting notes", "rewrited_query": "Edit content://documents/Notes.txt to add the meeting notes", "next_turn_plan": {"plan": "ACTION_EDIT_DOCUMENT", "arguments": {"document_uri": "content://documents/Notes.txt", "content": "add the meeting notes"}}}}]}
{"plan": "ACTION_EDIT_CONTACT", "description": "Edit an existing contact.\n\nThis function allows the user to edit the details of a specific contact\nbased on the provided contact URI. Additional contact information can be\nprovided to pre-fill certain fields in the edit form.\nNote: \n    The contact_uri can be obtained in two primary ways: \n    1. Using the contact URI returned by the ACTION_PICK function.\n    2. Accessing the list of all contacts directly (requires appropriate permissions).", "arguments": {"contact_uri": {"description": "A content URI as a string, pointing to the contact to be edited. This URI can be obtained from the ACTION_PICK function or by querying the contacts database.", "type": "str", "required": true}, "contact_info": {"description": "A dictionary containing additional contact information to pre-fill in the edit form. Keys should correspond to contact fields (available key:  'email', 'phone', 'name', 'company', 'address'), and values should be the data to pre-fill. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "examples": ["# Update Minji's phone number to 010-9876-5432 using contact_uri content://contacts/people/minji\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/minji', contact_info={'phone': '010-9876-5432'})\n\n# Update Daniel’s company to samsung and email to daniel@samsung.com using contact_uri content://contacts/people/daniel\ncontact_uri=ACTION_EDIT_CONTACT(contact_uri='content://contacts/people/daniel', contact_info={'company': 'samsung', 'email': 'daniel@samsung.com'})"], "returns": {"description": "A URI as a string pointing to the edited contact, or null if the edit was cancelled.", "type": "Optional[str]", "example": ["content://contacts/people/1234"]}, "next_turn_plans": [{"plan": "ACTION_VIEW_CONTACT", "reason": "After completing the edit, the user can directly view the contact to confirm the latest information.", "example": {"query": "Change Anna's address to 123 Maple St. using contact_uri content://contacts/people/anna", "device_response": "Anna's contact content://contacts/people/anna was updated", "next_turn_query": "Show me her contact card", "rewrited_query": "Show me content://contacts/people/anna contact card", "next_turn_plan": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/anna"}}}}, {"plan": "dial", "reason": "After adding or updating a phone number during contact editing, the user might want to place a call to that number.", "example": {"query": "Add 010-1234-5678 as Cheolsu's new number using contact_uri content://contacts/people/cheolsu", "device_response": "Cheolsu's contact updated with content://contacts/people/cheolsu", "next_turn_query": "Call him", "rewrited_query": "Call 010-1234-5678", "next_turn_plan": {"plan": "dial", "arguments": {"phone_number": "010-1234-5678"}}}}, {"plan": "send_message", "reason": "After adding a mobile number through editing, the user might want to immediately send a text message to that number.", "example": {"query": "Add 010-2222-3333 as Jieun's new number using contact_uri content://contacts/people/jieun", "device_response": "Jieun's contact updated with content://contacts/people/jieun", "next_turn_query": "Send her a message saying 'Hi Jieun, just testing your new number.'", "rewrited_query": "Send 010-2222-3333 a message saying 'Hi Jieun, just testing your new number.'", "next_turn_plan": {"plan": "send_message", "arguments": {"to": "010-2222-3333", "message": "Hi Jieun, just testing your new number."}}}}, {"plan": "send_email", "reason": "If the user wants to send an email to an address added or updated during editing, this step naturally follows.", "example": {"query": "Update Bob's email to bob@company.com using contact_uri content://contacts/people/bob", "device_response": "Bob's contact 'content://contacts/people/bob' now has email bob@company.com", "next_turn_query": "Email him about the project", "rewrited_query": "Email bob@company.com about the project", "next_turn_plan": {"plan": "send_email", "arguments": {"to": "bob@company.com", "body": "about the project"}}}}, {"plan": "search_location", "reason": "If an address was added to the contact, the user can perform a location search to view that address on a map.", "example": {"query": "Update Charlie's address to 99 Oak Road using contact_uri content://contacts/people/charlie", "device_response": "Charlie's contact address 'content://contacts/people/charlie' updated", "next_turn_query": "Where is that on the map?", "rewrited_query": "Where is 99 Oak Road on the map?", "next_turn_plan": {"plan": "search_location", "arguments": {"query": "99 Oak Road"}}}}, {"plan": "ACTION_NAVIGATE_TO_LOCATION", "reason": "This scenario is when, after getting an address during a contact edit or another task, the user wants to navigate to that address immediately. For example, right after adding or checking an address for a contact with `ACTION_EDIT_CONTACT` (existing API), if the user says “Open that address in maps,” the assistant can launch navigation to that address using `ACTION_NAVIGATE_TO_LOCATION` (new API).", "example": {"query": "Update Charlie's address to 77 Pine St using URI content://contacts/people/1234", "device_response": "Charlie's contact updated with address 77 Pine St. URI is using URI content://contacts/people/1234", "next_turn_query": "Navigate there", "rewrited_query": "Navigate to 77 Pine St.", "next_turn_plan": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "77 Pine St."}}}}]}
{"plan": "ACTION_OPEN_DOCUMENT", "description": "Allows the user to select one or multiple documents of specified MIME types from local storage, cloud services, or external document providers. This action provides long-term persistent access to the selected documents, making it ideal for use-cases such as file management applications, editors, or cloud-synced apps where continuous access to the files is necessary.", "arguments": {"mime_types": {"description": "A list of MIME type(s) for the document(s) to select. Accepts multiple MIME types (e.g., [\"application/pdf\", \"text/plain\"]).", "type": "List[str]", "required": true}, "allow_multiple": {"description": "Allows selection of multiple documents if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of persistent content URIs as strings, each pointing to the selected document. Returns an empty list if no document is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc1", "content://docs/photo.png", "content://docs/report.txt"]}, "examples": ["# Select a single image document for long-term editing\nimage_uris = ACTION_OPEN_DOCUMENT([\"image/*\"])\n\n# Select multiple types of documents for persistent management\ndoc_uris = ACTION_OPEN_DOCUMENT([\"application/pdf\", \"text/plain\"], allow_multiple=True)"], "next_turn_plans": [{"plan": "ACTION_OPEN_CONTENT", "reason": "Opens the selected document(s) so the user can view the content or start editing them.", "example": {"query": "Open a PDF or text file", "device_response": "Selected documents: [content://docs/file1.pdf, content://docs/file2.txt]", "next_turn_query": "Open the first one", "rewrited_query": "Open content://docs/file1.pdf", "next_turn_plan": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://docs/file1.pdf"}}}}, {"plan": "send_email", "reason": "Naturally follows if the user wants to send the selected document file to someone as an email attachment.", "example": {"query": "Choose an image from storage", "device_response": "Selected image: content://docs/photo.png", "next_turn_query": "Email it to susan@example.com saying 'Here's the photo.'", "rewrited_query": "Email content://docs/photo.png to susan@example.com saying 'Here's the photo.'", "next_turn_plan": {"plan": "send_email", "arguments": {"to": "susan@example.com", "attachments": ["content://docs/photo.png"], "body": "Here's the photo."}}}}, {"plan": "send_message", "reason": "If the user wants to share the selected document via text message, they can attach the file's URI and send it in a message.", "example": {"query": "Select a text file to share", "device_response": "Selected file: content://docs/report.txt", "next_turn_query": "Send it to Bob in a text message saying 'Here's the report.'", "rewrited_query": "Send content://docs/report.txt to Bob in a text message saying 'Here's the report.'", "next_turn_plan": {"plan": "send_message", "arguments": {"to": "Bob", "attachments": ["content://docs/report.txt"], "message": "Here's the report."}}}}, {"plan": "ACTION_CREATE_DOCUMENT", "reason": "If the desired document isn’t found, the user can be prompted to create a new document.", "example": {"query": "Find the report file", "device_response": "No existing document found", "next_turn_query": "Create a new one then", "rewrited_query": "Create a new document named NewReport.pdf then", "next_turn_plan": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"initial_name": "NewReport.pdf", "mime_type": "application/pdf"}}}}]}
{"plan": "ACTION_GET_CONTENT", "description": "Allows the user to quickly select one or multiple existing files of a specified MIME type from local storage. This action is intended for temporary and immediate use-cases, such as attaching files to messages, emails, or quickly accessing images and videos. It returns temporary access (non-persistent) URIs to the selected files, suitable for short-term or one-time usage.", "arguments": {"mime_type": {"description": "The MIME type of the file(s) to select (e.g., \"image/*\", \"audio/*\", \"video/*\", \"*/*\").", "type": "str", "required": true}, "allow_multiple": {"description": "Allows the user to select multiple files if set to True. Defaults to False.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A list of temporary content URIs as strings, each pointing to the selected file. Returns an empty list if no file is selected or the operation is canceled.", "type": "List[str]", "example": ["content://example/doc.txt", "content://example/file.pdf", "content://temp/photo.jpg", "content://temp/video.mp4"]}, "examples": ["# Quickly select a single image for immediate use\nimage_uris = ACTION_GET_CONTENT(\"image/*\")\n\n# Quickly select multiple PDFs for immediate sharing\ndoc_uris = ACTION_GET_CONTENT(\"application/pdf\", allow_multiple=True)"], "next_turn_plans": [{"plan": "ACTION_OPEN_CONTENT", "reason": "Immediately opens the temporarily selected file (e.g. a photo or video) to display it to the user.", "example": {"query": "Attach a photo", "device_response": "Photo selected: content://temp/photo.jpg", "next_turn_query": "Show me that picture", "rewrited_query": "Show me content://temp/photo.jpg", "next_turn_plan": {"plan": "ACTION_OPEN_CONTENT", "arguments": {"uri": "content://temp/photo.jpg"}}}}, {"plan": "send_email", "reason": "If the user wants to send the selected file as an email attachment right away, this would be the next step.", "example": {"query": "Pick a video to send", "device_response": "Video selected: content://temp/video.mp4", "next_turn_query": "Email it to Alice", "rewrited_query": "Email content://temp/video.mp4 to Alice", "next_turn_plan": {"plan": "send_email", "arguments": {"to": "alice@example.com", "attachments": ["content://temp/video.mp4"]}}}}, {"plan": "send_message", "reason": "Naturally leads to sending the selected file as an attachment via text message.", "example": {"query": "Select the document to share", "device_response": "Document selected: content://temp/doc.txt", "next_turn_query": "Text it to me saying 'Here's the document.'", "rewrited_query": "Text content://temp/doc.txt to me saying 'Here's the document.'", "next_turn_plan": {"plan": "send_message", "arguments": {"to": "me", "attachments": ["content://temp/doc.txt"], "message": "Here's the document."}}}}, {"plan": "ACTION_CREATE_DOCUMENT", "reason": "If the desired document isn’t found, the user can be prompted to create a new document.", "example": {"query": "Find the report file", "device_response": "No file found", "next_turn_query": "Create a new one then", "rewrited_query": "Create a new document named NewReport.pdf then", "next_turn_plan": {"plan": "ACTION_CREATE_DOCUMENT", "arguments": {"initial_name": "NewReport.pdf", "mime_type": "application/pdf"}}}}, {"plan": "ACTION_EDIT_VIDEO", "reason": "This scenario is when a user wants to select a video stored on the device and then edit it. Using `ACTION_GET_CONTENT` (existing API) to let the user pick a specific video file, you can then run `ACTION_EDIT_VIDEO` (new API) to edit that video. For example, the user might say “Select a video to edit” (user selects a file) then “Trim this video to 1 minute long.”", "example": {"query": "Select a video to edit", "device_response": "Video selected: content://temp/holiday.mp4", "next_turn_query": "Crop that video to 1 minute long", "rewrited_query": "Edit content://temp/holiday.mp4 to 60 seconds", "next_turn_plan": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "content://temp/holiday.mp4", "edit_options": {"end_time": 60000}}}}}]}
{"plan": "ACTION_OPEN_CONTENT", "description": "Opens or displays the content specified by a given URI directly. This action enables immediate viewing or opening of documents, images, videos, audio files, and other supported content types without showing any picker UI. Intended for scenarios where the content URI is already known or obtained from a prior selection.", "arguments": {"uri": {"description": "The content URI pointing to the content to open.", "type": "str", "required": true}, "mime_type": {"description": "The MIME type of the content (optional, used for context or verification).", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the content that was opened, or null if opening failed.", "type": "Optional[str]", "example": ["content://documents/report.pdf", "content://gallery/pic01.jpg"]}, "examples": ["# Open a document URI\nACTION_OPEN_CONTENT(document_uri)\n\n# Open an image URI\nACTION_OPEN_CONTENT(image_uri)"], "next_turn_plans": [{"plan": "send_email", "reason": "If the user wants to share the content they are viewing (e.g. a photo or document) via email, they can attach the URI of the current file and send an email.", "example": {"query": "View the image", "device_response": "Displaying image content://gallery/pic01.jpg", "next_turn_query": "Email this photo to mom", "rewrited_query": "Email content://gallery/pic01.jpg to mom", "next_turn_plan": {"plan": "send_email", "arguments": {"to": "mom", "attachments": ["content://gallery/pic01.jpg"]}}}}, {"plan": "send_message", "reason": "If the user wants to share the content they are viewing via text message, they can immediately send a message with the content’s URI attached.", "example": {"query": "Open that PDF", "device_response": "Opened document content://files/report.pdf", "next_turn_query": "Share it in a text message with Alex saying 'Here is the file.'", "rewrited_query": "Share content://files/report.pdf in a text message with Alex saying 'Here is the file.'", "next_turn_plan": {"plan": "send_message", "arguments": {"to": "Alex", "attachments": ["content://files/report.pdf"], "message": "Here is the file."}}}}]}
{"plan": "ACTION_GET_RINGTONE", "description": "Let user select a ringtone and return the URI of the selected ringtone.\n\nThis function allows the user to select a ringtone from the device's ringtone picker.\nIt returns the content URI of the selected ringtone that can be use to set alarm.", "arguments":{}, "returns":{"description": "A content URI as a string for the chosen ringtone. keep in mind that ringtone was already chosen by the user.", "type": "str", "example":["Selected ringtone: content://media/ringtone01", "Ringtone chosen: content://media/tune.mp3"]}, "examples":["# Let the user pick a ringtone\nringtone_uri = ACTION_GET_RINGTONE()"], "next_turn_plans":[{"plan": "ACTION_SET_ALARM", "reason": "To use the selected ringtone for a new alarm, the app can pass the ringtone’s URI as the EXTRA_RINGTONE parameter when setting the alarm.", "example":{"query": "Pick a ringtone", "device_response": "Selected ringtone: content://media/ringtone01", "next_turn_query": "Use it for an alarm", "rewrited_query": "Use content://media/ringtone01 for an alarm", "next_turn_plan":{"plan": "ACTION_SET_ALARM", "arguments":{"EXTRA_RINGTONE": "content://media/ringtone01"}}}},{"plan": "ACTION_OPEN_CONTENT", "reason": "If the user wants to preview the selected ringtone immediately, the content can be opened using its URI to play the ringtone.", "example":{"query": "Choose a ringtone for me", "device_response": "Ringtone chosen: content://media/tune.mp3", "next_turn_query": "Play it now", "rewrited_query": "Play content://media/tune.mp3 now", "next_turn_plan":{"plan": "ACTION_OPEN_CONTENT", "arguments":{"uri": "content://media/tune.mp3"}}}},{"plan": "ACTION_SET_RINGTONE", "reason": "This scenario is where a user selects a desired ringtone and then immediately sets it as the phone’s default ringtone. After choosing a ringtone file via `ACTION_GET_RINGTONE` (existing API), the user can directly set that ringtone as the default using `ACTION_SET_RINGTONE` (new API). Setting the ringtone immediately after picking it is a very natural sequence.", "example":{"query": "Pick a ringtone for my phone", "device_response": "Selected ringtone: content://media/tune.mp3", "next_turn_query": "Set it as my ringtone", "rewrited_query": "Set content://media/tune.mp3 as my ringtone", "next_turn_plan":{"plan": "ACTION_SET_RINGTONE", "arguments":{"ringtone_uri": "content://media/tune.mp3"}}}}]}
{"plan": "ACTION_IMAGE_CAPTURE", "description": "Capture a picture using the camera app and return the URI of the saved photo.\n\nThis function uses the ACTION_IMAGE_CAPTURE intent to open the camera app and capture a photo.\nThe photo is saved to a URI location, which is returned by this function.\nUser can optionally specify a filename or save location via the content URI parameters.", "arguments":{"file_uri":{"description": "A content URI indicating where to save the captured image (optional). If not provided, the camera app will choose a location.", "type": "Optional[str]", "required":false}}, "returns":{"description": "A content URI as a string pointing to the captured image. Returns None if the capture is canceled or fails.", "type": "str", "example":["content://example/uri"]}, "examples":["# Capture an image and let the system decide the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()\n\n# Capture an image and specify the save location\nphoto_uri = ACTION_IMAGE_CAPTURE()"], "next_turn_plans":[{"plan": "ACTION_OPEN_CONTENT", "reason": "Immediately opens the captured photo to display it to the user (to preview the photo just taken).", "example":{"query": "Take a photo", "device_response": "Photo saved to content://photos/capture_001.jpg", "next_turn_query": "Show me the picture", "rewrited_query": "Show me content://photos/capture_001.jpg", "next_turn_plan":{"plan": "ACTION_OPEN_CONTENT", "arguments":{"uri": "content://photos/capture_001.jpg"}}}},{"plan": "send_email", "reason": "If the user wants to share the photo they just took via email, they can attach it as an email attachment.", "example":{"query": "Snap a picture of this document", "device_response": "Image saved at content://photos/doc_scan.jpg", "next_turn_query": "Email that image to my assistant", "rewrited_query": "Email content://photos/doc_scan.jpg to my assistant", "next_turn_plan":{"plan": "send_email", "arguments":{"to": "assistant", "attachments":["content://photos/doc_scan.jpg"]}}}},{"plan": "send_message", "reason": "If the user wants to share the photo they just took via text message, they can send a message with the photo’s URI attached.", "example":{"query": "Take a picture of the whiteboard", "device_response": "Photo stored at content://photos/whiteboard.jpg", "next_turn_query": "Text it to the team saying 'Here are the whiteboard notes.'", "rewrited_query": "Text content://photos/whiteboard.jpg to the team saying 'Here are the whiteboard notes.'", "next_turn_plan":{"plan": "send_message", "arguments":{"to": "the team", "attachments":["content://photos/whiteboard.jpg"], "message": "Here are the whiteboard notes."}}}}]}
{"plan": "ACTION_INSERT_CONTACT", "description": "Insert a new contact.\n\nThis function allows the user to create a new contact with the provided\ncontact information. It will open the contact creation interface with\npre-filled information based on the provided data.", "arguments": {"contact_info": {"description": "A dictionary containing the contact details to insert. Possible keys include 'name', 'phone', 'email', 'address', etc.", "type": "Dict[str, Any]", "required": true}}, "returns": {"description": "A content URI as a string pointing to the newly created contact. Returns None if the operation is canceled or fails.", "type": "Optional[str]", "example": ["content://example/uri", "content://contacts/people/noah", "content://contacts/people/maria", null]}, "examples": ["# Insert a new contact with name and phone number\nnew_contact_uri = ACTION_INSERT_CONTACT({\"name\":  \"John Doe\", \"phone\":  \"123-456-7890\"})"], "next_turn_plans": [{"plan": "ACTION_VIEW_CONTACT", "reason": "Allows the user to view the details of the newly added contact immediately if they want to check it.", "example": {"query": "Insert new contact Maria with address 5 Elm St.", "device_response": "Contact Maria added with address 5 Elm St. (content://contacts/people/maria)", "next_turn_query": "Show her info", "rewrited_query": "Show content://contacts/people/maria info", "next_turn_plan": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/maria"}}}}, {"plan": "dial", "reason": "If a phone number was added to the new contact, the user might want to call that number right after adding it.", "example": {"query": "Save a new contact:  Alice, 010-9876-5432", "device_response": "Added contact Alice with phone 010-9876-5432 (content://contacts/people/alice)", "next_turn_query": "Call her now", "rewrited_query": "Call 010-9876-5432 now", "next_turn_plan": {"plan": "dial", "arguments": {"phone_number": "010-9876-5432"}}}}, {"plan": "send_message", "reason": "If the user wants to send a text message to the number they just added, this can happen immediately after adding the contact.", "example": {"query": "Insert new contact Emily with phone 010-5555-1212", "device_response": "Added contact Emily with content://contacts/people/emily", "next_turn_query": "Text her saying 'Hi Emily, I just saved your number!'", "rewrited_query": "Text 010-5555-1212 saying 'Hi Emily, I just saved your number!'", "next_turn_plan": {"plan": "send_message", "arguments": {"to": "010-5555-1212", "message": "Hi Emily, I just saved your number!"}}}}, {"plan": "send_email", "reason": "If the user wants to email the newly added email address right away, this follows naturally.", "example": {"query": "Insert new contact John with email john@example.com", "device_response": "New contact John with email john@example.com created (content://contacts/people/john)", "next_turn_query": "Email him", "rewrited_query": "Email john@example.com", "next_turn_plan": {"plan": "send_email", "arguments": {"to": "john@example.com"}}}}, {"plan": "ACTION_EDIT_CONTACT", "reason": "Right after adding the contact, the user might continue editing it to add any missing information.", "example": {"query": "Create a contact Mark", "device_response": "New contact Mark created (content://contacts/people/mark)", "next_turn_query": "Add email on that. 'mark@gmail.com'", "rewrited_query": "Add email content://contacts/people/mark. 'mark@gmail.com'", "next_turn_plan": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/mark", "contact_info": {"email": "mark@gmail.com"}}}}}, {"plan": "search_location", "reason": "If an address was included in the contact, the next step could be to search that address in a map app to view the location.", "example": {"query": "Add contact Noah with address 77 Pine St.", "device_response": "Contact Noah added with address 77 Pine St. (content://contacts/people/noah)", "next_turn_query": "Open that address on map", "rewrited_query": "Open 77 Pine St. on map", "next_turn_plan": {"plan": "search_location", "arguments": {"query": "77 Pine St."}}}}]}
{"plan": "ACTION_INSERT_EVENT", "description": "Add a new event to the user's calendar.\n", "arguments": {"TITLE": {"description": "The event title.", "type": "str", "required": true}, "DESCRIPTION": {"description": "The event description.", "type": "str", "required": true}, "EVENT_LOCATION": {"description": "The event location (address or place).", "type": "str", "required": false, "default": ""}, "BEGIN_TIME": {"description": "The start time of the event in milliseconds since epoch.", "type": "int", "required": true}, "END_TIME": {"description": "The end time of the event in milliseconds since epoch.", "type": "int", "required": true}}, "returns": {"description": "A URI as a string pointing to the appended event. with confirmation message indicating the event was successfully added to the calendar, including event details.", "type": "str", "example": ["Event 'Team Meeting' added on March 30 at Conference Room A. with content://calender/event/1"]}, "examples": ["# Insert a calendar event for a meeting\nACTION_INSERT_EVENT({\"TITLE\":   \"Meeting with Bob\", \"DESCRIPTION\":   \"Discuss project updates\", \"EVENT_LOCATION\":   \"Conference Room A\", \"BEGIN_TIME\":   1700000000000, \"END_TIME\":   1700003600000})"], "next_turn_plans": [{"plan": "search_location", "reason": "After adding the event, the user can search for the event’s location on a map to check it.", "example": {"query": "Add a meeting at 2 PM tomorrow at HQ", "device_response": "Event 'Meeting' at 2 PM tomorrow at HQ added to calendar, URI: content://calender/event/2", "next_turn_query": "Where is it exactly?", "rewrited_query": "Where is HQ exactly?", "next_turn_plan": {"plan": "search_location", "arguments": {"query": "HQ"}}}}, {"plan": "send_email", "reason": "If the user wants to share the newly created event’s details (e.g. meeting place and time) via email with participants, that can follow.", "example": {"query": "Create an event:   Lunch on Friday at Cafe", "device_response": "Event 'Lunch' on Friday at Cafe added here 'content://calender/event/3'", "next_turn_query": "Email these details to Tim@gmail.com", "rewrited_query": "Email Friday lunch at Cafe to Tim@gmail.com", "next_turn_plan": {"plan": "send_email", "arguments": {"to": "Tim@gmail.com", "body": "Friday lunch at Cafe"}}}}, {"plan": "send_message", "reason": "If the user wants to share the event information via text message or send a notification, that can be the next step.", "example": {"query": "Schedule Dentist appointment at 10 AM next Monday", "device_response": "Event 'Dentist' for next Monday at 10 AM added to calendar. URI: content://calender/event/4", "next_turn_query": "Text me the appointment info", "rewrited_query": "Text me the 'Dentist at 10 AM next Monday'", "next_turn_plan": {"plan": "send_message", "arguments": {"to": "me", "message": "Dentist at 10 AM next Monday"}}}}, {"plan": "ACTION_NAVIGATE_TO_LOCATION", "reason": "This scenario is when a user adds a location to a calendar event and then immediately wants navigation to that location. After adding the location information to an event with `ACTION_INSERT_EVENT` (existing API), the user might want to go there right away. In this case, it’s possible to start navigation to that event’s location using `ACTION_NAVIGATE_TO_LOCATION` (new API).", "example": {"query": "Add a Meeting event tomorrow 2 PM at 99 Oak Road", "device_response": "Event 'Meeting' at 2 PM tomorrow at 99 Oak Road added to calendar, URI: content://calendar/event/5", "next_turn_query": "Navigate there", "rewrited_query": "Navigate to 99 Oak Road", "next_turn_plan": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "99 Oak Road"}}}}, {"plan": "ACTION_VIEW_EVENT", "reason": "Users often want to immediately view event details after adding an event.", "example": {"query": "Add a meeting with the project team on July 5 at 3 PM.", "device_response": "'Meeting with the project team' event added to calendar (July 5, 15:00) here: content://calender/event/1", "next_turn_query": "Show me the event I just added.", "rewrited_query": "Show me the event content://calender/event/1", "next_turn_plan": {"plan": "ACTION_VIEW_EVENT", "arguments": {"event_uri": "content://calender/event/1"}}}}]}
{"plan": "ACTION_PICK", "description": "This function allows the user to select a contact or specific contact information (such as phone\nnumber, email, or postal address) and returns a content URI for the selected data.", "arguments": {"data_type": {"description": "The type of contact data to pick. Default is 'contact' to pick a contact URI. Other options: 'phone', 'email', 'address' to pick a specific piece of info.", "type": "str", "required": false, "default": "contact"}}, "returns": {"description": "A content URI as a string pointing to the selected contact or data (phone, email, etc.), or None if canceled.", "type": "Optional[str]", "example": ["content://example/uri", "content://example/uri", "content://contacts/people/2", "content://contacts/phone/14", null]}, "examples": ["# Pick a contact URI\ncontact_uri = ACTION_PICK()\n\n# Pick an email address from contacts\nemail_uri = ACTION_PICK(\"email\")"], "next_turn_plans": [{"plan": "ACTION_VIEW_CONTACT", "reason": "Displays the selected contact’s details so the user can view them.", "example": {"query": "Select a contact to share", "device_response": "Contact selected: Bob (content://contacts/people/2)", "next_turn_query": "Show me his details", "rewrited_query": "Show me Bob's details", "next_turn_plan": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/2"}}}}, {"plan": "ACTION_EDIT_CONTACT", "reason": "Allows the user to immediately edit the selected contact’s information.", "example": {"query": "Pick a contact to update", "device_response": "Selected contact: Alice (content://contacts/people/5)", "next_turn_query": "Edit her info", "rewrited_query": "Edit Alice's info", "next_turn_plan": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/5"}}}}, {"plan": "get_contact_info_from_uri", "reason": "Can be invoked to retrieve actual data (phone number, email, etc.) from the selected contact’s URI (e.g., to get the selected contact’s phone number).", "example": {"query": "Pick a phone number from contacts", "device_response": "Phone number selected: content://contacts/phone/14", "next_turn_query": "Get that number", "rewrited_query": "Get content://contacts/phone/14", "next_turn_plan": {"plan": "get_contact_info_from_uri", "arguments": {"data_uri": "content://contacts/phone/14"}}}}, {"plan": "dial", "reason": "If a contact or specific number is selected, the user can directly call that number.", "example": {"query": "Select a phone number to call", "device_response": "Phone number selected: 010-4444-5555", "next_turn_query": "Call this number", "rewrited_query": "Call 010-4444-5555", "next_turn_plan": {"plan": "dial", "arguments": {"phone_number": "010-4444-5555"}}}}, {"plan": "send_message", "reason": "If a specific number is selected from the contact, the user can immediately send a text message to that number.", "example": {"query": "Choose a number to text", "device_response": "Phone number selected: 010-6666-7777", "next_turn_query": "Text that number saying 'how are you?'", "rewrited_query": "Text 010-6666-7777 saying 'how are you?'", "next_turn_plan": {"plan": "send_message", "arguments": {"to": "010-6666-7777", "message": "how are you?"}}}}, {"plan": "send_email", "reason": "If an email address is selected from the contact, the user can proceed to compose and send an email to that address.", "example": {"query": "Choose an email address to use", "device_response": "Email selected: alice@example.com", "next_turn_query": "Send a message to that email", "rewrited_query": "Send a message to alice@example.com", "next_turn_plan": {"plan": "send_email", "arguments": {"to": "alice@example.com"}}}}]}
{"plan": "ACTION_SET_ALARM", "description": "Set an alarm with the given parameters.\n", "arguments": {"EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A string describing the alarm set, including alarm_id, time and message.", "type": "str", "example": ["Alarm set for alarm_id: alarm_no1 - 7:30 AM: Morning alarm"]}, "examples": ["# Set an alarm for 7:30 AM\nACTION_SET_ALARM({\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30, \"EXTRA_MESSAGE\": \"Morning alarm\"})"], "next_turn_plans": [{"plan": "ACTION_SHOW_ALARMS", "reason": "Immediately shows the list of alarms to verify the new alarm was added correctly or to review all alarms.", "example": {"query": "Set an alarm for 6:30 AM", "device_response": "Alarm set for 6:30 AM, alarm_id: alarm_no2", "next_turn_query": "Show alarms", "rewrited_query": "Show alarms", "next_turn_plan": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}}}, {"plan": "ACTION_EDIT_ALARM", "reason": "This scenario is when a user sets an alarm and then needs to change the time or settings immediately. Right after setting a new alarm with `ACTION_SET_ALARM` (existing API), the user can immediately change that alarm’s time or label via `ACTION_EDIT_ALARM` (new API). For example, the user might set an alarm for 6:00 AM and then say “actually, make it 6:30 instead.”", "example": {"query": "Set an alarm for 6:00 AM", "device_response": "Alarm set for 6:00 AM, alarm_id: alarm_no2", "next_turn_query": "Actually, make it 6:30 instead", "rewrited_query": "Change alarm_no2 to 6:30 AM", "next_turn_plan": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": "alarm_no2", "EXTRA_HOUR": 6, "EXTRA_MINUTES": 30}}}}]}
{"plan": "ACTION_SET_TIMER", "description": "Set a countdown timer with the given parameters.\n", "arguments": {"duration": {"description": "The duration of the timer in the format \"HH hours MM minutes SS seconds\".\nFor example, \"1 hours 30 minutes\" or \"10 minutes\" or \"1 hours 30 minutes 15 seconds\", \n", "type": "str", "required": true}, "EXTRA_MESSAGE": {"description": "A custom message to identify the timer. Default is an empty string.", "type": "str", "required": false, "default": ""}, "EXTRA_SKIP_UI": {"description": "A boolean specifying whether the responding app must skip its UI when setting the timer.\nIf true, the app must bypass any confirmation UI and start the specified timer. Default is True.", "type": "bool", "required": false, "default": true}}, "returns": {"description": "A string describing the timer set, including duration and custom message if provided.", "type": "str", "example": ["Timer set for 10 minutes: Pasta timer"]}, "examples": ["# Set a Pasta timer for 10 minutes\nACTION_SET_TIMER({\"duration\": 10 minutes, \"EXTRA_MESSAGE\": \"Pasta timer\"})"], "next_turn_plans": [{"plan": "ACTION_SHOW_TIMERS", "reason": "This scenario is when a user sets a new timer and then wants to check that it’s set correctly (or see it alongside other timers). Right after starting a timer with `ACTION_SET_TIMER` (existing API), the user can use `ACTION_SHOW_TIMERS` (new API) to show the list of active timers. For example, the user might say “Set a 10-minute timer” followed by “Show timers.”", "example": {"query": "Set a timer for 10 minutes", "device_response": "Timer set for 10 minutes", "next_turn_query": "Show timers", "rewrited_query": "Show timers", "next_turn_plan": {"plan": "ACTION_SHOW_TIMERS", "arguments": {}}}}]}
{"plan": "ACTION_SHOW_ALARMS", "description": "Display the list of currently set alarms.\n", "arguments": {}, "returns": {"description": "A string listing all currently set alarms. number of alarms could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Current alarms: [alarm_id: 1 - 7:00 AM, Workout, alarm_id: 2 - 8:00 AM, Meeting]", "Displaying all alarms: [alarm_id: 1 - 5:15 AM, alarm_id: 2 - 5:30 AM, alarm_id: 3 - 9:30 AM]"]}, "examples": ["# Show all alarms\nACTION_SHOW_ALARMS()"], "next_turn_plans": [{"plan": "ACTION_SET_ALARM", "reason": "After reviewing the current alarms, if the user decides to add a new one, they can proceed to set an alarm.", "example": {"query": "What alarms do I have?", "device_response": "Displaying all alarms: [alarm_id: 1 - 7:00 AM, alarm_id: 2 - 6:30 AM]", "next_turn_query": "Add one for 9:00 AM", "rewrited_query": "Add an alarm for 9:00 AM", "next_turn_plan": {"plan": "ACTION_SET_ALARM", "arguments": {"EXTRA_HOUR": 9, "EXTRA_MINUTES": 0}}}}, {"plan": "ACTION_EDIT_ALARM", "reason": "This scenario is when a user checks the list of set alarms and then wants to change a specific alarm. Right after displaying all alarms with `ACTION_SHOW_ALARMS` (existing API), the user can modify a chosen alarm using `ACTION_EDIT_ALARM` (new API). For example, the user might ask “What alarms do I have? ” to see the list, then follow up with “Change the 7:00 AM alarm to 7:30 AM. ”", "example": {"query": "What alarms do I have?", "device_response": "Current alarms: [alarm_id: 1 - 6:00 AM, Morning workout, alarm_id: 2 - 7:00 AM, Meeting]", "next_turn_query": "Edit the 7:00 AM alarm to 7:30 AM", "rewrited_query": "Edit alarm_id: 2 to 7:30 AM", "next_turn_plan": {"plan": "ACTION_EDIT_ALARM", "arguments": {"alarm_id": "2", "EXTRA_HOUR": 7, "EXTRA_MINUTES": 30}}}}]}
{"plan": "ACTION_VIDEO_CAPTURE", "description": "Capture a video using the camera app and return the URI of the recorded video.\n\nThis function uses the ACTION_VIDEO_CAPTURE intent to open the camera app and record a video.\nThe video is saved to a URI location, which is returned by this function.", "arguments":{"file_uri":{"description": "A content URI indicating where to save the recorded video (optional). If not provided, the camera app will choose a location.", "type": "str", "required":false}}, "returns":{"description": "A content URI as a string pointing to the recorded video.", "type": "Optional[str]", "example":["content://example/uri", "content://videos/myclip.mp4"]}, "examples":["# Capture a video and let the system decide the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()\n\n# Capture a video and specify the save location\nvideo_uri = ACTION_VIDEO_CAPTURE()"], "next_turn_plans":[{"plan": "ACTION_OPEN_CONTENT", "reason": "Immediately plays the recorded video to show it to the user.", "example":{"query": "Record a video of this presentation", "device_response": "Video saved to content://videos/presentation.mp4", "next_turn_query": "Play it back", "rewrited_query": "Play content://videos/presentation.mp4 back", "next_turn_plan":{"plan": "ACTION_OPEN_CONTENT", "arguments":{"uri": "content://videos/presentation.mp4"}}}},{"plan": "send_email", "reason": "If the user wants to send the video they just recorded via email, they can attach it to an email as the next step.", "example":{"query": "Start recording video", "device_response": "Video recorded at content://videos/clip001.mp4", "next_turn_query": "Email that video to the team", "rewrited_query": "Email content://videos/clip001.mp4 to the team", "next_turn_plan":{"plan": "send_email", "arguments":{"to": "the team", "attachments":["content://videos/clip001.mp4"]}}}},{"plan": "send_message", "reason": "If the user wants to share the recorded video via text message, they can send a message with the video’s URI attached.", "example":{"query": "Capture a quick video message", "device_response": "Video saved to content://videos/message.mp4", "next_turn_query": "Text it to my friend", "rewrited_query": "Text content://videos/message.mp4 to my friend", "next_turn_plan":{"plan": "send_message", "arguments":{"to": "my friend", "attachments":["content://videos/message.mp4"]}}}},{"plan": "ACTION_EDIT_VIDEO", "reason": "This scenario is when a user wants to immediately edit a video that they have just recorded. Right after recording a new video with `ACTION_VIDEO_CAPTURE` (existing API), you can take its URI and directly edit it (for example, trimming) with `ACTION_EDIT_VIDEO` (new API). This addresses the natural desire to cut out unnecessary parts right after recording.", "example":{"query": "Record a video of the presentation", "device_response": "Video saved to content://videos/presentation.mp4", "next_turn_query": "Trim the video to the first 30 seconds", "rewrited_query": "Edit content://videos/presentation.mp4 trimming to first 30 seconds", "next_turn_plan":{"plan": "ACTION_EDIT_VIDEO", "arguments":{"video_uri": "content://videos/presentation.mp4", "edit_options":{"start_time":0, "end_time":30000}}}}}]}
{"plan": "ACTION_VIEW_CONTACT", "description": "View a contact's details.\n\nThis function opens the contact specified by the given content URI and displays its details (name, phone, email, etc.).", "arguments": {"contact_uri": {"description": "The content URI of the contact to view.", "type": "str", "required": true}}, "returns": {"description": "A URI as a string pointing to the contact viewed or its details (name, phone, email, etc.), or null if the viewing was unsuccessful.", "type": "Optional[str]", "example": ["content://contacts/people/5678", "010-4444-5555; lisa@example.com"]}, "examples": ["# View a contact's details\nACTION_VIEW_CONTACT(contact_uri)"], "next_turn_plans": [{"plan": "ACTION_EDIT_CONTACT", "reason": "If after viewing the contact’s details the user wants to make changes, they can switch directly to editing the contact.", "example": {"query": "Load the contact details found at content://contacts/david", "device_response": "Contact information for content://contacts/david has been displayed.", "next_turn_query": "Edit it", "rewrited_query": "Edit content://contacts/david", "next_turn_plan": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/david"}}}}, {"plan": "dial", "reason": "After viewing the contact’s phone number, a natural next step is to call that number.", "example": {"query": "Open Rachel's contact at content://contacts/rachel", "device_response": "Displaying Rachel's contact information:  010-4444-5555; lisa@example.com", "next_turn_query": "Call her", "rewrited_query": "Call 010-4444-5555", "next_turn_plan": {"plan": "dial", "arguments": {"phone_number": "010-4444-5555"}}}}, {"plan": "send_message", "reason": "If the user wants to send a text message to a number in the contact, that would follow as the next step.", "example": {"query": "Show Mike's contact details at content://contacts/mike", "device_response": "Mike: 010-3131-4141; mike@example.com", "next_turn_query": "Send him a text saying 'I'll call you later.'", "rewrited_query": "Send 010-3131-4141 a text saying 'I'll call you later.'", "next_turn_plan": {"plan": "send_message", "arguments": {"to": "010-3131-4141", "message": "I'll call you later."}}}}, {"plan": "send_email", "reason": "If the contact has an email address, the user might want to send an email to that address after viewing the contact.", "example": {"query": "Show Lisa's contact details content://contacts/lisa", "device_response": "Here are Lisa's contact details: lisa@example.com", "next_turn_query": "Email her", "rewrited_query": "Email lisa@example.com", "next_turn_plan": {"plan": "send_email", "arguments": {"to": "lisa@example.com"}}}}, {"plan": "search_location", "reason": "If the contact has a stored address and the user wants to see it on a map, they can search for that address next.", "example": {"query": "View John's contact info at content://contacts/john.park", "device_response": "John Doe: 010-5555-6666; 85 North St.", "next_turn_query": "Navigate to his address", "rewrited_query": "Navigate to 85 North St.", "next_turn_plan": {"plan": "search_location", "arguments": {"query": "85 North St."}}}}]}
{"plan": "INTENT_ACTION_STILL_IMAGE_CAMERA", "description": "Launches the device's still image camera application.\n\nThis intent action is used to open the system camera in still-image mode, allowing the user to take a photo.", "arguments": {}, "returns": {"description": "A confirmation message indicating the still image camera app was successfully opened.", "type": "str", "example": ["Still image camera launched successfully."]}, "examples": ["# Open the camera app to take a photo\nINTENT_ACTION_STILL_IMAGE_CAMERA()"], "next_turn_plans": [{"plan": "ACTION_IMAGE_CAPTURE", "reason": "After opening the camera app and taking a photo, it naturally flows into using the captured image’s URI for further actions (e.g., preview or share).", "example": {"query": "Launch camera", "device_response": "Camera app opened", "next_turn_query": "Take a photo", "rewrited_query": "Take a photo", "next_turn_plan": {"plan": "ACTION_IMAGE_CAPTURE", "arguments": {}}}}, {"plan": "ACTION_GET_CONTENT", "reason": "It can naturally proceed to selecting or confirming the photo that was just taken.", "example": {"query": "Open the camera app", "device_response": "Camera is ready", "next_turn_query": "Select the last photo taken", "rewrited_query": "Select the last photo taken", "next_turn_plan": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "image/*"}}}}]}
{"plan": "INTENT_ACTION_VIDEO_CAMERA", "description": "Launches the device's video camera application.\n\nThis intent action is used to open the system camera in video mode, allowing the user to record a video.", "arguments": {}, "returns": {"description": "A confirmation message indicating the video camera app was successfully opened.", "type": "str", "example": ["Video camera launched successfully."]}, "examples": ["# Open the camera app to record a video\nINTENT_ACTION_VIDEO_CAMERA()"], "next_turn_plans": [{"plan": "ACTION_VIDEO_CAPTURE", "reason": "After recording a video with the camera app, the video’s URI can be used to preview it or continue with other actions.", "example": {"query": "Start video mode", "device_response": "Video camera ready", "next_turn_query": "Begin recording", "rewrited_query": "Begin recording", "next_turn_plan": {"plan": "ACTION_VIDEO_CAPTURE", "arguments": {}}}}, {"plan": "ACTION_GET_CONTENT", "reason": "This can lead to selecting or further reviewing the video that was recorded.", "example": {"query": "Open video camera", "device_response": "Video camera launched", "next_turn_query": "Choose a video to attach", "rewrited_query": "Choose a video to attach", "next_turn_plan": {"plan": "ACTION_GET_CONTENT", "arguments": {"mime_type": "video/*"}}}}]}
{"plan": "dial", "description": "Initiates a phone call to the given number.\n\nThis function triggers the phone app to call the specified phone number. It requires the CALL_PHONE permission if used within an app.", "arguments": {"phone_number": {"description": "The phone number to dial.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating that the call is being initiated to the specified phone number.", "type": "str", "example": ["Dialing 010-1234-5678..."]}, "examples": ["# Dial a phone number\ndial(\"123-456-7890\")"], "next_turn_plans": [{"plan": "send_message", "reason": "If the call was not answered or couldn’t be completed, it can naturally lead to sending a text message to the same number.", "example": {"query": "Call 010-1111-2222", "device_response": "Dialing 010-1111-2222...", "next_turn_query": "Send him a text instead saying 'I'm on my way.'", "rewrited_query": "Send 010-1111-2222 a text instead saying 'I'm on my way.'", "next_turn_plan": {"plan": "send_message", "arguments": {"to": "010-1111-2222", "message": "I'm on my way."}}}}, {"plan": "ACTION_INSERT_CONTACT", "reason": "If the number dialed is not in the contacts, the user can add it as a new contact after the call.", "example": {"query": "Dial 02-123-4567", "device_response": "Calling 02-123-4567", "next_turn_query": "Save this number", "rewrited_query": "Save 02-123-4567", "next_turn_plan": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"phone": "02-123-4567"}}}}}, {"plan": "ACTION_VIEW_CALL_LOG", "reason": "This scenario is when a user has made a phone call and then wants to see if it went through or check their recent call list. For example, right after dialing a call with `dial` (existing API), the user can ask to see their call log, and `ACTION_VIEW_CALL_LOG` (new API) will display it. Saying “Call Mom” followed by “Show my call log” is a natural sequence.", "example": {"query": "Call 010-1234-5678", "device_response": "Dialing Mom at 010-1234-5678...", "next_turn_query": "Show my call log", "rewrited_query": "Show my call log", "next_turn_plan": {"plan": "ACTION_VIEW_CALL_LOG", "arguments": {}}}}]}
{"plan": "get_contact_info", "description": "Retrieve specific information from a contact by URI.\n\nFor example, given a contact URI, this function can fetch details like phone number, email, or address.", "arguments": {"contact_uri": {"description": "The content URI of the contact to retrieve information from.", "type": "str", "required": true}, "info_type": {"description": "The type of information to retrieve (e.g., 'phone', 'email', 'address'). If not specified, returns a summary of the contact.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "The requested contact information (e.g., a phone number, email, or address) as a string, or None if not available.", "type": "Optional[str]", "example": ["442-334-6677", "test@samsung.com"]}, "examples": ["# Get a phone number from a contact\nphone = get_contact_info(contact_uri, \"phone\")"], "next_turn_plans": [{"plan": "dial", "reason": "Allows the user to immediately call the phone number retrieved from the contact info.", "example": {"query": "What's Mike's phone number?", "device_response": "Mike's phone number is 010-9999-0000", "next_turn_query": "Call him", "rewrited_query": "Call 010-9999-0000", "next_turn_plan": {"plan": "dial", "arguments": {"phone_number": "010-9999-0000"}}}}, {"plan": "send_message", "reason": "Naturally transitions to sending a text message to the phone number that was retrieved.", "example": {"query": "What's John's phone number?", "device_response": "John's phone number is 010-1212-3434", "next_turn_query": "Text him saying 'Hi John, let's catch up soon.'", "rewrited_query": "Text 010-1212-3434 saying 'Hi John, let's catch up soon.'", "next_turn_plan": {"plan": "send_message", "arguments": {"to": "010-1212-3434", "message": "Hi John, let's catch up soon."}}}}, {"plan": "send_email", "reason": "Leads to composing and sending an email to the email address that was retrieved.", "example": {"query": "Get Jane's email address", "device_response": "Jane's email is jane@example.com", "next_turn_query": "Send her an email", "rewrited_query": "Send jane@example.com an email", "next_turn_plan": {"plan": "send_email", "arguments": {"to": "jane@example.com"}}}}, {"plan": "search_location", "reason": "If an address was retrieved from the contact info, the user can search for that address on a map next.", "example": {"query": "Find the address for Office", "device_response": "Office's address is 10 Broadway, NY", "next_turn_query": "Navigate there", "rewrited_query": "Navigate to 10 Broadway, NY", "next_turn_plan": {"plan": "search_location", "arguments": {"query": "10 Broadway, NY"}}}}, {"plan": "ACTION_VIEW_CONTACT", "reason": "If a contact URI was retrieved (via the 'uri' key), the user can open that contact’s details.", "example": {"query": "Get contact info for ID 5", "device_response": "Retrieved contact URI: content://contacts/people/5", "next_turn_query": "Open it", "rewrited_query": "Open content://contacts/people/5", "next_turn_plan": {"plan": "ACTION_VIEW_CONTACT", "arguments": {"contact_uri": "content://contacts/people/5"}}}}, {"plan": "ACTION_EDIT_CONTACT", "reason": "Similarly, if a contact URI was retrieved, the user can proceed to edit that contact’s information.", "example": {"query": "Get contact info for ID 8", "device_response": "Retrieved contact URI: content://contacts/people/8", "next_turn_query": "Update that contact", "rewrited_query": "Update content://contacts/people/8", "next_turn_plan": {"plan": "ACTION_EDIT_CONTACT", "arguments": {"contact_uri": "content://contacts/people/8"}}}}, {"plan": "ACTION_NAVIGATE_TO_LOCATION", "reason": "If a contact query returns an address, navigation can start immediately using the provided address.", "example": {"query": "Show me Younghee's contact information.", "device_response": "Younghee - Phone: 010-1234-5678, Address: 10 Teheran-ro, Gangnam-gu, Seoul", "next_turn_query": "Navigate there.", "rewrited_query": "Navigate to Younghee's address (10 Teheran-ro, Gangnam-gu, Seoul).", "next_turn_plan": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "10 Teheran-ro, Gangnam-gu, Seoul"}}}}]}
{"plan": "get_contact_info_from_uri", "description": "Given a content URI pointing to a specific piece of contact data (e.g., a phone number or email), retrieve that information.\n\nFor instance, if provided a content URI for a phone number, this function returns the phone number string.", "arguments": {"data_uri": {"description": "The content URI of the specific contact data to retrieve.", "type": "str", "required": true}}, "returns": {"description": "The contact data (phone number, email, etc.) as a string, or None if not available.", "type": "Optional[str]", "example": ["82-10-3212-3213", "test@samsung.com"]}, "examples": ["# Suppose we got a phone number URI from ACTION_PICK, now retrieve the number string\nphone_number = get_contact_info_from_uri(phone_number_uri)"], "next_turn_plans": [{"plan": "send_message", "reason": "If the user wants to send a text message to the obtained phone number, it naturally follows.", "example": {"query": "Use this number URI", "device_response": "Retrieved number: +1-234-567-8901", "next_turn_query": "Text that number saying 'Hello.'", "rewrited_query": "Text +1-234-567-8901 saying 'Hello.'", "next_turn_plan": {"plan": "send_message", "arguments": {"to": "+1-234-567-8901", "message": "Hello."}}}}, {"plan": "send_email", "reason": "Immediately leads to composing and sending an email to the email address obtained.", "example": {"query": "Here's an email URI I selected", "device_response": "Retrieved email: someone@example.com", "next_turn_query": "Email them now", "rewrited_query": "Email someone@example.com now", "next_turn_plan": {"plan": "send_email", "arguments": {"to": "someone@example.com"}}}}, {"plan": "search_location", "reason": "If an address was extracted from the contact, the next step could be to search it on a map to verify the location.", "example": {"query": "Got an address URI", "device_response": "Retrieved address: 500 Main St, Springfield", "next_turn_query": "Show it on map", "rewrited_query": "Show 500 Main St, Springfield on map", "next_turn_plan": {"plan": "search_location", "arguments": {"query": "500 Main St, Springfield"}}}}, {"plan": "dial", "reason": "Allows the user to directly call the phone number obtained from the contact URI.", "example": {"query": "Here's a phone URI I got", "device_response": "Retrieved number: 010-3333-4444", "next_turn_query": "Call it", "rewrited_query": "Call 010-3333-4444", "next_turn_plan": {"plan": "dial", "arguments": {"phone_number": "010-3333-4444"}}}}, {"plan": "ACTION_NAVIGATE_TO_LOCATION", "reason": "Extracting address information from a detailed contact URI allows immediate navigation to that location.", "example": {"query": "Open the business card content://contacts/1/data/Gildong I received.", "device_response": "Hong Gildong - Phone: 010-9876-5432, Address: 1234 Udong, Haeundae-gu, Busan", "next_turn_query": "Start navigation there.", "rewrited_query": "Start navigation to Hong Gildong's address (1234 Udong, Haeundae-gu, Busan).", "next_turn_plan": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "1234 Udong, Haeundae-gu, Busan"}}}}]}
{"plan": "open_settings", "description": "Opens a specific settings screen on the device.\n\nThis function allows you to open various system settings screens,\nproviding quick access to different device configuration options.", "arguments": {"setting_type": {"description": "The type of settings screen to open.\nPossible values are:\n- \"general\": General settings (default)\n- \"wireless\": Wireless & network settings\n- \"airplane_mode\": Airplane mode settings\n- \"wifi\": Wi-Fi settings\n- \"apn\": APN settings\n- \"bluetooth\": Bluetooth settings\n- \"date\": Date & time settings\n- \"locale\": Language & input settings\n- \"input_method\": Input method settingFs\n- \"display\": Display settings\n- \"security\": Security settings\n- \"location\": Location settings\n- \"internal_storage\": Internal storage settings\n- \"memory_card\": Memory card settings", "type": "str", "required": false, "default": "general"}}, "returns": {"description": "A confirmation message indicating the requested settings screen opened successfully.", "type": "str", "example": ["Wi-Fi settings opened successfully."]}, "examples": ["# Open general settings\nopen_settings()\n\n# Open Wi-Fi settings\nopen_settings(\"wifi\")\n\n# Open Bluetooth settings\nopen_settings(\"bluetooth\")"], "next_turn_plans": [{"plan": "search_location", "reason": "After changing the location settings, the user can use the updated information to perform additional location-based searches or checks.", "example": {"query": "Open Location settings", "device_response": "Location settings opened", "next_turn_query": "Find nearby restaurants", "rewrited_query": "Find nearby restaurants", "next_turn_plan": {"plan": "search_location", "arguments": {"query": "nearby restaurants"}}}}]}
{"plan": "search_location", "description": "Perform a location search (for a place or physical address) using the given query.\n\nThis function might open a map application or a location picker to find the specified place or address.", "arguments": {"query": {"description": "The location or address to search for.", "type": "str", "required": true}}, "returns": {"description": "A string representing the result of the search (e.g., an address or coordinates)", "type": "Optional[str]", "example": ["123 Elm St, Springfield", "Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Search for an address\naddress = search_location(\"1600 Amphitheatre Parkway, Mountain View, CA\")"], "next_turn_plans": [{"plan": "send_message", "reason": "The user can send the found location or address information via text message to share it.", "example": {"query": "Find Central Park in New York", "device_response": "Central Park located:  New York, NY 10022", "next_turn_query": "Text me that address", "rewrited_query": "Text me New York, NY 10022", "next_turn_plan": {"plan": "send_message", "arguments": {"to": "me", "message": "New York, NY 10022"}}}}, {"plan": "send_email", "reason": "If the user wants to share the discovered address or location via email, that naturally follows.", "example": {"query": "Search for 1600 Amphitheatre Parkway", "device_response": "Found:  1600 Amphitheatre Pkwy, Mountain View, CA 94043", "next_turn_query": "Email it to John", "rewrited_query": "Email 1600 Amphitheatre Pkwy, Mountain View, CA 94043 to John", "next_turn_plan": {"plan": "send_email", "arguments": {"to": "John", "body": "1600 Amphitheatre Pkwy, Mountain View, CA 94043"}}}}, {"plan": "ACTION_INSERT_EVENT", "reason": "If the user wants to create a new event using the searched location, they can add a new calendar event with that location.", "example": {"query": "Look up Eiffel Tower", "device_response": "Eiffel Tower:  Champ de Mars, 5 Avenue Anatole France, Paris", "next_turn_query": "Add an event there next week", "rewrited_query": "Add an event at Champ de Mars, 5 Avenue Anatole France, Paris next week", "next_turn_plan": {"plan": "ACTION_INSERT_EVENT", "arguments": {"EVENT_LOCATION": "Champ de Mars, 5 Avenue Anatole France, Paris"}}}}, {"plan": "ACTION_NAVIGATE_TO_LOCATION", "reason": "After searching for a place, users might want to immediately navigate there.", "example": {"query": "Find Gangnam Station.", "device_response": "Gangnam Station - Teheran-ro, Gangnam-gu, Seoul. Displaying on map.", "next_turn_query": "Take me there.", "rewrited_query": "Navigate to Gangnam Station.", "next_turn_plan": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "Gangnam Station"}}}}]}
{"plan": "send_email", "description": "Compose an email with the given details and send it using an email app.\n\nThis function can populate fields like recipient, subject, and body, then launch an email client to send the message.", "arguments":{"to":{"description": "Email address of the recipient.", "type": "str", "required":true}, "subject":{"description": "Subject of the email.", "type": "str", "required":false, "default": ""}, "body":{"description": "Body text of the email.", "type": "str", "required":false, "default": ""}, "attachments":{"description": "List of file URIs to attach to the email.", "type": "List[str]", "required":false, "default":[]}}, "returns":{"description": "A confirmation message indicating the email was sent, including the recipient's email address.", "type": "str", "example":["Email successfully sent to alice@example.com"]}, "examples":["# Send an email to john@samsung.com with reminding today's meeting\nsend_email({\"to\": \"john@samsung.com\", \"body\": \"reminding today's meeting\"})"], "next_turn_plans":[{"plan": "send_message", "reason": "After sending an email, the user might send the same content in a text message to give an extra notification to the recipient.", "example":{"query": "Send an email to alice@example.com", "device_response": "Email successfully sent to alice@example.com", "next_turn_query": "Also text her saying 'Just sent you an email.'", "rewrited_query": "Also text alice saying 'Just sent you an email.'", "next_turn_plan":{"plan": "send_message", "arguments":{"to": "alice", "message": "Just sent you an email."}}}},{"plan": "ACTION_VIEW_SENT_EMAILS", "reason": "This scenario is when a user has sent an email and then wants to check that the email was saved or to review other sent emails. Right after sending an email with `send_email` (existing API), using `ACTION_VIEW_SENT_EMAILS` (new API) can display the sent emails folder. For example, the user might say “Send an email to my boss” and then “Show my sent emails.”", "example":{"query": "Send an email to boss@example.com with the sales report", "device_response": "Email sent to boss@example.com", "next_turn_query": "Show my sent emails", "rewrited_query": "View sent emails", "next_turn_plan":{"plan": "ACTION_VIEW_SENT_EMAILS", "arguments":{}}}}]}
{"plan": "send_message", "description": "Send an SMS or messaging app text with the given content.\n\nThis function sends a text message to a specified phone number (or contact) with an optional content body. Attachments (like images) may be provided as URIs.", "arguments": {"to": {"description": "Phone number or contact to send the message to.", "type": "str", "required": true}, "message": {"description": "The text content of the message.", "type": "str", "required": true}, "attachments": {"description": "List of content URIs (e.g., images or files) to attach to the message.", "type": "List[str]", "required": false, "default": []}}, "returns": {"description": "A confirmation message indicating the text was sent, including the recipient's contact information.", "type": "str", "example": ["Message successfully sent to +1234567890"]}, "examples": ["# Send a text message\nsend_message({\"to\":  \"+1234567890\", \"message\":  \"Hello there!\"})"], "next_turn_plans": [{"plan": "send_email", "reason": "After sending a text message, the user might send the same content via email to broaden the communication channel.", "example": {"query": "Text 010-7777-8888 'Hello'", "device_response": "Message successfully sent to 010-7777-8888", "next_turn_query": "Email the same thing to 'lora@samsung.com'", "rewrited_query": "Email 'Hello' to 'lora@samsung.com'", "next_turn_plan": {"plan": "send_email", "arguments": {"to": "lora@samsung.com", "body": "Hello"}}}}, {"plan": "dial", "reason": "If the user wants to follow up a text message with a direct call to the recipient, that would be the next step.", "example": {"query": "Send a text to Dave:  'Meeting at 5'", "device_response": "Message successfully sent to Dave +1234567890", "next_turn_query": "Call him now", "rewrited_query": "Call +1234567890", "next_turn_plan": {"plan": "dial", "arguments": {"phone_number": "+1234567890"}}}}, {"plan": "ACTION_VIEW_SENT_MESSAGES", "reason": "This scenario is when a user has sent a text message and then wants to see that the message was properly recorded or to check other sent messages. Right after sending a message with `send_message` (existing API), the user can use `ACTION_VIEW_SENT_MESSAGES` (new API) to display the list of sent messages. For example, the user might say “Text Mom ‘I arrived home safely’” and then “Show my sent messages.”", "example": {"query": "Text Mom 'I arrived home safely.'", "device_response": "Sent message to Mom: 'I arrived home safely.'", "next_turn_query": "Show my sent messages", "rewrited_query": "Show my sent messages", "next_turn_plan": {"plan": "ACTION_VIEW_SENT_MESSAGES", "arguments": {}}}}]}
{"plan": "web_search", "description": "Initiates a web search using the specified query.\n\nThis function starts a web search using the default search engine.\nIt opens the search results in the default web browser or appropriate search application.", "arguments": {"query": {"description": "The search string or query to look up.", "type": "str", "required": true}}, "returns": {"description": "A summary message indicating the web search was successfully initiated along with a brief preview of search content.", "type": "str", "example": ["Search results for 'Python programming tutorials': Tutorials, courses, and guides on Python programming available."]}, "examples": ["# Simple web search\nweb_search(\"Python programming tutorials\")\n\n# Search for a phrase\nweb_search('\"to be or not to be\"')\n\n# Search using a specific search engine\nweb_search(\"Python programming tutorials\", \"google\")"], "next_turn_plans": [{"plan": "ACTION_VIEW_WEB_HISTORY", "reason": "This scenario is when a user, after searching for something on the web or visiting a site, wants to view their recent browsing history. For example, after performing a search with `web_search` (existing API), the user can say “Show my web browsing history,” and `ACTION_VIEW_WEB_HISTORY` (new API) will display the list of recently visited pages.", "example": {"query": "Search the web for Python tutorials", "device_response": "Here are some results on Python tutorials.", "next_turn_query": "Show my browsing history", "rewrited_query": "View web browsing history", "next_turn_plan": {"plan": "ACTION_VIEW_WEB_HISTORY", "arguments": {}}}}]}
{"plan": "play_music", "description": "Plays music using a specified Music application or the default player.\n\nThis function will send an intent to play music. If a specific app or track is provided, it will attempt to play that; otherwise, it may open a music app.", "arguments": {"track": {"description": "The name or URI of the track to play (optional).", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific music app to use (optional). If not provided, uses the default music player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating music playback has started successfully.", "type": "str", "example": ["Now playing: Imagine - John Lennon."]}, "examples": ["# Play a song by name\nplay_music({\"track\": \"Imagine - John Lennon\"})"], "next_turn_plans": [{"plan": "ACTION_VIEW_PLAYLIST", "reason": "This scenario is when a user is listening to music and wants to see the songs in the currently playing playlist. For example, if the assistant started playing a playlist via `play_music` (existing API) or the user said “Play my ‘Road Trip’ playlist,” and then asks “What songs are in this playlist?”, `ACTION_VIEW_PLAYLIST` (new API) can show the songs in that playlist.", "example": {"query": "Play my 'Road Trip' playlist", "device_response": "Now playing 'Road Trip' playlist – Highway to Hell by AC/DC", "next_turn_query": "Show me the playlist songs", "rewrited_query": "View playlist 'Road Trip'", "next_turn_plan": {"plan": "ACTION_VIEW_PLAYLIST", "arguments": {"playlist_name": "Road Trip"}}}}]}
{"plan": "play_video", "description": "Plays a video using a specified Video player or the default player.\n\nThis function will send an intent to play the given video. If a specific app or video URI is provided, it will attempt to play that; otherwise, it opens the default video player.", "arguments": {"video_uri": {"description": "The URI of the video to play (optional). If not provided, this will open the default video player.", "type": "Optional[str]", "required": false, "default": null}, "app": {"description": "The specific video player app to use (optional). If not provided, uses the default video player.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A confirmation message indicating video playback has started successfully.", "type": "str", "example": ["Video playback started successfully."]}, "examples": ["# Play a specific video\nplay_video({\"video_uri\": video_file_uri})"], "next_turn_plans": [{"plan": "ACTION_EDIT_VIDEO", "reason": "After playing a video, users might decide it needs editing.", "example": {"query": "Play last week's family trip video file:///videos/family_trip.mp4", "device_response": "Playing video family_trip.mp4.", "next_turn_query": "Edit it for me.", "rewrited_query": "Edit file:///videos/family_trip.mp4 for me", "next_turn_plan": {"plan": "ACTION_EDIT_VIDEO", "arguments": {"video_uri": "file:///videos/family_trip.mp4"}}}}]}
{"plan": "launch_application", "description": "Launches another application on the device by package name or intent.\n\nThis function allows the assistant to open another app. If a package name or intent is provided, it attempts to launch that application.", "arguments":{"application_name":{"description": "The name of the application to launch.", "type": "str", "required":true}}, "returns":{"description": "A confirmation message indicating the specified application launched successfully.", "type": "str", "example":["YouTube app opened successfully."]}, "examples":["# Launch the YouTube app\nlaunch_application({\"application_name\": \"YouTube\"})"], "next_turn_plans":[{"plan": "ACTION_VIEW_RECENT_APPS", "reason": "This scenario is when a user opens an app and then wants to see what apps they have used recently or are currently using. For example, after launching the YouTube app with `launch_application` (existing API), if the user asks “What apps have I used recently?”, `ACTION_VIEW_RECENT_APPS` (new API) can display the list of recent apps.", "example":{"query": "Open the YouTube app", "device_response": "YouTube app opened successfully.", "next_turn_query": "What apps have I used recently?", "rewrited_query": "View recent apps", "next_turn_plan":{"plan": "ACTION_VIEW_RECENT_APPS", "arguments":{}}}}]}
{"plan": "ACTION_EDIT_DOCUMENT", "description": "Edit an existing document.\n\nThis function opens the document specified by the given content URI for editing. It allows the user to modify the document's content. Additional content can be provided to pre-fill or insert into the document if supported.", "arguments": {"document_uri": {"description": "The content URI of the document to edit.", "type": "str", "required": true}, "content": {"description": "The content to insert or update in the document before editing. Default is None.", "type": "Optional[str]", "required": false, "default": null}}, "returns": {"description": "A URI as a string pointing to the edited document (usually the same as the input URI if saved), or None if the edit was canceled.", "type": "Optional[str]", "example": ["content://documents/doc/123", null]}, "examples": ["# Edit a document by URI\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri)\n\n# Edit a document and pre-fill text\nedited_doc_uri = ACTION_EDIT_DOCUMENT(document_uri, \"Initial content...\")"], "next_turn_plans": [{"plan": "send_email", "reason": "This scenario involves a user editing an existing document and then wanting to share the result immediately. After editing the document with `ACTION_EDIT_DOCUMENT` (new API), a natural next step is to send it via email (`send_email`, existing API) or in a message (`send_message`, existing API). For example, the user might edit a document and then email it to a team member.", "example": {"query": "Open report.txt for editing and add the latest sales data", "device_response": "Document content://documents/report.txt updated with the latest sales data.", "next_turn_query": "Email the updated document to the team@example.com", "rewrited_query": "Email content://documents/report.txt to the team@example.com", "next_turn_plan": {"plan": "send_email", "arguments": {"to": "team@example.com", "attachments": ["content://documents/report.txt"]}}}}]}
{"plan": "ACTION_SET_RINGTONE", "description": "Set the device's ringtone.\n\nThis function changes the default incoming call ringtone to the specified audio file.", "arguments": {"ringtone_uri": {"description": "The content URI of the new ringtone audio to set.", "type": "str", "required": true}}, "returns": {"description": "A confirmation message indicating the ringtone was changed successfully (including the ringtone name if available).", "type": "str", "example": ["Ringtone changed successfully"]}, "examples": ["# Set the ringtone to a selected sound 'content://media/ringtone01'\nACTION_SET_RINGTONE('content://media/ringtone01')"], "next_turn_plans": [{"plan": "ACTION_GET_RINGTONE", "reason": "This scenario is where a user, after setting a default ringtone, decides they don’t like it and chooses a different one. For example, after setting the “Classic Bell” ringtone with `ACTION_SET_RINGTONE` (new API), the user can immediately be prompted to select a new ringtone from the list via `ACTION_GET_RINGTONE` (existing API). It’s a natural continuation to start looking for another option right after setting a ringtone.", "example": {"query": "Set my ringtone to content://media/ringtone15", "device_response": "Ringtone changed to content://media/ringtone15", "next_turn_query": "Actually, show me other ringtones", "rewrited_query": "show me other ringtones", "next_turn_plan": {"plan": "ACTION_GET_RINGTONE", "arguments": {}}}}]}
{"plan": "ACTION_EDIT_ALARM", "description": "Edit an existing alarm.\n\nThis function allows the user to modify an alarm that is already set. The alarm is identified by an ID or index, and the user can change its time, label, repeat days, vibration, or ringtone.", "arguments": {"alarm_id": {"description": "The identifier of the alarm to edit (e.g., an ID or index from the alarm list).", "type": "int", "required": true}, "EXTRA_HOUR": {"description": "The hour of the alarm (0-23).", "type": "int", "required": true}, "EXTRA_MINUTES": {"description": "The minutes of the alarm (0-59).", "type": "int", "required": true}, "EXTRA_MESSAGE": {"description": "Alarm message or label.", "type": "str", "required": false, "default": ""}, "EXTRA_DAYS": {"description": "List of days when the alarm should repeat (e.g., [\"Monday\", \"Wednesday\"]). Empty list or missing means no repeat.", "type": "List[str]", "required": false, "default": []}, "EXTRA_VIBRATE": {"description": "Whether the alarm should vibrate. Default is True.", "type": "bool", "required": false, "default": true}, "EXTRA_RINGTONE": {"description": "The URI of the ringtone to use for this alarm. Default ringtone if None.", "type": "Optional[str]", "required": false, "default": null}, "EXTRA_SKIP_UI": {"description": "If true, sets the alarm without showing the clock app UI for confirmation.", "type": "bool", "required": false, "default": false}}, "returns": {"description": "A confirmation message describing the updated alarm (new time, label, etc.), or None if the edit was canceled.", "type": "Optional[str]", "example": ["alarm_id: alarm_no1 has updated to 8:30 AM: Morning alarm"]}, "examples": ["# Edit Alarm 'alarm_no1' to 8:30 AM\nACTION_EDIT_ALARM(alarm_id='alarm_no1',\"EXTRA_HOUR\": 7, \"EXTRA_MINUTES\": 30)"], "next_turn_plans": [{"plan": "ACTION_SHOW_ALARMS", "reason": "This scenario is when a user changes an alarm and then wants to make sure the change took effect by reviewing all alarms again. After modifying an alarm with `ACTION_EDIT_ALARM` (new API), the user can immediately run `ACTION_SHOW_ALARMS` (existing API) to display all alarms. It's a natural step to verify the results right after updating an alarm.", "example": {"query": "Edit my alarm_id 1 to 8:30 AM and label it 'Morning run'", "device_response": "alarm_id: 1 has updated to 8:30 AM: Morning run", "next_turn_query": "Show all alarms", "rewrited_query": "Show alarms", "next_turn_plan": {"plan": "ACTION_SHOW_ALARMS", "arguments": {}}}}]}
{"plan": "ACTION_EDIT_VIDEO", "description": "Edit a video file.\n\nThis function opens a video specified by its URI in an editing mode, allowing the user to trim or modify the video. Optional parameters can be provided to automatically apply edits such as trimming or muting the video.", "arguments": {"video_uri": {"description": "The content URI of the video to edit.", "type": "str", "required": true}, "edit_options": {"description": "A dictionary of editing options. Keys can include 'start_time' (ms), 'end_time' (ms) for trimming, and 'mute' (bool) to remove audio. Default is None.", "type": "Optional[Dict[str, Any]]", "required": false, "default": null}}, "returns": {"description": "A content URI as a string pointing to the edited video (a new video file if changes are saved), or None if editing was canceled.", "type": "Optional[str]", "example": ["content://media/edited_video_001.mp4", null]}, "examples": ["# Open a video content://videos/presentation.mp4 for manual editing\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/presentation.mp4)\n\n# Trim a video 'content://videos/clip001.mp4' to first 30 seconds\nedited_video_uri = ACTION_EDIT_VIDEO(video_uri='content://videos/clip001.mp4', {\"start_time\": 0, \"end_time\": 30000})"], "next_turn_plans": [{"plan": "play_video", "reason": "This scenario is when a user wants to immediately check the result after editing a video. Right after editing a video with `ACTION_EDIT_VIDEO` (new API), you can use the returned URI of the edited video to play it with `play_video` (existing API). It’s natural for the user to request playback immediately to review the edited result.", "example": {"query": "Mute this video clip", "device_response": "Edited video saved as content://media/edited_video_001.mp4", "next_turn_query": "Play the edited video", "rewrited_query": "Play content://media/edited_video_001.mp4", "next_turn_plan": {"plan": "play_video", "arguments": {"video_uri": "content://media/edited_video_001.mp4"}}}}, {"plan": "send_message", "reason": "This scenario covers when a user wants to send an edited video to someone immediately after editing it. In this case, right after using `ACTION_EDIT_VIDEO` (new API), it is natural to use `send_message` or `send_email` (existing API) to share the edited video file. For example, the user might trim a video and then send it via text message.", "example": {"query": "Trim this video and remove audio", "device_response": "Video edited and saved to content://media/edited_party.mp4", "next_turn_query": "Send it to John in a message", "rewrited_query": "Text content://media/edited_party.mp4 to John", "next_turn_plan": {"plan": "send_message", "arguments": {"to": "John", "attachments": ["content://media/edited_party.mp4"], "message": ""}}}}]}
{"plan": "ACTION_NAVIGATE_TO_LOCATION", "description": "Start navigation to a specified location.\n\nThis function launches a maps/navigation app to guide the user to the given destination, which can be provided as an address or coordinates.", "arguments": {"location": {"description": "The destination to navigate to (address string or latitude,longitude coordinates).", "type": "str", "required": true}}, "returns": {"description": "navigation is started in a maps application", "type": "Optional[str]", "example": ["navigation is started in a maps application: Statue of Liberty, New York, NY 10004, USA"]}, "examples": ["# Start navigation to an '1600 Amphitheatre Parkway, Mountain View, CA'\nACTION_NAVIGATE_TO_LOCATION(\"1600 Amphitheatre Parkway, Mountain View, CA\")"], "next_turn_plans": [{"plan": "send_message", "reason": "During navigation, users may want to notify others of their arrival time.", "example": {"query": "Start navigation home.", "device_response": "Navigation home started. Estimated arrival in 45 minutes.", "next_turn_query": "Send a message to Mom saying that information", "rewrited_query": "Send a message to Mom saying 'I'll arrive in 45 minutes.'", "next_turn_plan": {"plan": "send_message", "arguments": {"to": "Mom", "message": "I'll arrive in 45 minutes."}}}}]}
{"plan": "ACTION_VIEW_EVENT", "description": "View a calendar event's details.\n\nThis function opens the calendar event specified by the given content URI and displays its details (title, time, location, etc.).", "arguments": {"event_uri": {"description": "The content URI of the calendar event to view.", "type": "str", "required": true}}, "returns": {"description": "A Event detail as a string or a summary of Event details, or None if the event could not be displayed.", "type": "Optional[str]", "example": ["Meeting with Bob at 3:00 PM on Sep 15"]}, "examples": ["# View a calendar event 'content://calender/event/1'\nACTION_VIEW_EVENT(event_uri='content://calender/event/1')"], "next_turn_plans": [{"plan": "ACTION_NAVIGATE_TO_LOCATION", "reason": "This scenario is when a user, after viewing the details of a calendar event, wants to go to the event's location immediately. Right after opening a specific event with `ACTION_VIEW_EVENT` (new API), the assistant can use that event's location information to execute `ACTION_NAVIGATE_TO_LOCATION` (new API). For example, the user might say “Show my 'Team Meeting' details” (sees the location) then “Navigate to that office, ” demonstrating that even two new API actions can be chained together.", "example": {"query": "Show details for event with 'content://calender/event/1'", "device_response": "Team Meeting - 3:00 PM at HQ Office (Sep 15)", "next_turn_query": "Navigate to that office", "rewrited_query": "Navigate to HQ Office", "next_turn_plan": {"plan": "ACTION_NAVIGATE_TO_LOCATION", "arguments": {"location": "HQ Office"}}}}, {"plan": "send_email", "reason": "This scenario is when a user, after viewing an event’s details, wants to share that information with someone else. Right after showing the event details with `ACTION_VIEW_EVENT` (new API), that information can be shared via `send_email` or `send_message` (existing API). For example, after seeing the details, the user might say “Email these details to my team.”", "example": {"query": "View the appointment details here 'content://calender/event/2' for my Doctor visit", "device_response": "Doctor Visit – Nov 5, 10:00 AM at City Clinic", "next_turn_query": "Email these details to my husband@example.com", "rewrited_query": "Email Doctor Visit – Nov 5, 10:00 AM at City Clinic to my husband", "next_turn_plan": {"plan": "send_email", "arguments": {"to": "@example.com", "body": "Doctor Visit – Nov 5, 10:00 AM at City Clinic"}}}}]}
{"plan": "ACTION_SHOW_TIMERS", "description": "Display the list of active timers.\n", "arguments": {}, "returns": {"description": "A string listing all currently active timers. number of timers could be 1 ~ 5. generate creatively and diversely", "type": "str", "example": ["Active timers: [5 minutes - Pasta, 10 minutes - Workout]"]}, "examples": ["# Show all timers\nACTION_SHOW_TIMERS()"], "next_turn_plans": [{"plan": "ACTION_SET_TIMER", "reason": "This scenario is where a user checks the currently running timers and then sets an additional timer. Right after viewing the active timers with `ACTION_SHOW_TIMERS` (new API), they can use `ACTION_SET_TIMER` (existing API) to start a new timer if needed. For example, after seeing the existing timers, the user might say “Start a new 15-minute timer for exercise.”", "example": {"query": "What timers are running?", "device_response": "Active timers: [5 minutes – Tea, 10 minutes – Laundry]", "next_turn_query": "Add a 15-minute timer for exercise", "rewrited_query": "Set a 15-minute timer for exercise", "next_turn_plan": {"plan": "ACTION_SET_TIMER", "arguments": {"duration": "15 minutes", "EXTRA_MESSAGE": "exercise"}}}}]}
{"plan": "ACTION_VIEW_CALL_LOG", "description": "View the device's call log (recent calls).\n\nThis function retrieves and displays the recent call history, including incoming, outgoing, and missed calls.", "arguments": {}, "returns": {"description": "A string listing recent call log entries (caller names/numbers and call times/types), or None if the call log is empty or inaccessible.", "type": "Optional[str]", "example": ["Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM"]}, "examples": ["# View recent calls\nACTION_VIEW_CALL_LOG()"], "next_turn_plans": [{"plan": "dial", "reason": "This scenario is when a user checks their call log and then wants to immediately return a missed call. Right after viewing the recent calls with `ACTION_VIEW_CALL_LOG` (new API), it’s possible to select one and call back using `dial` (existing API). For example, upon seeing “Alice - +1-302-3782 (Missed)” in the call log, the user might say “Call +1-302-3782 back.”", "example": {"query": "Who called me recently?", "device_response": "Call log: Alice +1-302-3782 (Missed) - Today 2:45 PM; Bob (Outgoing) +1-872-1285 - Yesterday 1:15 PM", "next_turn_query": "Call Alice back", "rewrited_query": "Call +1-302-3782 back", "next_turn_plan": {"plan": "dial", "arguments": {"phone_number": "+1-302-3782"}}}}, {"plan": "ACTION_INSERT_CONTACT", "reason": "This scenario is a continuous action where a user immediately saves an unfamiliar number from the call log into contacts. If the `ACTION_VIEW_CALL_LOG` (new API) shows a call from an unknown number, the user can say “Save that number as a new contact.” Then `ACTION_INSERT_CONTACT` (existing API) will save that number as a new contact entry.", "example": {"query": "Show my recent calls", "device_response": "Call log: Unknown number 010-5555-6666 (Missed) - Today 9:00 AM", "next_turn_query": "Save that number as a new contact John Doe", "rewrited_query": "Add new contact with phone 010-5555-6666 named John Doe", "next_turn_plan": {"plan": "ACTION_INSERT_CONTACT", "arguments": {"contact_info": {"name": "John Doe", "phone": "010-5555-6666"}}}}}, {"plan": "send_message", "reason": "Users commonly send messages after reviewing call logs, especially missed calls.", "example": {"query": "Show me my call logs.", "device_response": "Recent calls: 1) Mom - missed (today at 09:30), 2) Cheolsu - answered (yesterday at 18:00).", "next_turn_query": "Send a message to the first person saying 'Can you talk now?'.", "rewrited_query": "Send a message to Mom saying 'Can you talk now?'.", "next_turn_plan": {"plan": "send_message", "arguments": {"to": "Mom", "message": "Can you talk now?"}}}}]}
{"plan": "ACTION_VIEW_SENT_EMAILS", "description": "View the list of sent emails.\n\nThis function displays emails from the user's sent mail folder, showing recently sent emails and their recipients.", "arguments": {}, "returns": {"description": "A string listing recently sent emails (recipients and subjects), or None if no sent emails are found.", "type": "Optional[str]", "example": ["Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'"]}, "examples": ["# View sent emails\nACTION_VIEW_SENT_EMAILS()"], "next_turn_plans": [{"plan": "send_email", "reason": "This scenario is when a user checks their sent email folder and then wants to send a follow-up email or reply. After viewing sent emails with `ACTION_VIEW_SENT_EMAILS` (new API), the user might want to send another email to someone from that list. In this case, they can proceed to compose a new email using `send_email` (existing API).", "example": {"query": "What emails have I sent recently?", "device_response": "Sent emails: to alice@example.com - 'Project Update'; to bob@example.com - 'Meeting Agenda'", "next_turn_query": "Send Alice another update about the budget", "rewrited_query": "Email alice@example.com about the budget update", "next_turn_plan": {"plan": "send_email", "arguments": {"to": "alice@example.com", "body": "Budget update..."}}}}, {"plan": "send_email", "reason": "Reviewing sent emails often leads users to immediately compose another email.", "example": {"query": "Show me emails I sent.", "device_response": "Recently sent emails: 1) Minsu Kim - kimminsu@samsung.com (Subject: Meeting Schedule, Body: Schedule is this friday 5PM.), 2) Soyeon Park - sy.park@gmail.com (Subject: Invitation).", "next_turn_query": "Resend the meeting schedule email to Minsu Kim.", "rewrited_query": "Send an email to kimminsu@samsung.com (Subject: Meeting Schedule, Body: Schedule is this friday 5PM.).", "next_turn_plan": {"plan": "send_email", "arguments": {"to": "kimminsu@samsung.com", "subject": "Meeting Schedule", "body": "Schedule is this friday 5PM."}}}}, {"plan": "send_message", "reason": "After reviewing sent emails, users may want to send a text message to ensure the recipient has seen the email.", "example": {"query": "Check my sent emails.", "device_response": "Sent emails: 1) Jihoon Choi (Subject: Contract Sent), 2) Seohyun Kim (Subject: Greetings).", "next_turn_query": "Send a message to the first person saying 'Please check the email I sent.'", "rewrited_query": "Send a message to Jihoon Choi saying 'Please check the email I sent.'", "next_turn_plan": {"plan": "send_message", "arguments": {"to": "Jihoon Choi", "message": "Please check the email I sent."}}}}]}
{"plan": "ACTION_VIEW_SENT_MESSAGES", "description": "View the list of sent text messages.\n\nThis function shows recently sent SMS/MMS messages, including the recipients and a snippet of each message.", "arguments": {}, "returns": {"description": "A string listing recent sent messages with their recipients (and message snippets), or None if no sent messages are found.", "type": "Optional[str]", "example": ["Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\"."]}, "examples": ["# View sent text messages\nACTION_VIEW_SENT_MESSAGES()"], "next_turn_plans": [{"plan": "dial", "reason": "This scenario is when a user, after looking at their sent messages, wants to take further action with a recent contact. For example, after checking sent messages with `ACTION_VIEW_SENT_MESSAGES` (new API), the user might decide to call Mom (`dial`, existing API) or send another message to the same person.", "example": {"query": "What texts have I sent?", "device_response": "Sent messages: Mom +82-3512-0000 – \"I'll be there soon\"; Alice – \"Happy Birthday!\".", "next_turn_query": "Call Mom now", "rewrited_query": "Call +82-3512-0000 now", "next_turn_plan": {"plan": "dial", "arguments": {"phone_number": "+82-3512-0000"}}}}, {"plan": "send_message", "reason": "Users often send additional messages immediately after reviewing previously sent messages.", "example": {"query": "Show messages I've sent.", "device_response": "Sent messages: 1) Mom: 'I'll be there soon.', 2) Hyunwoo Lee: 'See you tomorrow.'", "next_turn_query": "Send a message to first one saying 'I'm leaving now.'", "rewrited_query": "Send a message to Mom saying 'I'm leaving now.'", "next_turn_plan": {"plan": "send_message", "arguments": {"to": "Mom", "message": "I'm leaving now."}}}}, {"plan": "dial", "reason": "After viewing sent messages, a user might decide to call the message recipient if texting is insufficient.", "example": {"query": "Show sent messages.", "device_response": "Sent messages: 1) Dad - 12-345-6789: 'Meeting finished.', 2) Hyunwoo Lee - 82+0000-5732: 'Got home safe.'", "next_turn_query": "Call the first person.", "rewrited_query": "Call 12-345-6789", "next_turn_plan": {"plan": "dial", "arguments": {"phone_number": "12-345-6789"}}}}]}
{"plan": "ACTION_VIEW_WEB_HISTORY", "description": "View the web browsing history.\n\nThis function displays the user's recent web browsing history, including the titles or URLs of recently visited webpages.", "arguments": {}, "returns": {"description": "A string listing recent web browsing history entries (e.g., page titles or URLs), or None if no history is available.", "type": "Optional[str]", "example": ["Web history: Google (search 'cat memes'); OpenAI Blog; Stack Overflow (JSON parsing)"]}, "examples": ["# View web browsing history\nACTION_VIEW_WEB_HISTORY()"], "next_turn_plans": [{"plan": "web_search", "reason": "After reviewing web history, users frequently perform additional searches based on previously visited pages or queries.", "example": {"query": "Show my web search history.", "device_response": "Search history: 1) 'Yeouido restaurants' (2025-03-30), 2) 'Cherry blossom festival dates' (2025-03-29).", "next_turn_query": "Search the first one again.", "rewrited_query": "Search 'Yeouido restaurants' again.", "next_turn_plan": {"plan": "web_search", "arguments": {"query": "Yeouido restaurants"}}}}]}
{"plan": "ACTION_VIEW_PLAYLIST", "description": "View a music playlist.\n\nThis function opens the specified playlist in the music app and displays its songs.", "arguments": {"playlist_name": {"description": "The name of the playlist to view.", "type": "str", "required": true}}, "returns": {"description": "A string summarizing the playlist (e.g., a list of some song titles), or None if the playlist is not found.", "type": "Optional[str]", "example": ["Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black"]}, "examples": ["# View a playlist by name\nACTION_VIEW_PLAYLIST(\"Road Trip\")"], "next_turn_plans": [{"plan": "play_music", "reason": "This scenario is when a user has viewed the song list of a playlist and wants to play one of those songs immediately. Right after seeing the playlist contents with `ACTION_VIEW_PLAYLIST` (new API), they can immediately play a selected track using `play_music` (existing API). For example, the user might say “Show the ‘Road Trip’ playlist” followed by “Play ‘Highway to Hell.’”", "example": {"query": "View 'Road Trip' playlist", "device_response": "Playlist 'Road Trip': Highway to Hell; Sweet Child O' Mine; Back in Black", "next_turn_query": "Play that", "rewrited_query": "Play Highway to Hell", "next_turn_plan": {"plan": "play_music", "arguments": {"track": "Highway to Hell"}}}}]}
{"plan": "ACTION_VIEW_RECENT_APPS", "description": "View the list of recently used apps.\n\nThis function shows the device's recent applications, typically the apps that were opened most recently.", "arguments":{}, "returns":{"description": "A string listing the recently used applications by name, or None if no recent apps data is available.", "type": "Optional[str]", "example":["Recent apps: Chrome; YouTube; Maps; Messages"]}, "examples":["# View recent apps\nACTION_VIEW_RECENT_APPS()"], "next_turn_plans":[{"plan": "launch_application", "reason": "After checking the recent apps list, a user may want to immediately launch or switch to one of those apps.", "example":{"query": "Show recently used apps.", "device_response": "Recently used apps: 1) YouTube, 2) Gallery, 3) Chrome.", "next_turn_query": "Open the first app.", "rewrited_query": "Open the YouTube app.", "next_turn_plan":{"plan": "launch_application", "arguments":{"application_name": "YouTube"}}}}]}